/usr/bin/mono /home/sto/RiderProjects/symdump/symdump/bin/Debug/symdump.exe "/home/sto/nas_public/Software/Dev/EZ (TR4 & TR5)/MAIN.SYM"
Version = 1, targetUnit = 0
<<<<CUT>>>>
/*
 * Offset 0x10000
 * C:\Projects2\Tomb5\SPEC_PSX\PSXMAIN.C (line 77)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ VSyncFunc()
/*
 * Offset 0x10064
 * C:\Projects2\Tomb5\SPEC_PSX\PSXMAIN.C (line 224)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ main()
extern int gp_start_address; // offset 0xA05B4
/*
 * Offset 0x10274
 * C:\Projects2\Tomb5\GAME\GAMEFLOW.C (line 389)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ QuickControlPhase()
/*
 * Offset 0x102E0
 * C:\Projects2\Tomb5\GAME\GAMEFLOW.C (line 427)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ LoadGameflow()
{ // line 3, offset 0x102e0
    int i; // register $16
    int len; // register $18
    unsigned char *s; // register $17
    struct STRINGHEADER sh; // stack offset -32
    { // line 124, offset 0x1048c
        int j; // register $3
    } // line 134, offset 0x104dc
    { // line 140, offset 0x10510
        int flag; // register $5
    } // line 222, offset 0x105d0
} // line 223, offset 0x10604
/*
 * Offset 0x10604
 * C:\Projects2\Tomb5\GAME\GAMEFLOW.C (line 1103)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ DoTitle(unsigned char Name /*reg $17*/, unsigned char Audio /*reg $5*/)
{ // line 1, offset 0x10604
    { // line 250, offset 0x109d4
        int i; // register $3
    } // line 258, offset 0x10a14
} // line 304, offset 0x10abc
/*
 * Offset 0x10ABC
 * C:\Projects2\Tomb5\GAME\GAMEFLOW.C (line 1425)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ DoLevel(unsigned char Name /*reg $18*/, unsigned char Audio /*reg $19*/)
{ // line 1, offset 0x10abc
    { // line 6, offset 0x10afc
        char *d; // register $16
    } // line 10, offset 0x10b20
} // line 325, offset 0x10f5c
/*
 * Offset 0x10F5C
 * C:\Projects2\Tomb5\GAME\GAMEFLOW.C (line 1771)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ DoGameflow()
{ // line 2, offset 0x10f5c
    unsigned char *gf; // register $7
    unsigned char n; // register $5
} // line 333, offset 0x115dc
extern unsigned char gfGameMode; // offset 0xA05C7
extern unsigned char gfNumMips; // offset 0xA05D0
extern int scroll_pos; // offset 0xA05B8
extern char DEL_playingamefmv; // offset 0xA05BC
extern char num_fmvs; // offset 0xA05BD
extern char fmv_to_play[2];
extern unsigned short dels_cutseq_selector_flag; // offset 0xA05C2
extern unsigned short dels_cutseq_player; // offset 0xA05C4
extern char Chris_Menu; // offset 0xA05C6
extern unsigned char gfLegendTime; // offset 0xA05C8
extern unsigned char bDoCredits; // offset 0xA05C9
static unsigned char gfCutNumber; // offset 0xA05CA
extern unsigned char gfInitialiseGame; // offset 0xA05CB
extern long nframes; // offset 0xA05CC
extern unsigned char gfNumPickups; // offset 0xA05D1
extern unsigned char gfNumTakeaways; // offset 0xA05D2
extern char CanLoad; // offset 0xA05DF
extern struct GAMEFLOW *Gameflow;
extern unsigned short *gfStringOffset; // offset 0xA202C
extern char *gfStringWad; // offset 0xA203C
extern unsigned short *gfFilenameOffset; // offset 0xA2000
extern char *gfFilenameWad; // offset 0xA1FFC
extern unsigned char gfCurrentLevel; // offset 0xA1FA8
extern unsigned char gfLevelComplete; // offset 0xA2034
extern unsigned char gfRequiredStartPos; // offset 0xA2014
extern unsigned short gfLevelFlags; // offset 0xA1FE4
extern unsigned char gfLevelNames[40];
extern unsigned char gfResidentCut[4];
extern unsigned char gfResetHubDest; // offset 0xA1FA4
extern char gfUVRotate; // offset 0xA1F8C
extern char gfLayer1Vel; // offset 0xA1FEC
extern char gfLayer2Vel; // offset 0xA1FE8
extern struct CVECTOR gfLayer1Col;
extern struct CVECTOR gfLayer2Col;
extern unsigned long GameTimer; // offset 0xA1FF8
extern struct PHD_VECTOR gfLensFlare;
extern struct CVECTOR gfLensFlareColour;
extern unsigned char gfMirrorRoom; // offset 0xA2018
extern unsigned char gfMips[8];
extern char title_controls_locked_out; // offset 0xA2024
extern long gfScriptLen; // offset 0xA1FAC
extern unsigned char gfLegend; // offset 0xA2038
extern unsigned char gfWadNames[40];
static unsigned short *gfScriptOffset; // offset 0xA1F50
static unsigned char *gfScriptWad; // offset 0xA1F54
static char *gfExtensions; // offset 0xA1F58
static int gfStatus; // offset 0xA1F5C
static unsigned long OldSP; // offset 0xA1F60
extern unsigned char gfPickups[16];
extern unsigned char gfTakeaways[16];
/*
 * Offset 0x1D420
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 324)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ KillMoveItems()
{ // line 2, offset 0x1d420
    short nex; // register $2
} // line 12, offset 0x1d4ac
/*
 * Offset 0x1D4AC
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 338)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ KillMoveEffects()
{ // line 2, offset 0x1d4ac
    short nex; // register $2
} // line 12, offset 0x1d538
/*
 * Offset 0x1D538
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 388)
 * Stack frame base $29, size 56
 */
long /*reg $31*/ ControlPhase(long nframes /*reg $16*/, int demo_mode /*reg $22*/)
{ // line 1, offset 0x1d538
    short item_num; // register $5
    { // line 413, offset 0x1db7c
        short nex; // register $16
    } // line 420, offset 0x1dbdc
    { // line 434, offset 0x1dc0c
        short nex; // register $16
    } // line 439, offset 0x1dc54
    { // line 636, offset 0x1e0c0
        struct FLOOR_INFO *floor; // register $16
    } // line 637, offset 0x1e0c0
    { // line 704, offset 0x1e320
        int val; // register $16
    } // line 709, offset 0x1e384
} // line 727, offset 0x1e3e4
/*
 * Offset 0x1E3E4
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 1377)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ AlterFloorHeight(struct ITEM_INFO *item /*reg $17*/, int height /*reg $16*/)
{ // line 1, offset 0x1e3e4
    struct FLOOR_INFO *floor; // register $17
    struct FLOOR_INFO *ceiling; // register $4
    short room_num; // stack offset -24
    short joby; // register $18
} // line 37, offset 0x1e534
/*
 * Offset 0x1E534
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 1546)
 * Stack frame base $29, size 40
 */
long /*reg $31*/ GetWaterHeight(long x /*reg $19*/, long y /*reg $5*/, long z /*reg $18*/, short room_number /*reg $7*/)
{ // line 1, offset 0x1e534
    long x_floor; // register $5
    long y_floor; // register $4
    struct room_info *r; // register $16
    struct FLOOR_INFO *floor; // register $17
    short data; // register $3
} // line 108, offset 0x1e7fc
/*
 * Offset 0x1E7FC
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 1913)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ RefreshCamera(short type /*reg $4*/, short *data /*reg $5*/)
{ // line 1, offset 0x1e7fc
    short trigger; // register $6
    short value; // register $4
    short target_ok; // register $7
} // line 66, offset 0x1e9b4
/*
 * Offset 0x1E9B4
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 1996)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TestTriggers(short *data /*reg $4*/, int heavy /*reg $5*/, int HeavyFlags /*reg $6*/)
/*
 * Offset 0x1E9FC
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 2011)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ _TestTriggers(short *data /*reg $19*/, int heavy /*reg $30*/, int HeavyFlags /*sp 8*/)
{ // line 1, offset 0x1e9fc
    int key; // stack offset -64
    struct ITEM_INFO *item; // register $16
    struct ITEM_INFO *camera_item; // stack offset -60
    short camera_timer; // register $6
    short type; // register $18
    short trigger; // register $21
    short value; // register $17
    short flags; // register $20
    char timer; // register $22
    char SwitchOnOnly; // stack offset -56
    int switch_off; // stack offset -52
    int flip; // register $23
    int flip_available; // stack offset -48
    int neweffect; // stack offset -44
    { // line 41, offset 0x1eaf8
        int quad; // register $3
    } // line 46, offset 0x1eb38
    { // line 404, offset 0x1f430
        short CamSeq; // register $5
        short lp; // register $8
    } // line 439, offset 0x1f548
} // line 551, offset 0x1f7a4
/*
 * Offset 0x1F7D4
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 3364)
 * Stack frame base $29, size 120
 */
void /*reg $31*/ FlipMap(int FlipNumber /*reg $19*/)
{ // line 1, offset 0x1f7d4
    int i; // register $18
    struct room_info *r; // register $17
    struct room_info *flipped; // register $16
    struct room_info temp; // stack offset -104
    { // line 35, offset 0x1f8cc
        struct creature_info *cinfo; // register $4
        short slot; // register $2
    } // line 46, offset 0x1f938
} // line 48, offset 0x1f938
/*
 * Offset 0x1F938
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 3417)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ RemoveRoomFlipItems(struct room_info *r /*reg $4*/)
{ // line 2, offset 0x1f938
    struct ITEM_INFO *item; // register $4
    short item_num; // register $16
} // line 19, offset 0x1fa0c
/*
 * Offset 0x1FA0C
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 3441)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ AddRoomFlipItems(struct room_info *r /*reg $4*/)
{ // line 2, offset 0x1fa0c
    short item_num; // register $17
    { // line 6, offset 0x1fa34
        struct ITEM_INFO *item; // register $16
    } // line 15, offset 0x1fa98
} // line 16, offset 0x1fad4
/*
 * Offset 0x1FAD4
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 3464)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TriggerCDTrack(short value /*reg $4*/, short flags /*reg $5*/, short type /*reg $6*/)
/*
 * Offset 0x1FB14
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 3473)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TriggerNormalCDTrack(short value /*reg $4*/, short flags /*reg $5*/, short type /*reg $6*/)
{ // line 1, offset 0x1fb14
    int code; // register $2
} // line 35, offset 0x1fbb0
/*
 * Offset 0x1FBC0
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4399)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ FireCrossBowFromLaserSight(struct GAME_VECTOR *src /*reg $16*/, struct GAME_VECTOR *target /*reg $5*/)
{ // line 1, offset 0x1fbc0
    short angles[2]; // stack offset -40
    struct PHD_3DPOS pos; // stack offset -32
} // line 18, offset 0x1fc5c
/*
 * Offset 0x1FC5C
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4419)
 * Stack frame base $29, size 136
 */
int /*reg $31*/ GetTargetOnLOS(struct GAME_VECTOR *src /*reg $17*/, struct GAME_VECTOR *dest /*reg $18*/, int DrawTarget /*reg $30*/, int firing /*reg $20*/)
{ // line 1, offset 0x1fc5c
    struct GAME_VECTOR target; // stack offset -104
    struct PHD_VECTOR v; // stack offset -88
    struct MESH_INFO *StaticMesh; // stack offset -48
    struct MESH_INFO *Mesh; // register $4
    short item_no; // register $19
    short hit; // register $21
    short ricochet; // register $23
    { // line 51, offset 0x1fe28
        int i; // register $16
        { // line 71, offset 0x1ff1c
            struct ITEM_INFO *shotitem; // register $18
            { // line 88, offset 0x1fffc
                short room_number; // stack offset -72
            } // line 91, offset 0x1fffc
            { // line 98, offset 0x2004c
                short TriggerItems[8]; // stack offset -64
                short NumTrigs; // register $17
            } // line 107, offset 0x200e0
            { // line 140, offset 0x20240
            } // line 147, offset 0x20298
        } // line 172, offset 0x204b8
    } // line 196, offset 0x205ec
    { // line 202, offset 0x20610
        struct ITEM_INFO *shotitem; // register $5
    } // line 205, offset 0x2066c
} // line 236, offset 0x207dc
/*
 * Offset 0x207DC
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4657)
 * Stack frame base $29, size 48
 */
int /*reg $31*/ ExplodeItemNode(struct ITEM_INFO *item /*reg $17*/, int Node /*reg $19*/, int NoXZVel /*reg $20*/, long bits /*reg $18*/)
{ // line 1, offset 0x207dc
    struct object_info *object; // register $4
    short **meshpp; // register $5
} // line 40, offset 0x209ac
/*
 * Offset 0x209AC
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4811)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ CheckGuardOnTrigger()
{ // line 2, offset 0x209ac
    int slot; // register $6
    short room_number; // stack offset -16
    struct creature_info *cinfo; // register $16
    struct ITEM_INFO *item; // register $4
} // line 24, offset 0x20af0
/*
 * Offset 0x20AF0
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4838)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InterpolateAngle(short dest /*reg $4*/, short *src /*reg $5*/, short *diff /*reg $6*/, short speed /*reg $4*/)
{ // line 1, offset 0x20af0
    long adiff; // register $3
} // line 15, offset 0x20b48
/*
 * Offset 0x20B48
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4855)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ ResetGuards()
{ // line 2, offset 0x20b48
    short item_num; // register $17
    short room_num; // register $9
    struct ITEM_INFO *target_item; // register $16
} // line 41, offset 0x20d90
/*
 * Offset 0x20D90
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4912)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitCutPlayed()
/*
 * Offset 0x20DA0
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4919)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SetCutPlayed(int num /*reg $4*/)
/*
 * Offset 0x20DEC
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4934)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SetCutNotPlayed(int num /*reg $4*/)
/*
 * Offset 0x20E34
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4947)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ CheckCutPlayed(int num /*reg $4*/)
{ // line 1, offset 0x20e34
    int ret; // register $2
} // line 13, offset 0x20e6c
/*
 * Offset 0x20E6C
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 4974)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ NeatAndTidyTriggerCutscene(int value /*reg $16*/, int timer /*reg $17*/)
{ // line 1, offset 0x20e6c
    int inv_item_stealth_frigggggs; // register $17
    { // line 151, offset 0x21210
        short item_num; // register $4
        short nex; // register $5
        struct ITEM_INFO *item; // register $4
    } // line 177, offset 0x212d8
} // line 296, offset 0x215b8
/*
 * Offset 0x215D0
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 5274)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ is_object_in_room(int roomnumber /*reg $4*/, int objnumber /*reg $5*/)
{ // line 1, offset 0x215d0
    short item_num; // register $3
    short nex; // register $2
    struct ITEM_INFO *item; // register $2
} // line 15, offset 0x21634
/*
 * Offset 0x21634
 * C:\Projects2\Tomb5\GAME\CONTROL.C (line 5294)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ check_xray_machine_trigger()
{ // line 2, offset 0x21634
    int i; // register $4
} // line 12, offset 0x216ac
extern int flipeffect; // offset 0xA0724
extern int fliptimer; // offset 0xA0728
extern unsigned char ShatterSounds[18][10];
extern unsigned char WeaponDelay; // offset 0xA0658
extern unsigned char KeyTriggerActive; // offset 0xA065C
extern unsigned short GlobalCounter; // offset 0xA065E
extern char TriggerTimer; // offset 0xA0660
extern int reset_flag; // offset 0xA0730
extern short SlowMotion; // offset 0xA0654
extern short SlowMoFrameCount; // offset 0xA0656
extern unsigned char InItemControlLoop; // offset 0xA0659
extern short ItemNewRoomNo; // offset 0xA065A
extern short SmashedMeshCount; // offset 0xA0662
extern char richcutfrigflag; // offset 0xA0664
extern int nRope; // offset 0xA0668
extern char GetLaraOnLOS; // offset 0xA066C
extern int NoInput; // offset 0xA072C
extern int number_los_rooms; // offset 0xA0734
extern long rand_1; // offset 0xA073C
extern int framecount; // offset 0xA0738
extern long rand_2; // offset 0xA0740
extern struct ITEM_INFO *items;
extern int flip_status; // offset 0xA20BC
extern int flipmap[10];
extern int flip_stats[10];
extern int height_type; // offset 0xA2220
extern int tiltxoff; // offset 0xA2080
extern int tiltyoff; // offset 0xA2084
extern unsigned long _CutSceneTriggered1; // offset 0xA2218
extern unsigned long _CutSceneTriggered2; // offset 0xA221C
extern unsigned long FmvSceneTriggered; // offset 0xA22F0
extern unsigned char CurrentAtmosphere; // offset 0xA2054
extern unsigned char IsAtmospherePlaying; // offset 0xA2180
extern char *OutsideRoomTable; // offset 0xA2214
extern short *OutsideRoomOffsets; // offset 0xA2090
extern short IsRoomOutsideNo; // offset 0xA2208
extern short FXType; // offset 0xA2060
extern int OnObject; // offset 0xA20E8
extern short *trigger_index; // offset 0xA20F0
extern char cd_flags[136];
extern unsigned char InGameCnt; // offset 0xA204C
extern struct RAT_STRUCT *Rats;
extern struct BAT_STRUCT *Bats;
extern struct SPIDER_STRUCT *Spiders;
extern struct TWOGUN_INFO twogun[4];
extern int SetDebounce; // offset 0xA2204
extern short WB_room; // offset 0xA22F8
extern struct ITEM_INFO *WB_item;
extern unsigned char HeavyTriggered; // offset 0xA22EC
extern struct MESH_INFO *SmashedMesh[16];
extern short SmashedMeshRoom[16];
extern struct PENDULUM CurrentPendulum;
extern char LaraDrawType; // offset 0xA220C
extern char WeatherType; // offset 0xA20F4
extern char RoomDrawType; // offset 0xA2210
extern struct PHD_VECTOR ClosestCoord;
extern int ClosestItem; // offset 0xA2064
extern int ClosestDist; // offset 0xA2068
extern short XSoff1; // offset 0xA2088
extern short YSoff1; // offset 0xA2078
extern short ZSoff1; // offset 0xA206C
extern short XSoff2; // offset 0xA208C
extern short YSoff2; // offset 0xA207C
extern short ZSoff2; // offset 0xA2070
extern short los_rooms[20];
extern char globoncuttrig; // offset 0xA2050
extern short ItemNewRooms[256][2];
extern struct CHARDEF CharDef[106];
/*
 * Offset 0x115EC
 * C:\Projects2\Tomb5\GAME\TEXT.C (line 1022)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ InitFont()
{ // line 2, offset 0x115ec
    int i; // register $4
    int j; // register $14
    { // line 48, offset 0x11630
        unsigned char nr; // register $5
        unsigned char ng; // register $3
        unsigned char nb; // register $6
        unsigned char fr; // register $18
        unsigned char fg; // register $17
        unsigned char fb; // register $16
        { // line 61, offset 0x116a0
            unsigned short r; // register $9
            unsigned short g; // register $8
            unsigned short b; // register $7
        } // line 74, offset 0x116f8
    } // line 121, offset 0x11728
} // line 166, offset 0x11764
extern char AccentTable[46][2];
static struct CVECTOR ShadeFromTo[10][2]; // offset 0xA05E0
extern unsigned char PulseCnt; // offset 0xA0630
extern unsigned char ScaleFlag; // offset 0xA2040
extern struct CVECTOR FontShades[10][16];
/*
 * Offset 0x11764
 * C:\Projects2\Tomb5\GAME\LARA.C (line 312)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ GetLaraCollisionInfo(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $8*/)
/*
 * Offset 0x117B0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 335)
 * Stack frame base $29, size 48
 */
short /*reg $31*/ LaraFloorFront(struct ITEM_INFO *item /*reg $19*/, short ang /*reg $5*/, long dist /*reg $6*/)
{ // line 1, offset 0x117b0
    short room; // stack offset -32
    long x; // register $17
    long y; // register $18
    long z; // register $16
    long height; // register $3
} // line 18, offset 0x1189c
/*
 * Offset 0x1189C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 373)
 * Stack frame base $29, size 48
 */
short /*reg $31*/ LaraCeilingFront(struct ITEM_INFO *item /*reg $19*/, short ang /*reg $5*/, long dist /*reg $6*/, long h /*reg $20*/)
{ // line 1, offset 0x1189c
    short room; // stack offset -32
    long x; // register $17
    long y; // register $18
    long z; // register $16
    long height; // register $3
} // line 18, offset 0x11998
/*
 * Offset 0x11998
 * C:\Projects2\Tomb5\GAME\LARA.C (line 411)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ TestLaraSlide(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x11998
    short ang; // register $18
    static short old_ang; // offset 0x0
} // line 65, offset 0x11b6c
/*
 * Offset 0x11B6C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 478)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ LaraFallen(struct ITEM_INFO *item /*reg $7*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x11BD8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 497)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ LaraLandedBad(struct ITEM_INFO *l /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x11bd8
    int landspeed; // register $3
} // line 23, offset 0x11c94
/*
 * Offset 0x11C94
 * C:\Projects2\Tomb5\GAME\LARA.C (line 526)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ LaraHitCeiling(struct ITEM_INFO *item /*reg $7*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x11D18
 * C:\Projects2\Tomb5\GAME\LARA.C (line 563)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ LaraDeflectEdge(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x11DC0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 610)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ LaraDeflectEdgeDuck(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x11E60
 * C:\Projects2\Tomb5\GAME\LARA.C (line 636)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ LaraTestEdgeCatch(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/, long *edge /*reg $18*/)
{ // line 1, offset 0x11e60
    int hdif; // register $3
    short *bounds; // register $4
} // line 31, offset 0x11f78
/*
 * Offset 0x11F78
 * C:\Projects2\Tomb5\GAME\LARA.C (line 671)
 * Stack frame base $29, size 56
 */
int /*reg $31*/ LaraTestClimbStance(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x11f78
    int result_r; // register $16
    int shift_r; // stack offset -32
    int shift_l; // stack offset -28
} // line 33, offset 0x120c0
/*
 * Offset 0x120C0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 711)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ TestLaraVault(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x120c0
    { // line 8, offset 0x12118
        int hdif; // register $6
        int slope; // register $3
        short angle; // register $17
    } // line 140, offset 0x12530
} // line 157, offset 0x12550
/*
 * Offset 0x12550
 * C:\Projects2\Tomb5\GAME\LARA.C (line 874)
 * Stack frame base $29, size 48
 */
int /*reg $31*/ TestWall(struct ITEM_INFO *item /*reg $4*/, long front /*reg $20*/, long right /*reg $6*/, long down /*reg $7*/)
{ // line 1, offset 0x12550
    int x; // register $17
    int y; // register $19
    int z; // register $18
    int h; // register $16
    int c; // register $3
    struct FLOOR_INFO *floor; // register $16
    short room_num; // stack offset -32
    short angle; // register $16
} // line 67, offset 0x126f0
/*
 * Offset 0x126F0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 949)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ LaraCollideStop(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x127BC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 979)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_slide_slope(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x12904
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1026)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ LaraDeflectEdgeJump(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x12B18
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1087)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ LaraSlideEdgeJump(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x12C54
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1123)
 * Stack frame base $29, size 56
 */
int /*reg $31*/ LaraTestHangOnClimbWall(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $19*/)
{ // line 1, offset 0x12c54
    short l; // register $16
    short r; // register $3
    short *bounds; // register $18
    int shift; // stack offset -32
    int result; // register $3
} // line 50, offset 0x12e54
/*
 * Offset 0x12E54
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1176)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SnapLaraToEdgeOfBlock(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/, short angle /*reg $6*/)
/*
 * Offset 0x12F34
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1214)
 * Stack frame base $29, size 64
 */
int /*reg $31*/ LaraHangTest(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x12f34
    int hdif; // register $19
    int flag; // stack offset -48
    long x; // register $4
    long z; // register $6
    short angle; // register $17
    short move; // register $21
    short wall; // register $20
    short ceiling; // stack offset -44
    short dir; // register $22
} // line 224, offset 0x135bc
/*
 * Offset 0x135BC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1440)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ IsValidHangPos(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x135bc
    short angle; // register $4
} // line 43, offset 0x13738
/*
 * Offset 0x13738
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1489)
 * Stack frame base $29, size 72
 */
int /*reg $31*/ LaraHangRightCornerTest(struct ITEM_INFO *item /*reg $18*/, struct COLL_INFO *coll /*sp 4*/)
{ // line 1, offset 0x13738
    int x; // register $19
    int z; // register $17
    int flag; // register $20
    long front; // register $30
    int oldx; // register $23
    int oldz; // stack offset -56
    short oldy; // stack offset -52
    short angle; // register $22
} // line 159, offset 0x13c24
/*
 * Offset 0x13C24
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1665)
 * Stack frame base $29, size 72
 */
int /*reg $31*/ LaraHangLeftCornerTest(struct ITEM_INFO *item /*reg $18*/, struct COLL_INFO *coll /*sp 4*/)
{ // line 1, offset 0x13c24
    int x; // register $19
    int z; // register $17
    int flag; // register $20
    long front; // register $30
    int oldx; // register $23
    int oldz; // stack offset -56
    short oldy; // stack offset -52
    short angle; // register $22
} // line 159, offset 0x14104
/*
 * Offset 0x14104
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1832)
 * Stack frame base $29, size 48
 */
int /*reg $31*/ TestHangSwingIn(struct ITEM_INFO *item /*reg $4*/, short angle /*reg $5*/)
{ // line 1, offset 0x14104
    int x; // register $17
    int y; // register $19
    int z; // register $18
    int h; // register $16
    int c; // register $3
    struct FLOOR_INFO *floor; // register $16
    short room_num; // stack offset -32
} // line 41, offset 0x14228
/*
 * Offset 0x14228
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1896)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ LaraAboveWater(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
/*
 * Offset 0x1448C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1972)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_duckl(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x144E0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1982)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_duckr(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x14534
 * C:\Projects2\Tomb5\GAME\LARA.C (line 1992)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_ducklr(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x14688
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2033)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_duck(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x147C4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2066)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ lara_col_duck(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
/*
 * Offset 0x14970
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2121)
 * Stack frame base $29, size 88
 */
void /*reg $31*/ lara_as_all4s(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x14970
    { // line 10, offset 0x149bc
        struct GAME_VECTOR s; // stack offset -72
        struct GAME_VECTOR d; // stack offset -56
        struct MESH_INFO *StaticMesh; // stack offset -24
        struct PHD_VECTOR v; // stack offset -40
    } // line 41, offset 0x14ac0
} // line 56, offset 0x14b28
/*
 * Offset 0x14B40
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2179)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ lara_col_all4s(struct ITEM_INFO *item /*reg $19*/, struct COLL_INFO *coll /*reg $20*/)
{ // line 1, offset 0x14b40
    int slope; // register $21
    { // line 52, offset 0x14d38
    } // line 59, offset 0x14d6c
    { // line 64, offset 0x14d80
        short height; // register $4
        short heightl; // register $22
        short heightr; // register $16
        { // line 84, offset 0x14dc8
            long x; // register $18
            long z; // register $17
        } // line 97, offset 0x14e94
        { // line 114, offset 0x14f10
            struct ITEM_INFO **itemlist; // register $3
            struct MESH_INFO **meshlist; // register $3
            long x; // register $16
            long z; // register $17
            { // line 124, offset 0x14fb0
                short angle; // register $4
            } // line 152, offset 0x15054
        } // line 156, offset 0x15060
    } // line 156, offset 0x15060
} // line 178, offset 0x150cc
/*
 * Offset 0x150F4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2359)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_crawl(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1523C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2396)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_crawl(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x15390
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2444)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_all4turnl(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x153FC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2463)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_all4turnlr(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x15484
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2480)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_all4turnr(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x154F0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2499)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_crawlb(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
/*
 * Offset 0x15614
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2535)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_crawlb(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x15770
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2587)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ lara_col_crawl2hang(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x15770
    { // line 10, offset 0x157d0
        int edge_catch; // register $19
        short angle; // register $16
        short *bounds; // register $2
        long edge; // stack offset -32
    } // line 94, offset 0x15a08
} // line 95, offset 0x15a08
/*
 * Offset 0x15A28
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2690)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_dash(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x15C50
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2767)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_dash(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x15E1C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2847)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_dashdive(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x15E5C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2858)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_dashdive(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x16004
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2920)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ MonkeySwingFall(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x1605C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2933)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ MonkeySwingSnap(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1605c
    short room_num; // stack offset -16
} // line 8, offset 0x160b4
/*
 * Offset 0x160B4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2943)
 * Stack frame base $29, size 0
 */
short /*reg $31*/ GetDirOctant(long rot /*reg $4*/)
/*
 * Offset 0x160CC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2951)
 * Stack frame base $29, size 40
 */
short /*reg $31*/ TestMonkeyLeft(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
{ // line 1, offset 0x160cc
    { // line 15, offset 0x16180
        short oct; // register $3
    } // line 24, offset 0x161d8
} // line 26, offset 0x161ec
/*
 * Offset 0x161EC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 2979)
 * Stack frame base $29, size 40
 */
short /*reg $31*/ TestMonkeyRight(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
{ // line 1, offset 0x161ec
    { // line 15, offset 0x162a0
        short oct; // register $4
    } // line 24, offset 0x162f8
} // line 26, offset 0x1630c
/*
 * Offset 0x1630C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3007)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_hang2(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x163DC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3034)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_hang2(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x1670C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3151)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_monkeyswing(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x16828
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3188)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_monkeyswing(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x16A0C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3231)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_monkeyl(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x16A80
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3252)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_monkeyl(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x16B24
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3271)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_monkeyr(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x16B9C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3291)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_monkeyr(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x16C40
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3309)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_hangturnl(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x16C94
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3326)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_hangturnlr(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x16D64
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3343)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_hangturnr(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x16DB8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3360)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_monkey180(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x16DDC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3368)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_monkey180(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x16DFC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3384)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_polestat(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x16dfc
    { // line 47, offset 0x16f80
        short room_num; // stack offset -24
    } // line 56, offset 0x16fc4
} // line 72, offset 0x1700c
/*
 * Offset 0x17020
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3458)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_poleleft(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1707C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3471)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_poleright(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x170D8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3484)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_poleup(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x170d8
    short room_num; // stack offset -16
} // line 22, offset 0x171a0
/*
 * Offset 0x171A0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3508)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_poledown(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x171a0
    { // line 22, offset 0x17274
        short room_number; // stack offset -24
    } // line 32, offset 0x172b8
} // line 57, offset 0x17394
/*
 * Offset 0x17394
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3578)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ FallFromRope(struct ITEM_INFO *item /*reg $4*/)
{ // line 1, offset 0x17394
    long l; // register $3
} // line 16, offset 0x17424
/*
 * Offset 0x17424
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3596)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ JumpOffRope(struct ITEM_INFO *item /*reg $6*/)
/*
 * Offset 0x17508
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3629)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ UpdateRopeSwing(struct ITEM_INFO *item /*reg $17*/)
{ // line 1, offset 0x17508
    long temp; // register $4
    static unsigned char LegsSwinging; // offset 0x14
} // line 98, offset 0x178e4
/*
 * Offset 0x178E4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3729)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ApplyVelocityToRope(int node /*reg $4*/, unsigned short angle /*reg $5*/, unsigned short n /*reg $6*/)
{ // line 1, offset 0x178e4
} // line 13, offset 0x17958
/*
 * Offset 0x17958
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3746)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_rope(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x179A8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3755)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_rope(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x17AB4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3790)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_ropel(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x17B14
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3803)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_roper(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x17B74
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3818)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_ropefwd(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x17b74
    long Vel; // register $6
} // line 56, offset 0x17d9c
/*
 * Offset 0x17D9C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3878)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_climbrope(struct ITEM_INFO *item /*reg $5*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x17E64
 * C:\Projects2\Tomb5\GAME\LARA.C (line 3906)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_climbroped(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x17E94
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4023)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ lara_as_stop(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x17e94
    static char wait; // offset 0x15
    short fheight; // register $21
    short rheight; // register $20
    { // line 86, offset 0x1809c
    } // line 95, offset 0x18108
    { // line 99, offset 0x1811c
    } // line 108, offset 0x18188
    { // line 126, offset 0x181f8
        int wade; // register $3
    } // line 148, offset 0x18274
    { // line 168, offset 0x182c4
        long height; // register $2
        long ceiling; // register $16
    } // line 208, offset 0x183b8
} // line 227, offset 0x18420
/*
 * Offset 0x18444
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4252)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_stop(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x1851C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4386)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_upjump(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1853C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4392)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ lara_col_upjump(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x1853c
    { // line 12, offset 0x185b8
        struct ITEM_INFO *item; // register $16
        struct COLL_INFO *coll; // register $18
        { // line 12, offset 0x185b8
            short angle; // register $17
            short *bounds; // register $2
            int edge_catch; // register $19
            long edge; // stack offset -32
        } // line 15, offset 0x188cc
    } // line 15, offset 0x188cc
} // line 62, offset 0x18a14
/*
 * Offset 0x18A34
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4462)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_forwardjump(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x18B88
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4504)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_forwardjump(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x18CE0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4690)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_reach(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x18D0C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4698)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ lara_col_reach(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x18d0c
    { // line 5, offset 0x18d5c
        struct ITEM_INFO *item; // register $16
        struct COLL_INFO *coll; // register $18
        { // line 5, offset 0x18d5c
            short angle; // register $17
            int edge_catch; // register $19
            short *bounds; // register $2
            long edge; // stack offset -32
        } // line 10, offset 0x190fc
    } // line 10, offset 0x190fc
} // line 35, offset 0x19198
/*
 * Offset 0x191B8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4744)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_walk(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x192EC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4800)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_run(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x192ec
    static int jump_ok; // offset 0x18
} // line 112, offset 0x1958c
/*
 * Offset 0x1959C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4916)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_fastback(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x19628
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4935)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_turn_r(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1972C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 4980)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_turn_l(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x19830
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5025)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_death(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x198BC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5046)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_fastfall(struct ITEM_INFO *item /*reg $5*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x19928
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5053)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_void_func(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x19930
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5063)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ CanLaraHangSideways(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/, short angle /*reg $17*/)
{ // line 1, offset 0x19930
    long x; // register $7
    long z; // register $8
    long oldx; // register $19
    long oldz; // register $18
} // line 39, offset 0x19a28
/*
 * Offset 0x19A28
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5104)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_hang(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x19AC8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5123)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_hang(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x19ac8
    int flag; // register $2
} // line 151, offset 0x19f30
/*
 * Offset 0x19F48
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5276)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_hangleft(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x19F94
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5287)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_hangleft(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x19FEC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5295)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_hangright(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A038
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5306)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_hangright(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A090
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5319)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SetCornerAnim(struct ITEM_INFO *item /*reg $5*/, struct COLL_INFO *coll /*reg $10*/, short rot /*reg $11*/, short flip /*reg $7*/)
/*
 * Offset 0x1A1F0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5368)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_extcornerl(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1a1f0
    short flip; // register $7
} // line 14, offset 0x1a244
/*
 * Offset 0x1A244
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5384)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_extcornerr(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1a244
    short flip; // register $7
} // line 14, offset 0x1a298
/*
 * Offset 0x1A298
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5400)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_intcornerl(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1a298
    short flip; // register $7
} // line 14, offset 0x1a2ec
/*
 * Offset 0x1A2EC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5416)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_intcornerr(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1a2ec
    short flip; // register $7
} // line 14, offset 0x1a340
/*
 * Offset 0x1A340
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5434)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_splat(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A35C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5442)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_compress(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A4F0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5481)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_back(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A5DC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5512)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_null(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A5F8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5520)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_fastturn(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A65C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5550)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_fastturn(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A67C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5557)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_stepright(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A750
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5590)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_stepleft(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A824
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5620)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_slide(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A854
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5630)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_backjump(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A8C4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5643)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_rightjump(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A92C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5654)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_leftjump(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A994
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5665)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_fallback(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1A9E0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5677)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_slideback(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AA04
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5684)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_pushblock(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AA60
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5696)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_pullblock(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AABC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5707)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_ppready(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AB00
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5717)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_pickup(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AB5C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5728)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_pickupflare(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1ABEC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5743)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_switchon(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AC54
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5755)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_switchoff(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1ACBC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5767)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_usekey(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AD18
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5778)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_usepuzzle(struct ITEM_INFO *item /*reg $5*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1ADDC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5799)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_special(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AE08
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5807)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_swandive(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AE4C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5816)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_fastdive(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AEC8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5826)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_gymnast(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AEE4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5837)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_waterout(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1AF10
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5844)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_wade(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1B038
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5884)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_as_deathslide(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
{ // line 1, offset 0x1b038
    short room_number; // stack offset -24
} // line 22, offset 0x1b0fc
/*
 * Offset 0x1B0FC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5910)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_controlled(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1B180
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5925)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_controlledl(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1B1B4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5932)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_col_turnswitch(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1B288
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5953)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_pulley(struct ITEM_INFO *item /*reg $5*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1b288
    struct ITEM_INFO *p; // register $7
} // line 40, offset 0x1b3e8
/*
 * Offset 0x1B3E8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 5996)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_walk(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1B64C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6084)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_run(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1B87C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6166)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_pose(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1B89C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6172)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_fastback(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1B9C4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6209)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_turn_r(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1BABC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6237)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_turn_l(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1BADC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6243)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_death(struct ITEM_INFO *item /*reg $18*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x1BB88
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6261)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_fastfall(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1BC74
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6292)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_splat(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x1BD10
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6308)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_land(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1BD30
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6314)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_compress(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1BE38
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6344)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_back(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1BFB0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6401)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_stepright(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x1C0E8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6432)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_stepleft(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1C108
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6438)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_slide(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1C130
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6445)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_backjump(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1C15C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6452)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_rightjump(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1C188
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6459)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_leftjump(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1C1B4
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6466)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_fallback(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1C284
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6492)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_slideback(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1C2B0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6548)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_roll(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x1C384
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6570)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_roll2(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1C4A0
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6601)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_swandive(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1C558
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6621)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_fastdive(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1C61C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6657)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_col_wade(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1C80C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6729)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_default_col(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1C860
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6744)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_jumper(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x1C920
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6849)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ ResetLook()
/*
 * Offset 0x1C9D8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6871)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ LookUpDown()
/*
 * Offset 0x1CB80
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6914)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ LookLeftRight()
/*
 * Offset 0x1CD28
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6964)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ GetTighRopeFallOff(long Regularity /*reg $17*/)
/*
 * Offset 0x1CDE8
 * C:\Projects2\Tomb5\GAME\LARA.C (line 6982)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_trpose(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1CEDC
 * C:\Projects2\Tomb5\GAME\LARA.C (line 7011)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_as_trwalk(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1cedc
    short room_number; // stack offset -24
} // line 39, offset 0x1d024
/*
 * Offset 0x1D03C
 * C:\Projects2\Tomb5\GAME\LARA.C (line 7054)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_as_trfall(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1d03c
    struct PHD_VECTOR pos; // stack offset -24
    int UndoInput; // register $6
    int WrongInput; // register $7
    int UndoAnim; // register $8
    int UndoFrame; // register $4
} // line 73, offset 0x1d210
/*
 * Offset 0x1D220
 * C:\Projects2\Tomb5\GAME\LARA.C (line 7129)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_parallelbars(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x1D244
 * C:\Projects2\Tomb5\GAME\LARA.C (line 7143)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_pbleapoff(struct ITEM_INFO *item /*reg $7*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x1d244
    struct ITEM_INFO *pitem; // register $5
    long Dist; // register $2
} // line 29, offset 0x1d420
static short LeftClimbTab[4]; // offset 0xA0638
static short RightClimbTab[4]; // offset 0xA0640
extern short angle; // offset 0xA0650
extern short elevation; // offset 0xA0652
extern struct ITEM_INFO *lara_item;
extern unsigned short DashTimer; // offset 0xA2044
extern struct lara_info lara;
/*
 * Offset 0x2C1DC
 * C:\Projects2\Tomb5\GAME\DELSTUFF.C (line 319)
 * Stack frame base $29, size 72
 */
void /*reg $31*/ CalcLaraMatrices(int flag /*reg $21*/)
{ // line 1, offset 0x2c1dc
    struct object_info *object; // register $5
    short *frame; // register $4
    short *frmptr[2]; // stack offset -48
    int frac; // register $16
    int rate; // stack offset -40
    struct ITEM_INFO *item; // register $17
    long *bone; // register $20
    { // line 33, offset 0x2c2a4
        short spaz; // register $3
        struct ANIM_STRUCT *anim; // register $5
        int size; // register $3
    } // line 68, offset 0x2c34c
} // line 82, offset 0x2c3c4
extern char HairRotScratchVertNums[5][12];
extern char NodesToStashFromScratch[15][4];
extern char NodesToStashToScratch[14][2];
extern unsigned char SkinUseMatrix[14][2];
extern int lara_mesh_sweetness_table[15];
extern char lara_underwater_skin_sweetness_table[15];
extern long LaraGlobalClipFlag; // offset 0xA0994
extern unsigned char LaraNodeUnderwater[15];
extern short *GLaraShadowframe; // offset 0xA2634
extern struct CVECTOR LaraNodeAmbient[2];
extern struct MATRIX3D lara_matrices[15];
extern struct MATRIX3D lara_joint_matrices[15];
/*
 * Offset 0x2C3C4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 504)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ handle_cutseq_triggering(int name /*reg $17*/)
{ // line 1, offset 0x2c3c4
    int n; // register $2
    { // line 92, offset 0x2c4e8
        int goin; // register $5
        int fuck; // register $4
    } // line 191, offset 0x2c78c
} // line 326, offset 0x2ca50
/*
 * Offset 0x2CA68
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 839)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ do_new_cutscene_camera()
{ // line 6, offset 0x2ca68
    { // line 39, offset 0x2caac
        struct PACKNODE *nodes; // register $4
    } // line 89, offset 0x2cc60
    { // line 89, offset 0x2cc60
    } // line 131, offset 0x2cd40
    { // line 133, offset 0x2cd40
        int n; // register $16
    } // line 179, offset 0x2ced4
} // line 182, offset 0x2ced4
/*
 * Offset 0x2CED4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1029)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitPackNodes(struct NODELOADHEADER *lnode /*reg $4*/, struct PACKNODE *pnode /*reg $5*/, char *packed /*reg $11*/, int numnodes /*reg $7*/)
{ // line 1, offset 0x2ced4
    int offset; // register $10
    int xoff; // register $4
    int yoffset; // register $3
    int yoff; // register $6
    int zoffset; // register $3
    int zoff; // register $5
    int i; // register $7
} // line 44, offset 0x2d000
/*
 * Offset 0x2D000
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1239)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ frigup_lara()
{ // line 2, offset 0x2d000
    struct object_info *object; // register $7
    long *bone; // register $16
    short *frame; // register $17
} // line 58, offset 0x2d0fc
/*
 * Offset 0x2D110
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1387)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ init_cutseq_malloc()
/*
 * Offset 0x2D134
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1400)
 * Stack frame base $29, size 0
 */
void * /*reg $31*/ cutseq_malloc(int size /*reg $5*/)
{ // line 2, offset 0x2d134
    char *ptr; // register $4
} // line 19, offset 0x2d180
/*
 * Offset 0x2D180
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1421)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ finish_cutseq(int name /*reg $16*/)
/*
 * Offset 0x2D204
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1734)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ CalculateObjectLightingLaraCutSeq()
{ // line 2, offset 0x2d204
    short room_no; // register $16
    struct PHD_VECTOR pos; // stack offset -24
} // line 31, offset 0x2d2a0
/*
 * Offset 0x2D2A0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1855)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ cutseq_givelara_pistols()
/*
 * Offset 0x2D2D8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1863)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ cutseq_removelara_pistols()
/*
 * Offset 0x2D308
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1873)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ cutseq_givelara_hk()
/*
 * Offset 0x2D328
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1879)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ cutseq_removelara_hk()
/*
 * Offset 0x2D360
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1888)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ cutseq_shoot_pistols(int left_or_right /*reg $16*/)
/*
 * Offset 0x2D3E4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1907)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ trigger_weapon_dynamics(int left_or_right /*reg $16*/)
{ // line 1, offset 0x2d3e4
    struct PHD_VECTOR pos; // stack offset -32
} // line 12, offset 0x2d48c
/*
 * Offset 0x2D48C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 1928)
 * Stack frame base $29, size 88
 */
void /*reg $31*/ deal_with_pistols(unsigned short *shootdata /*reg $17*/)
{ // line 1, offset 0x2d48c
    struct PHD_VECTOR pos; // stack offset -48
    int f; // register $18
    { // line 11, offset 0x2d4d0
        unsigned short dat; // register $16
    } // line 20, offset 0x2d500
} // line 57, offset 0x2d678
/*
 * Offset 0x2D69C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2000)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ cutseq_kill_item(int num /*reg $12*/)
{ // line 1, offset 0x2d69c
    int i; // register $8
} // line 19, offset 0x2d730
/*
 * Offset 0x2D738
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2022)
 * Stack frame base $29, size 0
 */
struct ITEM_INFO * /*reg $31*/ cutseq_restore_item(int num /*reg $4*/)
{ // line 1, offset 0x2d738
    int i; // register $3
} // line 19, offset 0x2d7d0
/*
 * Offset 0x2D7D0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2054)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ Load_and_Init_Cutseq(int num /*reg $18*/)
{ // line 1, offset 0x2d7d0
    int file; // register $17
    long *headerbuf; // register $16
    int len; // register $18
    char *packed; // register $16
} // line 99, offset 0x2d944
/*
 * Offset 0x2D944
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2238)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ init_cutseq_actors(char *data /*reg $23*/, int resident /*reg $22*/)
{ // line 1, offset 0x2d944
    int pda_nodes; // register $3
    char *packed; // register $17
    int offset; // register $3
    int n; // register $18
    char *resident_addr; // register $19
} // line 123, offset 0x2db8c
/*
 * Offset 0x2DB8C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2368)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ init_resident_cutseq(int num /*reg $4*/)
{ // line 2, offset 0x2db8c
    char *packed; // register $6
} // line 18, offset 0x2dc14
/*
 * Offset 0x2DC14
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2403)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ DelsHandyTeleportLara(int x /*reg $4*/, int y /*reg $5*/, int z /*reg $6*/, int yrot /*reg $7*/)
{ // line 2, offset 0x2dc14
} // line 34, offset 0x2dd00
/*
 * Offset 0x2DD00
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2493)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ handle_lara_chatting(short *ranges /*reg $4*/)
{ // line 1, offset 0x2dd00
    int r1; // register $5
    int r2; // register $6
    int f; // register $7
    { // line 21, offset 0x2dd68
        short *poo; // register $2
        int rndme; // register $2
    } // line 23, offset 0x2dd68
} // line 35, offset 0x2dddc
/*
 * Offset 0x2DDF0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2546)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ handle_actor_chatting(int speechslot /*reg $19*/, int node /*reg $17*/, int slot /*reg $20*/, int objslot /*reg $18*/, short *ranges /*sp 16*/)
{ // line 1, offset 0x2ddf0
    int r1; // register $5
    int r2; // register $6
    int f; // register $8
    int rnd; // register $4
} // line 34, offset 0x2df30
/*
 * Offset 0x2DF50
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2642)
 * Stack frame base $29, size 0
 */
struct ITEM_INFO * /*reg $31*/ find_a_fucking_item(int object_number /*reg $4*/)
{ // line 1, offset 0x2df50
    int i; // register $5
} // line 17, offset 0x2dfa0
/*
 * Offset 0x2DFA0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2669)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ cranecut_init()
/*
 * Offset 0x2E020
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2688)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ cranecut_end()
{ // line 2, offset 0x2e020
    struct ITEM_INFO *item; // register $16
} // line 17, offset 0x2e0b8
/*
 * Offset 0x2E0B8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2733)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ cranecut_control()
{ // line 2, offset 0x2e0b8
    int f; // register $17
    struct PHD_VECTOR pos; // stack offset -32
    { // line 63, offset 0x2e200
        int n; // register $16
    } // line 75, offset 0x2e254
} // line 84, offset 0x2e26c
/*
 * Offset 0x2E26C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2821)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ richcut1_init()
{ // line 2, offset 0x2e26c
    short item_num; // register $4
    short nex; // register $17
    struct ITEM_INFO *item; // register $16
} // line 29, offset 0x2e3a0
/*
 * Offset 0x2E3A0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2852)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ richcut1_end()
/*
 * Offset 0x2E3D8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2862)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ richcut1_control()
{ // line 2, offset 0x2e3d8
    int f; // register $4
    { // line 17, offset 0x2e44c
        struct ITEM_INFO *item; // register $16
    } // line 24, offset 0x2e4b0
} // line 31, offset 0x2e4c0
/*
 * Offset 0x2E4C0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2905)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ richcut2_init()
/*
 * Offset 0x2E4D8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2911)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ richcut2_end()
/*
 * Offset 0x2E4EC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2916)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ richcut2_control()
{ // line 2, offset 0x2e4ec
    int f; // register $3
} // line 9, offset 0x2e514
/*
 * Offset 0x2E514
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2930)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ richcut3_init()
/*
 * Offset 0x2E54C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2937)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ richcut3_end()
{ // line 2, offset 0x2e54c
    struct ITEM_INFO *item; // register $5
} // line 12, offset 0x2e594
/*
 * Offset 0x2E594
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2951)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ richcut3_control()
{ // line 2, offset 0x2e594
    int f; // register $3
} // line 15, offset 0x2e5e4
/*
 * Offset 0x2E5E4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2994)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special1_init()
/*
 * Offset 0x2E614
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 2999)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special1_control()
/*
 * Offset 0x2E644
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3003)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special1_end()
/*
 * Offset 0x2E674
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3011)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special2_init()
/*
 * Offset 0x2E6A4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3016)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special2_control()
/*
 * Offset 0x2E6D4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3020)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special2_end()
/*
 * Offset 0x2E704
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3028)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special3_init()
/*
 * Offset 0x2E734
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3033)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special3_control()
/*
 * Offset 0x2E764
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3037)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special3_end()
/*
 * Offset 0x2E794
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3046)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special4_init()
/*
 * Offset 0x2E7C4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3051)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special4_control()
/*
 * Offset 0x2E7F4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3055)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ special4_end()
/*
 * Offset 0x2E824
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3071)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ stealth3_start()
{ // line 2, offset 0x2e824
    int i; // register $18
    struct ITEM_INFO *item; // register $17
} // line 24, offset 0x2e980
/*
 * Offset 0x2E99C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3098)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ stealth3_end()
{ // line 2, offset 0x2e99c
    int i; // register $17
    struct ITEM_INFO *item; // register $16
} // line 33, offset 0x2eb78
/*
 * Offset 0x2EB9C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3143)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ deal_with_actor_shooting(unsigned short *shootdata /*reg $4*/, int actornum /*reg $16*/, int nodenum /*reg $17*/, struct PHD_VECTOR *pos /*reg $18*/)
{ // line 1, offset 0x2eb9c
    int f; // register $5
    { // line 11, offset 0x2ebd0
        unsigned short dat; // register $3
        { // line 14, offset 0x2ebe0
            struct MATRIX3D arse; // stack offset -48
        } // line 20, offset 0x2ec58
    } // line 21, offset 0x2ec58
} // line 23, offset 0x2ec68
/*
 * Offset 0x2EC80
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3295)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ GetActorJointAbsPosition(int actornum /*reg $17*/, unsigned long nodenum /*reg $22*/, struct PHD_VECTOR *vec /*reg $20*/)
{ // line 1, offset 0x2ec80
    int i; // register $19
    int poppush; // register $16
    struct object_info *object; // register $7
    long *bone; // register $18
    short *rotation1; // stack offset -48
    short *frame; // register $16
    struct ITEM_INFO *item; // register $21
    struct MATRIX3D *old; // register $23
} // line 55, offset 0x2ee84
/*
 * Offset 0x2EE84
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3418)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ TriggerActorBlood(int actornum /*reg $4*/, unsigned long nodenum /*reg $5*/, struct PHD_VECTOR *pos /*reg $16*/, int direction /*reg $18*/, int speed /*sp 16*/)
/*
 * Offset 0x2EED8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3434)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ TriggerDelSmoke(long x /*reg $18*/, long y /*reg $20*/, long z /*reg $19*/, int sizeme /*reg $21*/)
{ // line 1, offset 0x2eed8
    long size; // register $2
    struct SPARKS *sptr; // register $16
    long dx; // register $3
    long dz; // register $4
} // line 47, offset 0x2f09c
/*
 * Offset 0x2F0C0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3487)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ joby2_init()
/*
 * Offset 0x2F114
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3519)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ joby2_control()
{ // line 2, offset 0x2f114
    int f; // register $5
} // line 70, offset 0x2f2b8
/*
 * Offset 0x2F2B8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3591)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby2_end()
/*
 * Offset 0x2F2FC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3606)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ joby3_init()
/*
 * Offset 0x2F304
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3616)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby3_control()
{ // line 2, offset 0x2f304
    int f; // register $4
} // line 18, offset 0x2f374
/*
 * Offset 0x2F374
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3635)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ joby3_end()
/*
 * Offset 0x2F37C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3646)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy1_init()
/*
 * Offset 0x2F39C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3651)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy1_control()
{ // line 2, offset 0x2f39c
    int f; // register $3
} // line 16, offset 0x2f408
/*
 * Offset 0x2F408
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3668)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy1_end()
/*
 * Offset 0x2F434
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3680)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ hamgate_init()
{ // line 3, offset 0x2f434
    struct ITEM_INFO *item; // register $16
} // line 15, offset 0x2f4d0
/*
 * Offset 0x2F4D0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3696)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ hamgate_control()
{ // line 3, offset 0x2f4d0
    int f; // register $16
} // line 18, offset 0x2f534
/*
 * Offset 0x2F534
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3716)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ hamgate_end()
{ // line 2, offset 0x2f534
    struct ITEM_INFO *item; // register $2
} // line 10, offset 0x2f57c
/*
 * Offset 0x2F57C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3730)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ do_hammer_meshswap()
{ // line 2, offset 0x2f57c
    short *temp; // register $5
} // line 6, offset 0x2f5b0
/*
 * Offset 0x2F5B0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3746)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy2_init()
/*
 * Offset 0x2F5D0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3752)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ andy2_control()
{ // line 2, offset 0x2f5d0
    struct PHD_VECTOR pos; // stack offset -32
} // line 11, offset 0x2f668
/*
 * Offset 0x2F668
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3765)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy2_end()
/*
 * Offset 0x2F694
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3771)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ setup_preist_meshswap()
{ // line 2, offset 0x2f694
} // line 6, offset 0x2f6e4
/*
 * Offset 0x2F6E4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3788)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ DelTorchFlames(struct PHD_VECTOR *pos /*reg $4*/)
{ // line 1, offset 0x2f6e4
    long x; // register $17
    long y; // register $18
    long z; // register $20
    long size; // register $3
    struct SPARKS *sptr; // register $30
} // line 91, offset 0x2f9e4
/*
 * Offset 0x2F9E4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3900)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby4_init()
/*
 * Offset 0x2FA0C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3929)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ joby4_control()
{ // line 2, offset 0x2fa0c
    int f; // register $16
} // line 32, offset 0x2fb04
/*
 * Offset 0x2FB04
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 3962)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby4_end()
/*
 * Offset 0x2FB50
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4018)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andrea1_init()
/*
 * Offset 0x2FB58
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4023)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ andrea1_control()
{ // line 2, offset 0x2fb58
    int f; // register $16
    struct PHD_VECTOR pos; // stack offset -24
    { // line 10, offset 0x2fb70
        struct ITEM_INFO *item; // register $2
    } // line 15, offset 0x2fb98
} // line 48, offset 0x2fc94
/*
 * Offset 0x2FC94
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4073)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andrea1_end()
/*
 * Offset 0x2FCC0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4136)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andrea2_init()
/*
 * Offset 0x2FCDC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4140)
 * Stack frame base $29, size 88
 */
void /*reg $31*/ andrea2_control()
{ // line 2, offset 0x2fcdc
    int f; // register $16
    { // line 29, offset 0x2fd9c
        struct ITEM_INFO *item; // register $2
    } // line 34, offset 0x2fdc4
    { // line 41, offset 0x2fdd0
        struct PHD_VECTOR pos; // stack offset -56
    } // line 81, offset 0x2feb0
    { // line 86, offset 0x2fec0
        struct PHD_VECTOR s; // stack offset -40
        int r; // register $18
        int g; // register $17
        int b; // register $16
        int scale; // register $2
    } // line 112, offset 0x2ff5c
} // line 129, offset 0x2ffd4
/*
 * Offset 0x2FFD4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4270)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andrea2_end()
/*
 * Offset 0x2FFF0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4283)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby5_init()
/*
 * Offset 0x30034
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4319)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ joby5_control()
{ // line 2, offset 0x30034
    int f; // register $4
} // line 37, offset 0x30144
/*
 * Offset 0x30144
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4357)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby5_end()
/*
 * Offset 0x3018C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4378)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy3_init()
/*
 * Offset 0x301DC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4389)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy3_control()
{ // line 2, offset 0x301dc
    int f; // register $3
} // line 11, offset 0x30208
/*
 * Offset 0x30208
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4401)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy3_end()
/*
 * Offset 0x3024C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4410)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ do_catapult_meshswap()
{ // line 2, offset 0x3024c
    short *temp; // register $5
} // line 6, offset 0x30280
/*
 * Offset 0x30280
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4459)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby9_init()
/*
 * Offset 0x302A0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4465)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ joby9_control()
{ // line 2, offset 0x302a0
} // line 14, offset 0x302f0
/*
 * Offset 0x302F0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4481)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby9_end()
/*
 * Offset 0x30318
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4523)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby10_init()
/*
 * Offset 0x30338
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4528)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ joby10_control()
{ // line 2, offset 0x30338
    int f; // register $3
    { // line 11, offset 0x3034c
        struct ITEM_INFO *item; // register $2
    } // line 14, offset 0x30364
} // line 23, offset 0x303ac
/*
 * Offset 0x303AC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4553)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby10_end()
/*
 * Offset 0x303E0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4564)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ richcut4_init()
{ // line 2, offset 0x303e0
} // line 18, offset 0x30478
/*
 * Offset 0x30478
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4584)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ richcut4_control()
{ // line 2, offset 0x30478
    struct ITEM_INFO *item; // register $5
    int f; // register $16
} // line 32, offset 0x30560
/*
 * Offset 0x30560
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4618)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ richcut4_end()
{ // line 2, offset 0x30560
} // line 6, offset 0x3059c
/*
 * Offset 0x3059C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4635)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy4_init()
/*
 * Offset 0x305BC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4640)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ andy4_control()
{ // line 2, offset 0x305bc
    struct PHD_VECTOR pos; // stack offset -24
    int n; // register $16
    int f; // register $3
} // line 42, offset 0x306b4
/*
 * Offset 0x306B4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4683)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy4_end()
/*
 * Offset 0x306F0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4697)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy4b_init()
/*
 * Offset 0x30710
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4701)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ andy4b_control()
{ // line 2, offset 0x30710
    struct PHD_VECTOR pos; // stack offset -32
    int f; // register $16
    int n; // register $16
    { // line 13, offset 0x30764
        int actor; // register $17
    } // line 28, offset 0x307d8
} // line 43, offset 0x307ec
/*
 * Offset 0x307EC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4745)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy4b_end()
/*
 * Offset 0x3081C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4752)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ do_clanger_meshswap()
{ // line 2, offset 0x3081c
    short *temp; // register $5
} // line 6, offset 0x30850
/*
 * Offset 0x30850
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4767)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andrea3_init()
/*
 * Offset 0x30870
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4802)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ andrea3_control()
{ // line 2, offset 0x30870
    int f; // register $3
} // line 25, offset 0x30904
/*
 * Offset 0x30904
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4828)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andrea3_end()
{ // line 2, offset 0x30904
    { // line 2, offset 0x30904
        struct ITEM_INFO *item; // register $16
    } // line 2, offset 0x30904
} // line 22, offset 0x30a1c
/*
 * Offset 0x30A1C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4856)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andrea3b_init()
{ // line 2, offset 0x30a1c
    { // line 2, offset 0x30a1c
        struct ITEM_INFO *item; // register $16
    } // line 2, offset 0x30a1c
} // line 22, offset 0x30b08
/*
 * Offset 0x30B08
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4896)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ andrea3b_control()
{ // line 2, offset 0x30b08
    int f; // register $5
} // line 47, offset 0x30c54
/*
 * Offset 0x30C54
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4945)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ andrea3b_end()
{ // line 2, offset 0x30c54
    { // line 2, offset 0x30c54
        int i; // register $17
        struct ITEM_INFO *item; // register $16
    } // line 21, offset 0x30d58
} // line 24, offset 0x30d84
/*
 * Offset 0x30D84
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4974)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy5_init()
/*
 * Offset 0x30DA4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 4978)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ andy5_control()
{ // line 3, offset 0x30da4
    int f; // register $4
    struct PHD_VECTOR pos; // stack offset -32
} // line 43, offset 0x30f28
/*
 * Offset 0x30F28
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5022)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy5_end()
/*
 * Offset 0x30F48
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5032)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby6_init()
/*
 * Offset 0x30FA0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5046)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ joby6_control()
{ // line 2, offset 0x30fa0
    int f; // register $3
} // line 13, offset 0x30fec
/*
 * Offset 0x30FEC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5061)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ joby6_end()
/*
 * Offset 0x31024
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5075)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ joby8_init()
{ // line 2, offset 0x31024
    short room_number; // stack offset -16
} // line 32, offset 0x310e0
/*
 * Offset 0x310E0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5108)
 * Stack frame base $29, size 128
 */
void /*reg $31*/ joby8_control()
{ // line 3, offset 0x310e0
    int f; // register $17
    { // line 39, offset 0x311ec
        short room_number; // stack offset -96
        struct ITEM_INFO *item; // register $16
    } // line 50, offset 0x31240
    { // line 54, offset 0x31250
        struct PHD_VECTOR s; // stack offset -88
        struct PHD_VECTOR d; // stack offset -72
        int r; // register $17
        int b; // register $20
        int rndme; // register $2
        struct SPARKS *sptr; // register $16
        int n; // register $18
    } // line 129, offset 0x314cc
    { // line 135, offset 0x314d8
        struct PHD_VECTOR s; // stack offset -56
        int r; // register $18
        int g; // register $17
        int b; // register $16
        int scale; // register $2
    } // line 162, offset 0x31570
} // line 168, offset 0x315a0
/*
 * Offset 0x315A0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5278)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby8_end()
/*
 * Offset 0x315D0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5289)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy6_init()
/*
 * Offset 0x315F8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5295)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ andy6_control()
{ // line 2, offset 0x315f8
    struct PHD_VECTOR pos; // stack offset -32
} // line 12, offset 0x31690
/*
 * Offset 0x31690
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5308)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andy6_end()
/*
 * Offset 0x31698
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5315)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andypew_init()
/*
 * Offset 0x316B8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5319)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andypew_control()
/*
 * Offset 0x316C0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5322)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andypew_end()
/*
 * Offset 0x316F4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5335)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andy7_init()
/*
 * Offset 0x31704
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5370)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ andy7_control()
/*
 * Offset 0x31754
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5382)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy7_end()
/*
 * Offset 0x31784
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5392)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ cossack_init()
/*
 * Offset 0x3178C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5396)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ cossack_control()
{ // line 2, offset 0x3178c
    struct PHD_VECTOR pos; // stack offset -40
    int n; // register $16
    int f; // register $17
} // line 73, offset 0x31998
/*
 * Offset 0x31998
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5470)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ cossack_end()
/*
 * Offset 0x319D0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5479)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ TriggerDelBrownSmoke(long x /*reg $17*/, long y /*reg $18*/, long z /*reg $19*/)
{ // line 1, offset 0x319d0
    long size; // register $2
    struct SPARKS *sptr; // register $16
} // line 44, offset 0x31b7c
/*
 * Offset 0x31B7C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5532)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy9_init()
/*
 * Offset 0x31BA4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5539)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andy9_control()
{ // line 2, offset 0x31ba4
    int f; // register $4
} // line 12, offset 0x31c08
/*
 * Offset 0x31C08
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5552)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy9_end()
/*
 * Offset 0x31C34
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5564)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andy8_init()
/*
 * Offset 0x31C3C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5567)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy8_control()
{ // line 2, offset 0x31c3c
    struct ITEM_INFO *item; // register $3
    int f; // register $4
} // line 30, offset 0x31cf8
/*
 * Offset 0x31CF8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5598)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy8_end()
/*
 * Offset 0x31D24
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5607)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ do_chalk_meshswap()
{ // line 2, offset 0x31d24
    short *temp; // register $5
} // line 6, offset 0x31d58
/*
 * Offset 0x31D58
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5618)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy10_init()
{ // line 2, offset 0x31d58
    struct ITEM_INFO *item; // register $16
} // line 30, offset 0x31e9c
/*
 * Offset 0x31E9C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5650)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ andy10_control()
{ // line 2, offset 0x31e9c
    int f; // register $6
} // line 46, offset 0x3202c
/*
 * Offset 0x3202C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5698)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy10_end()
/*
 * Offset 0x320D0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5733)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby7_init()
/*
 * Offset 0x3210C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5750)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ joby7_control()
{ // line 2, offset 0x3210c
    struct PHD_VECTOR s; // stack offset -48
    struct PHD_VECTOR d; // stack offset -32
    int f; // register $17
    { // line 17, offset 0x3214c
        int brightme; // register $3
        int b; // register $2
    } // line 38, offset 0x321a0
    { // line 42, offset 0x321ac
        short room_no; // register $17
    } // line 60, offset 0x32268
} // line 85, offset 0x32328
/*
 * Offset 0x32328
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5837)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ joby7_end()
/*
 * Offset 0x323C0
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5866)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andrea4_init()
/*
 * Offset 0x323C8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5912)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ andrea4_control()
{ // line 2, offset 0x323c8
    int f; // register $16
} // line 24, offset 0x32464
/*
 * Offset 0x32464
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5937)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andrea4_end()
/*
 * Offset 0x32484
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5942)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ do_pierre_gun_meshswap()
{ // line 2, offset 0x32484
} // line 6, offset 0x324d4
/*
 * Offset 0x324D4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5956)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ monk2_init()
/*
 * Offset 0x324E4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5960)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ monk2_control()
{ // line 2, offset 0x324e4
    struct PHD_VECTOR pos; // stack offset -32
    int f; // register $4
} // line 33, offset 0x325f4
/*
 * Offset 0x325F4
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 5994)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ monk2_end()
/*
 * Offset 0x32608
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6006)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ swampy_init()
{ // line 2, offset 0x32608
    struct ITEM_INFO *item; // register $16
} // line 17, offset 0x326ec
/*
 * Offset 0x326EC
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6024)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ swampy_control()
{ // line 2, offset 0x326ec
    int f; // register $2
} // line 10, offset 0x3271c
/*
 * Offset 0x3271C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6035)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ swampy_end()
/*
 * Offset 0x327F8
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6062)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ CutLaraBubbles()
{ // line 2, offset 0x327f8
    struct PHD_VECTOR offset; // stack offset -48
    struct PHD_VECTOR pos; // stack offset -32
    int i; // register $16
    short roomnum; // register $17
} // line 26, offset 0x32904
/*
 * Offset 0x32904
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6101)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ trigger_title_spotcam(int num /*reg $18*/)
{ // line 1, offset 0x32904
    { // line 9, offset 0x3292c
        struct ITEM_INFO *item; // register $2
    } // line 10, offset 0x3292c
    { // line 23, offset 0x32970
        struct ITEM_INFO *item; // register $5
    } // line 46, offset 0x329fc
} // line 61, offset 0x32a80
/*
 * Offset 0x32A80
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6167)
 * Stack frame base $29, size 32
 */
struct ITEM_INFO * /*reg $31*/ ResetCutanimate(int objnum /*reg $16*/)
{ // line 1, offset 0x32a80
    struct ITEM_INFO *item; // register $17
} // line 11, offset 0x32b50
/*
 * Offset 0x32B50
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6190)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ Cutanimate(int objnum /*reg $16*/)
{ // line 1, offset 0x32b50
    struct ITEM_INFO *item; // register $17
} // line 12, offset 0x32c20
/*
 * Offset 0x32C20
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6213)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy11_init()
/*
 * Offset 0x32C70
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6223)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ andy11_control()
{ // line 2, offset 0x32c70
    int f; // register $4
} // line 22, offset 0x32d6c
/*
 * Offset 0x32D6C
 * C:\Projects2\Tomb5\GAME\DELTAPAK.C (line 6246)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ andy11_end()
extern struct CUTSEQ_ROUTINES cutseq_control_routines[45];
extern unsigned short crane_pistols_info[11];
extern unsigned short craneguard_pistols_info[7];
extern short admiral_chat_ranges_joby2[12];
extern short sergie_chat_ranges_joby2[8];
extern short lara_chat_ranges_joby3[6];
extern short lara_chat_ranges_joby4[10];
extern short admiral_chat_ranges_joby4[20];
extern unsigned short larson_pistols_info1[2];
extern short lara_chat_ranges_andrea1[4];
extern short larson_chat_ranges1[12];
extern short pierre_chat_ranges1[30];
extern short lara_chat_ranges_andrea2[32];
extern short larson_chat_ranges2[8];
extern short pierre_chat_ranges2[34];
extern short admiral_chat_ranges_joby5[18];
extern short sergie_chat_ranges_joby5[20];
extern short lara_chat_ranges_joby9[12];
extern short admiral_chat_ranges_joby9[36];
extern short lara_chat_ranges_joby10[12];
extern short admiral_chat_ranges_joby10[42];
extern unsigned short andrea3_pistols_info[5];
extern short lara_chat_ranges_andrea3[14];
extern short larson_chat_ranges3[14];
extern short lara_chat_ranges_andrea3b[12];
extern short larson_chat_ranges3b[4];
extern short priest_chat_ranges_andy7[32];
extern short lara_chat_ranges_andy7[14];
extern short lara_chat_ranges_joby7[10];
extern short lara_chat_ranges_andrea4[22];
extern short pierre_chat_ranges4[48];
extern int cuntercunter; // offset 0xA0998
extern char jobyfrigger; // offset 0xA099C
extern int cutrot; // offset 0xA09A0
extern int GLOBAL_playing_cutseq; // offset 0xA09B0
extern int cutseq_trig; // offset 0xA09AC
extern int cutseq_num; // offset 0xA09A8
extern unsigned char disable_horizon; // offset 0xA09A4
extern char cutseq_busy_timeout; // offset 0xA09B4
extern short frig_shadow_bbox[6];
extern int cut_seethrough; // offset 0xA09C4
extern char lara_chat_cnt; // offset 0xA09C8
extern char actor_chat_cnt; // offset 0xA09C9
extern struct NEW_CUTSCENE *GLOBAL_cutme;
extern int lastcamnum; // offset 0xA2698
extern int GLOBAL_cutseq_frame; // offset 0xA2668
extern int GLOBAL_numcutseq_frames; // offset 0xA2660
extern int GLOBAL_oldcamtype; // offset 0xA26EC
extern struct PACKNODE *camera_pnodes;
extern struct PACKNODE *actor_pnodes[10];
extern struct ITEM_INFO duff_item;
extern int numnailed; // offset 0xA266C
extern char old_status_flags[32];
extern unsigned short old_status_flags2[32];
extern unsigned long cutseq_meshbits[10];
extern unsigned long cutseq_meshswapbits[10];
extern struct RESIDENT_THING cutseq_resident_addresses[47];
extern char *GLOBAL_resident_depack_buffers; // offset 0xA2664
extern int cutseq_malloc_used; // offset 0xA2658
extern char *cutseq_malloc_ptr; // offset 0xA2654
extern int cutseq_malloc_free; // offset 0xA265C
extern unsigned short old_lara_holster; // offset 0xA26C0
extern short temp_rotation_buffer[160];
/*
 * Offset 0x2AA88
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 122)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ ShutThatDoor(struct DOORPOS_DATA *d /*reg $4*/, struct DOOR_DATA *dd /*reg $8*/)
{ // line 1, offset 0x2aa88
    short *dptr; // register $5
    { // line 15, offset 0x2aad0
        struct creature_info *cinfo; // register $6
        short slot; // register $2
    } // line 25, offset 0x2ab1c
} // line 60, offset 0x2ab8c
/*
 * Offset 0x2AB8C
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 186)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ OpenThatDoor(struct DOORPOS_DATA *d /*reg $16*/, struct DOOR_DATA *dd /*reg $17*/)
{ // line 1, offset 0x2ab8c
    short *dptr; // register $3
    { // line 15, offset 0x2abfc
        struct creature_info *cinfo; // register $3
        short slot; // register $2
    } // line 22, offset 0x2ac2c
    { // line 28, offset 0x2ac3c
        short v; // register $4
    } // line 94, offset 0x2ad60
} // line 95, offset 0x2ad74
/*
 * Offset 0x2AD74
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 283)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ DoorControl(short item_number /*reg $4*/)
{ // line 1, offset 0x2ad74
    struct ITEM_INFO *item; // register $17
    struct DOOR_DATA *door; // register $16
    { // line 11, offset 0x2adcc
    } // line 24, offset 0x2ae24
} // line 144, offset 0x2b138
/*
 * Offset 0x2B150
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 430)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ DoorCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $20*/)
{ // line 1, offset 0x2b150
    struct ITEM_INFO *item; // register $16
} // line 108, offset 0x2b4e4
/*
 * Offset 0x2B508
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 540)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ PushPullKickDoorControl(short item_number /*reg $4*/)
{ // line 1, offset 0x2b508
    struct ITEM_INFO *item; // register $17
    struct DOOR_DATA *door; // register $16
} // line 15, offset 0x2b5a0
/*
 * Offset 0x2B5A0
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 557)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ PushPullKickDoorCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x2b5a0
    struct ITEM_INFO *item; // register $16
    { // line 12, offset 0x2b680
        int pull; // register $20
        { // line 22, offset 0x2b6bc
            int flag; // register $19
        } // line 66, offset 0x2b780
    } // line 83, offset 0x2b804
} // line 88, offset 0x2b854
/*
 * Offset 0x2B854
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 647)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ DoubleDoorCollision(short item_num /*reg $17*/, struct ITEM_INFO *l /*reg $18*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x2b854
    struct ITEM_INFO *item; // register $16
} // line 42, offset 0x2ba38
/*
 * Offset 0x2BA38
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 691)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ UnderwaterDoorCollision(short item_num /*reg $16*/, struct ITEM_INFO *l /*reg $18*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x2ba38
    struct ITEM_INFO *item; // register $17
} // line 45, offset 0x2bc28
/*
 * Offset 0x2BC28
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 741)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ SequenceDoorControl(short item_number /*reg $4*/)
{ // line 1, offset 0x2bc28
    struct ITEM_INFO *item; // register $17
    struct DOOR_DATA *door; // register $16
} // line 49, offset 0x2bde8
/*
 * Offset 0x2BDE8
 * C:\Projects2\Tomb5\GAME\DOOR.C (line 792)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ ProcessClosedDoors()
{ // line 2, offset 0x2bde8
    long lp; // register $18
    short room_number; // register $16
} // line 41, offset 0x2bfa0
static struct PHD_VECTOR DoubleDoorPos; // offset 0xA0780
static struct PHD_VECTOR PullDoorPos; // offset 0xA078C
static struct PHD_VECTOR PushDoorPos; // offset 0xA0798
static struct PHD_VECTOR KickDoorPos; // offset 0xA07A4
static struct PHD_VECTOR UnderwaterDoorPos; // offset 0xA07B0
static struct PHD_VECTOR CrowbarDoorPos; // offset 0xA07BC
static short PushPullKickDoorBounds[12]; // offset 0xA07C8
static short UnderwaterDoorBounds[12]; // offset 0xA07E0
static short CrowbarDoorBounds[12]; // offset 0xA07F8
extern long ClosedDoors[32];
extern char LiftDoor; // offset 0xA0890
/*
 * Offset 0x2BFA0
 * C:\Projects2\Tomb5\GAME\DRAW.C (line 252)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ CalculateObjectLightingLara()
{ // line 2, offset 0x2bfa0
    { // line 9, offset 0x2bfc4
        short room_no; // stack offset -16
        struct PHD_VECTOR pos; // stack offset -32
    } // line 45, offset 0x2c0c0
} // line 46, offset 0x2c0c0
/*
 * Offset 0x2C0D0
 * C:\Projects2\Tomb5\GAME\DRAW.C (line 304)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ UpdateSkyLightning()
{ // line 2, offset 0x2c0d0
    long lp; // register $5
} // line 37, offset 0x2c1dc
extern short LightningSFXDelay; // offset 0xA0894
extern struct room_info *room;
extern short number_rooms; // offset 0xA25E8
extern long *bones; // offset 0xA25E4
extern struct ANIM_STRUCT *anims;
extern struct RANGE_STRUCT *ranges;
extern struct CHANGE_STRUCT *changes;
extern short **meshes; // offset 0xA2600
extern short *commands; // offset 0xA262C
extern short *frames; // offset 0xA25F4
extern short *binoculars_mesh_ptr; // offset 0xA25FC
extern short *target_mesh_ptr; // offset 0xA25F8
extern short SkyPos; // offset 0xA25D4
extern short SkyPos2; // offset 0xA25B8
extern int number_draw_rooms; // offset 0xA24E0
extern short draw_rooms[100];
extern int number_dynamics; // offset 0xA25D0
extern long camera_underwater; // offset 0xA2628
extern long gfMirrorZPlane; // offset 0xA2608
extern unsigned short LightningRGBs[3];
extern unsigned short LightningRGB[3];
extern short LightningCount; // offset 0xA25D8
extern short LightningRand; // offset 0xA2614
extern short dLightningRand; // offset 0xA2618
extern short interpolated_bounds[6];
extern short *GLOBAL_gunflash_meshptr; // offset 0xA2624
extern int CurrentRoom; // offset 0xA24D8
extern unsigned char CreditsDone; // offset 0xA25AC
extern short GlobalRoomNumber; // offset 0xA25C4
extern long outside; // offset 0xA25F0
extern long outside_left; // offset 0xA2610
extern long outside_right; // offset 0xA25C8
extern long outside_top; // offset 0xA2604
extern long outside_bottom; // offset 0xA25CC
extern short HorizonClip; // offset 0xA25B0
extern struct door_vbuf vbufdoor[4];
extern short Sback_gun; // offset 0xA25DC
extern short *SRhandPtr; // offset 0xA2630
extern short *SLhandPtr; // offset 0xA25EC
/*
 * Offset 0x216AC
 * C:\Projects2\Tomb5\GAME\BOX.C (line 106)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ StalkBox(struct ITEM_INFO *item /*reg $12*/, struct ITEM_INFO *enemy /*reg $11*/, short box_number /*reg $2*/)
{ // line 1, offset 0x216ac
    struct box_info *box; // register $4
    int baddie_quad; // register $4
    int box_quad; // register $5
    int enemy_quad; // register $3
    long x; // register $4
    long z; // register $10
    long xrange; // register $5
    long zrange; // register $6
} // line 46, offset 0x21800
/*
 * Offset 0x21800
 * C:\Projects2\Tomb5\GAME\BOX.C (line 155)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitialiseCreature(short item_number /*reg $4*/)
{ // line 1, offset 0x21800
    struct ITEM_INFO *item; // register $5
} // line 17, offset 0x218b0
/*
 * Offset 0x218B0
 * C:\Projects2\Tomb5\GAME\BOX.C (line 175)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ CreatureActive(short item_number /*reg $5*/)
{ // line 1, offset 0x218b0
    struct ITEM_INFO *item; // register $16
} // line 18, offset 0x2194c
/*
 * Offset 0x2194C
 * C:\Projects2\Tomb5\GAME\BOX.C (line 196)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ CreatureAIInfo(struct ITEM_INFO *item /*reg $20*/, struct AI_info *info /*reg $22*/)
{ // line 1, offset 0x2194c
    struct room_info *r; // register $9
    long x; // register $16
    long y; // register $19
    long z; // register $17
    short angle; // register $4
    short *zone; // register $6
    struct object_info *object; // register $7
    struct ITEM_INFO *enemy; // register $18
} // line 118, offset 0x21db4
/*
 * Offset 0x21DDC
 * C:\Projects2\Tomb5\GAME\BOX.C (line 317)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ SearchLOT(struct lot_info *LOT /*reg $10*/, int expansion /*reg $19*/)
{ // line 1, offset 0x21ddc
    int i; // register $6
    int index; // register $2
    int done; // register $24
    int change; // register $4
    int box_number; // register $9
    int overlap_flags; // register $6
    struct box_node *node; // register $13
    struct box_node *expand; // register $7
    struct box_info *box; // register $14
    short *zone; // register $16
    short search_zone; // register $18
} // line 140, offset 0x22034
/*
 * Offset 0x22034
 * C:\Projects2\Tomb5\GAME\BOX.C (line 460)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ UpdateLOT(struct lot_info *LOT /*reg $4*/, int expansion /*reg $5*/)
{ // line 1, offset 0x22034
    struct box_node *expand; // register $7
} // line 34, offset 0x220f4
/*
 * Offset 0x220F4
 * C:\Projects2\Tomb5\GAME\BOX.C (line 503)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ TargetBox(struct lot_info *LOT /*reg $18*/, short box_number /*reg $5*/)
{ // line 1, offset 0x220f4
    struct box_info *box; // register $17
} // line 16, offset 0x221c4
/*
 * Offset 0x221C4
 * C:\Projects2\Tomb5\GAME\BOX.C (line 524)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ EscapeBox(struct ITEM_INFO *item /*reg $9*/, struct ITEM_INFO *enemy /*reg $8*/, short box_number /*reg $6*/)
{ // line 1, offset 0x221c4
    struct box_info *box; // register $4
    long x; // register $7
    long z; // register $6
} // line 20, offset 0x222a4
/*
 * Offset 0x222A4
 * C:\Projects2\Tomb5\GAME\BOX.C (line 547)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ ValidBox(struct ITEM_INFO *item /*reg $8*/, short zone_number /*reg $5*/, short box_number /*reg $6*/)
{ // line 1, offset 0x222a4
    struct box_info *box; // register $4
    struct creature_info *creature; // register $7
    short *zone; // register $4
} // line 26, offset 0x22398
/*
 * Offset 0x22398
 * C:\Projects2\Tomb5\GAME\BOX.C (line 580)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ GetCreatureMood(struct ITEM_INFO *item /*reg $21*/, struct AI_info *info /*reg $17*/, int violent /*reg $22*/)
{ // line 1, offset 0x22398
    enum mood_type mood; // register $20
    struct lot_info *LOT; // register $19
    struct ITEM_INFO *enemy; // register $18
} // line 127, offset 0x226bc
/*
 * Offset 0x226E4
 * C:\Projects2\Tomb5\GAME\BOX.C (line 709)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ CreatureMood(struct ITEM_INFO *item /*reg $21*/, struct AI_info *info /*reg $20*/, int violent /*reg $22*/)
{ // line 1, offset 0x226e4
    short box_number; // register $16
    struct lot_info *LOT; // register $17
    struct ITEM_INFO *enemy; // register $19
    { // line 132, offset 0x22a40
        short index; // register $3
        short box_no; // register $6
    } // line 149, offset 0x22ae4
} // line 151, offset 0x22ae4
/*
 * Offset 0x22B0C
 * C:\Projects2\Tomb5\GAME\BOX.C (line 862)
 * Stack frame base $29, size 40
 */
enum target_type /*reg $31*/ CalculateTarget(struct PHD_VECTOR *target /*reg $16*/, struct ITEM_INFO *item /*reg $17*/, struct lot_info *LOT /*reg $18*/)
{ // line 1, offset 0x22b0c
    int box_number; // register $24
    int prime_free; // register $7
    struct box_info *box; // register $12
    long left; // register $15
    long right; // register $14
    long top; // register $6
    long bottom; // register $13
    long box_left; // register $8
    long box_right; // register $9
    long box_top; // register $10
    long box_bottom; // register $11
} // line 282, offset 0x2304c
/*
 * Offset 0x2304C
 * C:\Projects2\Tomb5\GAME\BOX.C (line 1147)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ CreatureCreature(short item_number /*reg $11*/)
{ // line 1, offset 0x2304c
    short link; // register $3
    long x; // register $10
    long z; // register $9
    long y_rot; // register $16
    long xdistance; // register $7
    long zdistance; // register $6
    long distance; // register $6
    long radius; // register $13
    struct room_info *r; // register $3
    struct ITEM_INFO *item; // register $8
} // line 53, offset 0x231cc
/*
 * Offset 0x231CC
 * C:\Projects2\Tomb5\GAME\BOX.C (line 1203)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ BadFloor(long x /*reg $4*/, long y /*reg $18*/, long z /*reg $6*/, long box_height /*reg $17*/, long next_height /*sp 16*/, int room_number /*sp 20*/, struct lot_info *LOT /*sp 24*/)
{ // line 1, offset 0x231cc
    long height; // register $4
} // line 49, offset 0x232d4
/*
 * Offset 0x232D4
 * C:\Projects2\Tomb5\GAME\BOX.C (line 1255)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ CreatureDie(short item_number /*reg $17*/, int explode /*reg $5*/)
{ // line 1, offset 0x232d4
    struct ITEM_INFO *item; // register $16
} // line 40, offset 0x23448
/*
 * Offset 0x23448
 * C:\Projects2\Tomb5\GAME\BOX.C (line 1298)
 * Stack frame base $29, size 136
 */
int /*reg $31*/ CreatureAnimation(short item_number /*sp -84*/, short angle /*sp -80*/, short tilt /*sp -76*/)
{ // line 1, offset 0x23448
    long radius; // register $16
    long shift_x; // register $30
    long shift_z; // stack offset -72
    long top; // register $4
    long height; // register $19
    long box_height; // register $20
    long next_height; // register $22
    long ceiling; // register $5
    long x; // register $18
    long y; // stack offset -68
    long z; // register $20
    long pos_x; // register $21
    long pos_z; // stack offset -64
    long dy; // register $16
    struct PHD_VECTOR old; // stack offset -104
    struct ITEM_INFO *item; // register $17
    struct lot_info *LOT; // stack offset -60
    struct FLOOR_INFO *floor; // stack offset -56
    short *zone; // register $18
    short *bounds; // stack offset -52
    short room_number; // stack offset -88
    short next_box; // register $2
    short biff_angle; // register $3
} // line 396, offset 0x24130
/*
 * Offset 0x24130
 * C:\Projects2\Tomb5\GAME\BOX.C (line 1697)
 * Stack frame base $29, size 40
 */
short /*reg $31*/ CreatureTurn(struct ITEM_INFO *item /*reg $19*/, short maximum_turn /*reg $18*/)
{ // line 1, offset 0x24130
    long x; // register $16
    long z; // register $17
    short angle; // register $5
    long feelxplus; // register $25
    long feelzplus; // register $24
    long feelxminus; // register $17
    long feelzminus; // register $9
    long feelxmid; // register $14
    long feelzmid; // register $15
    long feelplus; // register $6
    long feelminus; // register $2
    long feelmid; // register $3
    struct room_info *r; // register $9
} // line 225, offset 0x24418
/*
 * Offset 0x24418
 * C:\Projects2\Tomb5\GAME\BOX.C (line 1924)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ CreatureTilt(struct ITEM_INFO *item /*reg $4*/, short angle /*reg $5*/)
/*
 * Offset 0x24484
 * C:\Projects2\Tomb5\GAME\BOX.C (line 1995)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ CreatureJoint(struct ITEM_INFO *item /*reg $4*/, short joint /*reg $5*/, short required /*reg $6*/)
{ // line 1, offset 0x24484
    short change; // register $6
} // line 26, offset 0x2451c
/*
 * Offset 0x24524
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2023)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ CreatureFloat(short item_number /*reg $18*/)
{ // line 1, offset 0x24524
    long water_level; // register $17
    struct ITEM_INFO *item; // register $16
    short room_number; // stack offset -24
} // line 44, offset 0x2468c
/*
 * Offset 0x2468C
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2070)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ CreatureUnderwater(struct ITEM_INFO *item /*reg $16*/, long depth /*reg $17*/)
{ // line 1, offset 0x2468c
    long water_level; // register $2
    long floorheight; // register $3
    short room_number; // stack offset -24
} // line 31, offset 0x24760
/*
 * Offset 0x24760
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2105)
 * Stack frame base $29, size 56
 */
short /*reg $31*/ CreatureEffect(struct ITEM_INFO *item /*reg $16*/, struct BITE_INFO *bite /*reg $5*/, short *generate /*reg $17*/)
{ // line 1, offset 0x24760
    struct PHD_VECTOR pos; // stack offset -32
} // line 9, offset 0x247d4
/*
 * Offset 0x247D4
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2117)
 * Stack frame base $29, size 64
 */
short /*reg $31*/ CreatureEffectT(struct ITEM_INFO *item /*reg $19*/, struct BITE_INFO *bite /*reg $5*/, short damage /*reg $6*/, short angle /*reg $7*/, short *generate /*sp 16*/)
{ // line 1, offset 0x247d4
    struct PHD_VECTOR pos; // stack offset -40
} // line 9, offset 0x24864
/*
 * Offset 0x24864
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2129)
 * Stack frame base $29, size 56
 */
int /*reg $31*/ CreatureVault(short item_number /*reg $22*/, short angle /*reg $5*/, int vault /*reg $18*/, int shift /*reg $21*/)
{ // line 1, offset 0x24864
    struct ITEM_INFO *item; // register $16
    long y; // register $17
    long xx; // register $20
    long yy; // register $19
    long x_floor; // register $4
    long y_floor; // register $3
    short room_number; // register $23
} // line 90, offset 0x24a94
/*
 * Offset 0x24A94
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2222)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ CreatureKill(struct ITEM_INFO *item /*reg $16*/, int kill_anim /*reg $5*/, int kill_state /*reg $6*/, short lara_anim /*reg $7*/)
/*
 * Offset 0x24C7C
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2276)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ AlertAllGuards(short item_number /*reg $4*/)
{ // line 1, offset 0x24c7c
    int slot; // register $6
    struct creature_info *cinfo; // register $5
    struct ITEM_INFO *target; // register $2
    struct ITEM_INFO *item; // register $3
    short obj_number; // register $4
} // line 21, offset 0x24d20
/*
 * Offset 0x24D20
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2300)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ AlertNearbyGuards(struct ITEM_INFO *item /*reg $8*/)
{ // line 1, offset 0x24d20
    int slot; // register $9
    struct creature_info *cinfo; // register $7
    struct ITEM_INFO *target; // register $6
    long x; // register $5
    long y; // register $4
    long z; // register $2
    long distance; // register $5
} // line 34, offset 0x24df0
/*
 * Offset 0x24DF0
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2336)
 * Stack frame base $29, size 24
 */
short /*reg $31*/ AIGuard(struct creature_info *creature /*reg $16*/)
{ // line 1, offset 0x24df0
    int random; // register $3
} // line 31, offset 0x24ed8
/*
 * Offset 0x24ED8
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2370)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ GetAITarget(struct creature_info *creature /*reg $18*/)
{ // line 1, offset 0x24ed8
    struct ITEM_INFO *item; // register $17
    struct ITEM_INFO *enemy; // register $16
    char ai_bits; // register $5
    short enemy_object; // register $7
} // line 158, offset 0x25380
/*
 * Offset 0x25380
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2529)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ FindAITargetObject(struct creature_info *creature /*reg $13*/, short obj_num /*reg $25*/)
{ // line 1, offset 0x25380
    short i; // register $11
    struct room_info *r; // register $8
    short *zone; // register $7
    struct ITEM_INFO *item; // register $10
    struct AIOBJECT *target_item; // register $9
} // line 55, offset 0x255f8
/*
 * Offset 0x255F8
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2587)
 * Stack frame base $29, size 0
 */
short /*reg $31*/ SameZone(struct creature_info *creature /*reg $4*/, struct ITEM_INFO *target_item /*reg $5*/)
{ // line 1, offset 0x255f8
    struct room_info *r; // register $11
    short *zone; // register $9
    struct ITEM_INFO *item; // register $8
} // line 39, offset 0x25738
/*
 * Offset 0x25738
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2628)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ CreatureYRot(struct PHD_3DPOS *srcpos /*reg $4*/, short angle /*reg $5*/, short angadd /*reg $6*/)
/*
 * Offset 0x2579C
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2639)
 * Stack frame base $29, size 56
 */
int /*reg $31*/ MoveCreature3DPos(struct PHD_3DPOS *srcpos /*reg $16*/, struct PHD_3DPOS *destpos /*reg $22*/, int velocity /*reg $21*/, short angdif /*reg $23*/, int angadd /*sp 16*/)
{ // line 1, offset 0x2579c
    int dist; // register $7
    int x; // register $18
    int y; // register $17
    int z; // register $19
} // line 38, offset 0x259bc
/*
 * Offset 0x259BC
 * C:\Projects2\Tomb5\GAME\BOX.C (line 2679)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ DropBaddyPickups(struct ITEM_INFO *item /*reg $18*/)
{ // line 1, offset 0x259bc
    short pickup_number; // register $17
    short room_number; // stack offset -32
    struct ITEM_INFO *pickup; // register $16
    { // line 10, offset 0x259e8
    } // line 10, offset 0x259e8
} // line 34, offset 0x25aac
extern int number_boxes; // offset 0xA2308
extern struct box_info *boxes;
extern unsigned short *overlap; // offset 0xA233C
extern short *ground_zone[5][2];
extern unsigned short testclip; // offset 0xA2340
extern unsigned short loops; // offset 0xA230C
/*
 * Offset 0x25AAC
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 172)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ InitialiseCamera()
/*
 * Offset 0x25B68
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 206)
 * Stack frame base $29, size 128
 */
void /*reg $31*/ MoveCamera(struct GAME_VECTOR *ideal /*reg $21*/, int speed /*reg $9*/)
{ // line 1, offset 0x25b68
    struct FLOOR_INFO *floor; // register $19
    struct GAME_VECTOR tcp; // stack offset -96
    long height; // register $18
    long ceiling; // register $3
    long shake; // register $4
    { // line 134, offset 0x25f3c
        long rndval; // register $16
    } // line 143, offset 0x25fd0
    { // line 175, offset 0x25fd0
        short room_number; // stack offset -80
        long wx; // register $17
        long wy; // register $20
        long wz; // register $16
        { // line 188, offset 0x2603c
            long dx; // register $2
            long dy; // register $4
            long dz; // register $3
            struct GAME_VECTOR temp1; // stack offset -72
            struct GAME_VECTOR temp2; // stack offset -56
        } // line 221, offset 0x2613c
    } // line 222, offset 0x2613c
    { // line 228, offset 0x2613c
        short room_number; // stack offset -40
        long wx; // register $17
        long wy; // register $20
        long wz; // register $16
    } // line 258, offset 0x2628c
} // line 309, offset 0x263b4
/*
 * Offset 0x263B4
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 518)
 * Stack frame base $29, size 200
 */
void /*reg $31*/ ChaseCamera(struct ITEM_INFO *item /*reg $4*/)
{ // line 1, offset 0x263b4
    struct FLOOR_INFO *floor; // register $18
    struct GAME_VECTOR ideal; // stack offset -184
    struct GAME_VECTOR ideals[5]; // stack offset -168
    struct GAME_VECTOR temp[2]; // stack offset -88
    long distance; // register $23
    long lp; // register $18
    long dx; // register $8
    long dz; // register $3
    long farthest; // register $20
    long farthestnum; // stack offset -52
    long h; // register $16
    long c; // register $3
    short angle; // register $2
    { // line 23, offset 0x26434
        short room_number; // stack offset -56
        long wx; // register $17
        long wy; // register $19
        long wz; // register $16
    } // line 151, offset 0x26544
} // line 167, offset 0x26838
/*
 * Offset 0x26838
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 687)
 * Stack frame base $29, size 264
 */
void /*reg $31*/ CombatCamera(struct ITEM_INFO *item /*reg $4*/)
{ // line 1, offset 0x26838
    struct FLOOR_INFO *floor; // register $19
    struct GAME_VECTOR ideal; // stack offset -248
    struct GAME_VECTOR ideals[9]; // stack offset -232
    struct GAME_VECTOR temp[2]; // stack offset -88
    long distance; // register $21
    long lp; // register $18
    long dx; // register $8
    long dz; // register $3
    long farthest; // register $20
    long farthestnum; // stack offset -52
    long h; // register $18
    long c; // register $4
    short angle; // register $2
    { // line 45, offset 0x269a0
        short room_number; // stack offset -56
        long wx; // register $17
        long wy; // register $20
        long wz; // register $16
    } // line 166, offset 0x26a80
} // line 182, offset 0x26d9c
/*
 * Offset 0x26D9C
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 871)
 * Stack frame base $29, size 184
 */
void /*reg $31*/ LookCamera(struct ITEM_INFO *item /*reg $4*/)
{ // line 4, offset 0x26d9c
    struct GAME_VECTOR ideal; // stack offset -152
    struct PHD_VECTOR pos1; // stack offset -136
    struct PHD_VECTOR pos2; // stack offset -120
    struct PHD_VECTOR pos3; // stack offset -104
    struct FLOOR_INFO *floor; // register $19
    long shake; // register $4
    long lp; // register $21
    short room_number; // stack offset -88
    short room_number2; // stack offset -86
    long dx; // register $30
    long dy; // register $23
    long dz; // register $22
    long wx; // register $20
    long wy; // register $16
    long wz; // register $17
    long clipped; // register $20
    long h; // register $18
    long c; // register $3
    long hxrot; // stack offset -76
    long txrot; // stack offset -72
    long hyrot; // stack offset -68
    long tyrot; // stack offset -64
    { // line 204, offset 0x27498
        long rndval; // register $16
    } // line 213, offset 0x2752c
    { // line 216, offset 0x2752c
        short room_number; // stack offset -84
        long wx; // register $17
        long wy; // register $20
        long wz; // register $16
    } // line 236, offset 0x27630
    { // line 241, offset 0x27630
        short room_number; // stack offset -82
        long wx; // register $17
        long wy; // register $20
        long wz; // register $16
    } // line 253, offset 0x276c8
    { // line 256, offset 0x276c8
        short room_number; // stack offset -80
        long wx; // register $17
        long wy; // register $20
        long wz; // register $16
    } // line 273, offset 0x2777c
} // line 310, offset 0x278e4
/*
 * Offset 0x278E4
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 1183)
 * Stack frame base $29, size 104
 */
void /*reg $31*/ FixedCamera()
{ // line 3, offset 0x278e4
    struct GAME_VECTOR ideal; // stack offset -80
    struct GAME_VECTOR t2; // stack offset -64
    struct OBJECT_VECTOR *fixed; // register $3
    struct PHD_VECTOR v; // stack offset -48
    struct MESH_INFO *StaticMesh; // stack offset -32
    long Target; // register $18
    long ricochet; // register $20
    long HitLara; // register $19
} // line 107, offset 0x27da0
/*
 * Offset 0x27DA0
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 1294)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ CalculateCamera()
{ // line 3, offset 0x27da0
    struct ITEM_INFO *item; // register $18
    short *bounds; // register $19
    short tilt; // register $7
    short change; // register $16
    long shift; // register $17
    long fixed_camera; // register $21
    long y; // register $20
    long gotit; // register $5
    { // line 213, offset 0x2830c
        struct OBJECT_VECTOR *fixed; // register $4
        struct PHD_VECTOR v; // stack offset -48
    } // line 226, offset 0x28370
} // line 301, offset 0x28610
/*
 * Offset 0x28634
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 1598)
 * Stack frame base $29, size 64
 */
long /*reg $31*/ CameraCollisionBounds(struct GAME_VECTOR *ideal /*reg $22*/, long push /*reg $23*/, long yfirst /*reg $30*/)
{ // line 1, offset 0x28634
    struct FLOOR_INFO *floor; // register $18
    long wx; // register $20
    long wy; // register $19
    long wz; // register $21
    long h; // register $17
    long c; // register $3
    short room_number; // stack offset -48
} // line 88, offset 0x28b5c
/*
 * Offset 0x28B5C
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 1688)
 * Stack frame base $29, size 72
 */
long /*reg $31*/ mgLOS(struct GAME_VECTOR *start /*reg $4*/, struct GAME_VECTOR *target /*reg $30*/, long push /*sp 8*/)
{ // line 1, offset 0x28b5c
    struct FLOOR_INFO *floor; // register $16
    long x; // register $19
    long y; // register $17
    long z; // register $18
    long h; // register $16
    long c; // register $3
    long cdiff; // register $2
    long hdiff; // register $2
    long dx; // register $22
    long dy; // register $21
    long dz; // register $20
    long lp; // register $23
    long clipped; // stack offset -52
    long nc; // stack offset -48
    short room_number; // stack offset -54
    short room_number2; // stack offset -56
} // line 84, offset 0x28d4c
/*
 * Offset 0x28D4C
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 1777)
 * Stack frame base $29, size 128
 */
void /*reg $31*/ BinocularCamera(struct ITEM_INFO *item /*reg $4*/)
{ // line 4, offset 0x28d4c
    struct PHD_VECTOR pos1; // stack offset -96
    struct PHD_VECTOR pos3; // stack offset -80
    struct PHD_VECTOR Soffset; // stack offset -64
    struct PHD_VECTOR Eoffset; // stack offset -48
    long shake; // register $3
    long speed; // register $6
    long c; // register $4
    short room_number; // stack offset -32
    short hxrot; // register $17
    short hyrot; // register $16
    long BinocStep; // register $4
    long pit; // register $6
    { // line 114, offset 0x29098
        long rndval; // register $16
    } // line 123, offset 0x29138
    { // line 190, offset 0x29308
        char Fire; // register $18
        short *ammo; // register $17
    } // line 296, offset 0x29584
} // line 311, offset 0x295f0
/*
 * Offset 0x2960C
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 2090)
 * Stack frame base $29, size 72
 */
void /*reg $31*/ LaraTorch(struct PHD_VECTOR *Soffset /*reg $2*/, struct PHD_VECTOR *Eoffset /*reg $3*/, short yrot /*reg $6*/, long brightness /*reg $16*/)
{ // line 1, offset 0x2960c
    struct GAME_VECTOR s; // stack offset -40
    struct GAME_VECTOR d; // stack offset -24
    long dx; // register $2
    long dy; // register $5
    long dz; // register $4
    long radius; // register $7
} // line 45, offset 0x2972c
/*
 * Offset 0x2973C
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 2137)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ ConfirmCameraTargetPos()
{ // line 2, offset 0x2973c
    struct PHD_VECTOR pos; // stack offset -48
    struct FLOOR_INFO *floor; // register $18
    short room_number; // stack offset -32
    long wx; // register $17
    long wy; // register $19
    long wz; // register $16
    long c; // register $3
    long h; // register $16
} // line 36, offset 0x29890
/*
 * Offset 0x29890
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 2175)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ UpdateCameraElevation()
{ // line 2, offset 0x29890
    struct PHD_VECTOR pos; // stack offset -40
    struct PHD_VECTOR pos1; // stack offset -24
} // line 20, offset 0x29954
/*
 * Offset 0x29954
 * C:\Projects2\Tomb5\GAME\CAMERA.C (line 2197)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ ScreenShake(struct ITEM_INFO *item /*reg $4*/, short MaxVal /*reg $17*/, short MaxDist /*reg $16*/)
{ // line 1, offset 0x29954
    long dx; // register $3
    long dy; // register $3
    long dz; // register $4
} // line 19, offset 0x29a44
extern long BinocularRange; // offset 0xA0758
extern long BinocularOn; // offset 0xA075C
extern long BinocularOldCamera; // offset 0xA0760
extern long LaserSight; // offset 0xA0764
extern long InfraRed; // offset 0xA0768
extern char SniperCount; // offset 0xA0744
extern char SniperCamActive; // offset 0xA0745
extern long ExittingBinos; // offset 0xA0748
extern long TooFarCount; // offset 0xA074C
extern long CombatShift; // offset 0xA0750
extern unsigned char camerasnaps; // offset 0xA0754
extern unsigned char TargetSnaps; // offset 0xA0755
extern char TLFlag; // offset 0xA076C
extern char LSHKShotsFired; // offset 0xA076D
extern char LSHKTimer; // offset 0xA076E
extern struct CAMERA_INFO camera;
extern char UseForcedFixedCamera; // offset 0xA2388
extern struct GAME_VECTOR ForcedFixedCamera;
extern long NumFixedCameras; // offset 0xA2434
extern int number_cameras; // offset 0xA2344
extern struct PHD_VECTOR CamOldPos;
extern struct SHATTER_ITEM ShatterItem;
extern struct GAME_VECTOR static_lookcamp;
extern struct GAME_VECTOR static_lookcamt;
extern struct OLD_CAMERA old_cam;
extern struct GAME_VECTOR last_ideal;
extern struct GAME_VECTOR last_target;
/*
 * Offset 0x29A44
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 779)
 * Stack frame base $29, size 128
 */
void /*reg $31*/ LaraBaddieCollision(struct ITEM_INFO *laraitem /*reg $19*/, struct COLL_INFO *coll /*reg $22*/)
{ // line 1, offset 0x29a44
    struct room_info *r; // register $3
    struct MESH_INFO *mesh; // register $16
    struct ITEM_INFO *item; // register $6
    struct object_info *object; // register $2
    struct static_info *sinfo; // register $5
    struct PHD_3DPOS pos; // stack offset -112
    int i; // register $6
    int j; // register $18
    int x; // register $7
    int y; // register $6
    int z; // register $4
    short roomies[21]; // stack offset -88
    short numroom; // register $20
    short *door; // register $7
    short *bounds; // register $17
    short item_num; // register $8
    short nex; // register $16
    { // line 24, offset 0x29af8
        int lp; // register $3
    } // line 32, offset 0x29b68
} // line 102, offset 0x29de0
/*
 * Offset 0x29E10
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 886)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ CreatureCollision(short item_num /*reg $4*/, struct ITEM_INFO *laraitem /*reg $20*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x29e10
    struct ITEM_INFO *item; // register $16
    { // line 22, offset 0x29edc
        short *bounds; // register $2
        int x; // register $19
        int z; // register $18
        int rx; // register $4
        int rz; // register $3
        int c; // register $16
        int s; // register $17
        { // line 39, offset 0x29fc0
        } // line 47, offset 0x2a018
    } // line 48, offset 0x2a018
} // line 50, offset 0x2a018
/*
 * Offset 0x2A03C
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 978)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ AIPickupCollision(short item_num /*reg $4*/, struct ITEM_INFO *laraitem /*reg $5*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x2a03c
    struct ITEM_INFO *item; // register $3
} // line 5, offset 0x2a098
/*
 * Offset 0x2A098
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 988)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ TrapCollision(short item_num /*reg $16*/, struct ITEM_INFO *laraitem /*reg $18*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x2a098
    struct ITEM_INFO *item; // register $4
} // line 15, offset 0x2a128
/*
 * Offset 0x2A140
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 1161)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ TestBoundsCollideStatic(short *bounds /*reg $16*/, struct PHD_3DPOS *pos /*reg $17*/, long radius /*reg $18*/)
{ // line 1, offset 0x2a140
    long c; // register $6
    long s; // register $4
    long rx; // register $8
    long rz; // register $5
    long x; // register $7
    long z; // register $2
    short *larabounds; // register $6
    long minx; // register $2
    long maxx; // register $7
    long minz; // register $4
    long maxz; // register $3
} // line 33, offset 0x2a2d8
/*
 * Offset 0x2A2D8
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 1196)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ ItemPushLaraStatic(struct ITEM_INFO *laraitem /*reg $18*/, short *bounds /*reg $5*/, struct PHD_3DPOS *pos /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x2a2d8
    int x; // register $6
    int z; // register $10
    int rx; // register $8
    int rz; // register $4
    int c; // register $15
    int s; // register $14
    int minx; // register $12
    int maxx; // register $11
    int minz; // register $13
    int maxz; // register $7
    int l; // register $3
    int r; // register $5
    int t; // register $6
    int b; // register $7
    int ax; // register $3
    int az; // register $4
} // line 87, offset 0x2a5ec
/*
 * Offset 0x2A5EC
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 1602)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ GenericSphereBoxCollision(short item_num /*reg $4*/, struct ITEM_INFO *laraitem /*reg $20*/, struct COLL_INFO *coll /*sp 8*/)
{ // line 1, offset 0x2a5ec
    struct ITEM_INFO *item; // register $18
    struct SPHERE *sptr; // register $23
    long TouchBits; // register $22
    long DeadlyBits; // register $21
    long dx; // register $16
    long dy; // register $19
    long dz; // register $17
} // line 78, offset 0x2a808
/*
 * Offset 0x2A838
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 2014)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ TriggerLaraBlood()
{ // line 2, offset 0x2a838
    struct PHD_VECTOR vec; // stack offset -32
    short node; // register $18
    short lp; // register $16
} // line 19, offset 0x2a940
/*
 * Offset 0x2A940
 * C:\Projects2\Tomb5\GAME\COLLIDE.C (line 2035)
 * Stack frame base $29, size 104
 */
void /*reg $31*/ TestForObjectOnLedge(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $19*/)
{ // line 1, offset 0x2a940
    struct GAME_VECTOR s; // stack offset -88
    struct GAME_VECTOR d; // stack offset -72
    struct MESH_INFO *StaticMesh; // stack offset -40
    struct PHD_VECTOR v; // stack offset -56
    long lp; // register $16
} // line 33, offset 0x2aa88
extern char LM[15];
extern short GlobalCollisionBounds[6];
extern long xfront; // offset 0xA2498
extern long zfront; // offset 0xA2494
/*
 * Offset 0x418E8
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 76)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitialiseItemArray(int numitems /*reg $4*/)
{ // line 1, offset 0x418e8
    int i; // register $6
    struct ITEM_INFO *item; // register $3
} // line 19, offset 0x41950
/*
 * Offset 0x41950
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 103)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ KillItem(short item_num /*reg $16*/)
{ // line 1, offset 0x41950
    short linknum; // register $5
    struct ITEM_INFO *item; // register $8
} // line 63, offset 0x41b9c
/*
 * Offset 0x41BAC
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 173)
 * Stack frame base $29, size 0
 */
short /*reg $31*/ CreateItem()
{ // line 2, offset 0x41bac
    short item_num; // register $5
} // line 19, offset 0x41be4
/*
 * Offset 0x41BEC
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 199)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ InitialiseItem(short item_num /*reg $17*/)
{ // line 1, offset 0x41bec
    struct ITEM_INFO *item; // register $16
    struct room_info *r; // register $5
    struct FLOOR_INFO *floor; // register $4
} // line 102, offset 0x41e98
/*
 * Offset 0x41E98
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 308)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ RemoveActiveItem(short item_num /*reg $4*/)
{ // line 1, offset 0x41e98
    short linknum; // register $3
} // line 23, offset 0x41f40
/*
 * Offset 0x41F48
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 336)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ RemoveDrawnItem(short item_num /*reg $5*/)
{ // line 1, offset 0x41f48
    short linknum; // register $3
    struct ITEM_INFO *item; // register $6
} // line 22, offset 0x41fe4
/*
 * Offset 0x41FEC
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 364)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ AddActiveItem(short item_num /*reg $6*/)
{ // line 1, offset 0x41fec
    struct ITEM_INFO *item; // register $5
} // line 27, offset 0x42074
/*
 * Offset 0x4207C
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 498)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ InitialiseFXArray(int allocmem /*reg $4*/)
{ // line 2, offset 0x4207c
    int i; // register $4
    struct FX_INFO *fx; // register $3
} // line 14, offset 0x420e0
/*
 * Offset 0x420E0
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 517)
 * Stack frame base $29, size 0
 */
short /*reg $31*/ CreateEffect(short room_num /*reg $4*/)
{ // line 1, offset 0x420e0
    struct room_info *r; // register $5
    struct FX_INFO *fx; // register $4
    short fx_num; // register $7
} // line 31, offset 0x42170
/*
 * Offset 0x42178
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 554)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ KillEffect(short fx_num /*reg $16*/)
{ // line 1, offset 0x42178
    short linknum; // register $4
    struct FX_INFO *fx; // register $5
} // line 47, offset 0x42310
/*
 * Offset 0x42320
 * C:\Projects2\Tomb5\GAME\ITEMS.C (line 606)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ EffectNewRoom(short fx_num /*reg $6*/, short room_number /*reg $9*/)
{ // line 1, offset 0x42320
    short linknum; // register $3
    struct room_info *r; // register $4
    struct FX_INFO *fx; // register $8
} // line 35, offset 0x4243c
extern int level_items; // offset 0xA0B50
extern short next_item_free; // offset 0xA37B0
extern short next_item_active; // offset 0xA37A8
extern short GlobalPulleyFrigItem; // offset 0xA37AC
/*
 * Offset 0x366B0
 * C:\Projects2\Tomb5\GAME\DEBRIS.C (line 86)
 * Stack frame base $29, size 0
 */
long /*reg $31*/ GetFreeDebris()
{ // line 2, offset 0x366b0
    struct DEBRIS_STRUCT *dptr; // register $5
    long lp; // register $6
    long eldestage; // register $7
    long eldestfree; // register $8
    long free; // register $4
} // line 38, offset 0x3675c
/*
 * Offset 0x3675C
 * C:\Projects2\Tomb5\GAME\DEBRIS.C (line 157)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ TriggerDebris(struct GAME_VECTOR *pos /*reg $20*/, void *TextInfo /*reg $21*/, short *Offsets /*reg $19*/, long *Vels /*reg $17*/, int rgb /*sp 16*/)
{ // line 1, offset 0x3675c
    struct DEBRIS_STRUCT *dptr; // register $16
} // line 87, offset 0x36a3c
/*
 * Offset 0x36A3C
 * C:\Projects2\Tomb5\GAME\DEBRIS.C (line 412)
 * Stack frame base $29, size 200
 */
void /*reg $31*/ ShatterObject(struct SHATTER_ITEM *ShatterItem /*sp 0*/, struct MESH_INFO *StaticMesh /*reg $5*/, short Num /*sp -100*/, short RoomNumber /*sp -96*/, int NoXZVel /*sp 16*/)
{ // line 1, offset 0x36a3c
    struct PSXTEXTI *textinfo; // register $8
    struct GAME_VECTOR Pos; // stack offset -176
    struct PHD_VECTOR TPos; // stack offset -160
    struct PHD_VECTOR VPos; // stack offset -144
    short *meshp; // register $6
    unsigned long *meshl; // register $30
    short *mesh; // register $3
    short *meshv; // register $16
    long nverts; // register $17
    long ntris; // stack offset -92
    long nquads; // stack offset -88
    long lp; // register $23
    short RotY; // register $23
    short *RotVerts; // register $25
    short *Offsets; // register $20
    long *Vels; // register $22
    long TotX; // register $18
    long TotY; // register $19
    long TotZ; // register $21
    short rgb; // stack offset -84
    short rnd; // stack offset -80
    short vsmall; // stack offset -76
    { // line 94, offset 0x36c24
        struct SVECTOR src; // stack offset -128
        struct PHD_VECTOR dest; // stack offset -120
        long flag; // stack offset -104
    } // line 99, offset 0x36c24
    { // line 160, offset 0x36d3c
        long face; // register $4
        unsigned short v1; // register $16
        unsigned short v2; // register $18
        unsigned short v3; // register $19
        unsigned short ti; // stack offset -72
        unsigned long textinfos; // stack offset -68
        unsigned short frgb; // register $21
    } // line 295, offset 0x370d0
    { // line 313, offset 0x37100
        long face; // register $2
        unsigned short v1; // register $16
        unsigned short v2; // register $18
        unsigned short v3; // register $19
        unsigned long textinfos; // stack offset -60
        unsigned short frgb; // register $21
    } // line 440, offset 0x37480
} // line 442, offset 0x374b8
extern long next_debris; // offset 0xA0AA8
extern short DebrisFlags; // offset 0xA0AA4
extern struct DEBRIS_STRUCT debris[128];
/*
 * Offset 0x374B8
 * C:\Projects2\Tomb5\GAME\SPOTCAM.C (line 156)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitSpotCamSequences()
{ // line 2, offset 0x374b8
    int s; // register $6
    int cc; // register $7
    int n; // register $5
    int ce; // register $8
} // line 34, offset 0x37554
/*
 * Offset 0x37554
 * C:\Projects2\Tomb5\GAME\SPOTCAM.C (line 209)
 * Stack frame base $29, size 40
 */
long /*reg $31*/ Spline(long x /*reg $19*/, long *knots /*reg $20*/, int nk /*reg $18*/)
{ // line 1, offset 0x37554
    int span; // register $17
    long *k; // register $17
    long c1; // register $18
    long c2; // register $16
} // line 29, offset 0x37648
/*
 * Offset 0x37648
 * C:\Projects2\Tomb5\GAME\SPOTCAM.C (line 298)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ InitialiseSpotCam(short Sequence /*reg $16*/)
{ // line 1, offset 0x37648
    struct SPOTCAM *s; // register $16
    int n; // register $10
    int i; // register $9
    int next_spline_camera; // register $9
    { // line 84, offset 0x3789c
        int c; // register $11
        { // line 90, offset 0x3789c
            int sp; // register $11
        } // line 90, offset 0x3789c
        { // line 1, offset 0x37960
            int sp; // register $11
            int cn; // register $9
        } // line 1, offset 0x37960
        { // line 105, offset 0x379f8
            int sp; // register $11
        } // line 105, offset 0x379f8
    } // line 105, offset 0x379f8
    { // line 116, offset 0x37ab0
        int cn; // register $9
    } // line 116, offset 0x37ab0
    { // line 1, offset 0x37b74
        int sp; // register $10
        int cn; // register $9
    } // line 1, offset 0x37b74
    { // line 155, offset 0x37cc8
        int cn; // register $10
    } // line 155, offset 0x37cc8
    { // line 1, offset 0x37dec
        int cn; // register $10
    } // line 1, offset 0x37e90
} // line 205, offset 0x37eac
/*
 * Offset 0x37ED0
 * C:\Projects2\Tomb5\GAME\SPOTCAM.C (line 516)
 * Stack frame base $29, size 248
 */
void /*reg $31*/ CalculateSpotCams()
{ // line 2, offset 0x37ed0
    long cpx; // stack offset -96
    long cpy; // stack offset -92
    long cpz; // stack offset -88
    long ctx; // stack offset -84
    long cty; // stack offset -80
    long ctz; // stack offset -76
    long cspeed; // stack offset -72
    long cfov; // stack offset -68
    long croll; // stack offset -64
    struct SPOTCAM *s; // stack offset -60
    short spline_cnt; // register $19
    int next_spline_camera; // register $16
    int n; // register $21
    static int bFirstLook; // offset 0x18
    long dx; // register $3
    long dy; // register $16
    long dz; // register $17
    { // line 76, offset 0x38114
        long cs; // register $22
        long sp; // register $18
        long cp; // register $30
        long clen; // register $20
        long tlen; // register $3
        long cx; // register $17
        long cy; // register $16
        long cz; // register $2
        long lx; // stack offset -56
        long lz; // stack offset -52
        long ly; // stack offset -48
        int i; // register $3
    } // line 142, offset 0x382c4
    { // line 1, offset 0x386ac
        { // line 1, offset 0x386ac
            int ctype; // register $16
        } // line 1, offset 0x38760
    } // line 1, offset 0x38760
    { // line 396, offset 0x38a50
        int sp; // register $21
        int cn; // register $16
    } // line 396, offset 0x38a50
    { // line 1, offset 0x38b04
        int sp; // register $21
        int cn; // register $16
    } // line 1, offset 0x38b04
    { // line 1, offset 0x38c2c
        int sp; // register $21
        int cn; // register $16
    } // line 1, offset 0x38c2c
    { // line 439, offset 0x38d68
        struct CAMERA_INFO Backup; // stack offset -216
        { // line 441, offset 0x38d68
            int cn; // register $3
        } // line 441, offset 0x38d68
        { // line 441, offset 0x38d68
        } // line 441, offset 0x38d68
    } // line 441, offset 0x38d68
    { // line 1, offset 0x38ff0
        { // line 1, offset 0x38ff0
            int ctype; // register $16
        } // line 1, offset 0x390a0
    } // line 1, offset 0x390a0
} // line 547, offset 0x39160
extern int bUseSpotCam; // offset 0xA0AB8
extern int bDisableLaraControl; // offset 0xA0ABC
extern int bTrackCamInit; // offset 0xA0AB0
extern char SCOverlay; // offset 0xA0AC0
extern char SCNoDrawLara; // offset 0xA0AC1
extern char SniperOverlay; // offset 0xA0AC2
extern short spotcam_timer; // offset 0xA0AAC
extern int bCheckTrigger; // offset 0xA0AB4
extern short LastSequence; // offset 0xA3344
extern short CurrentFov; // offset 0xA3350
extern short spotcam_loopcnt; // offset 0xA3560
extern short number_spotcams; // offset 0xA333C
extern struct SPOTCAM *SpotCam;
extern unsigned char CameraCnt[16];
extern unsigned char SpotRemap[16];
extern long current_spline_position; // offset 0xA343C
extern short LastFov; // offset 0xA361C
extern int CameraFade; // offset 0xA354C
extern int LaraHealth; // offset 0xA35AC
extern int LaraAir; // offset 0xA3618
extern long camera_xposition[18];
extern long camera_yposition[18];
extern long camera_zposition[18];
extern long camera_xtarget[18];
extern long camera_ytarget[18];
extern long camera_ztarget[18];
extern long camera_roll[18];
extern long camera_fov[18];
extern long camera_speed[18];
extern short current_spline_camera; // offset 0xA334C
extern short current_camera_cnt; // offset 0xA34FC
extern short current_sequence; // offset 0xA3340
extern short first_camera; // offset 0xA3338
extern short last_camera; // offset 0xA3334
extern int spline_from_camera; // offset 0xA3348
extern int spline_to_camera; // offset 0xA355C
extern struct PHD_VECTOR InitialCameraPosition;
extern struct PHD_VECTOR InitialCameraTarget;
extern struct PHD_VECTOR LaraFixedPosition;
extern short InitialCameraRoom; // offset 0xA3548
extern struct QUAKE_CAM quakecam;
/*
 * Offset 0x32D8C
 * C:\Projects2\Tomb5\GAME\EFFECT2.C (line 95)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ DetatchSpark(long num /*reg $10*/, long type /*reg $5*/)
{ // line 1, offset 0x32d8c
    long lp; // register $11
    struct SPARKS *sptr; // register $6
    struct FX_INFO *fx; // register $9
    struct ITEM_INFO *item; // register $8
} // line 31, offset 0x32eac
/*
 * Offset 0x32EAC
 * C:\Projects2\Tomb5\GAME\EFFECT2.C (line 1151)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ TriggerSuperJetFlame(struct ITEM_INFO *item /*reg $18*/, long yvel /*reg $16*/, long deadly /*reg $21*/)
{ // line 1, offset 0x32eac
    long size; // register $3
    struct SPARKS *sptr; // register $16
    long dx; // register $3
    long dz; // register $4
    long dy; // register $17
} // line 70, offset 0x33190
/*
 * Offset 0x331B4
 * C:\Projects2\Tomb5\GAME\EFFECT2.C (line 1508)
 * Stack frame base $29, size 72
 */
void /*reg $31*/ TriggerWaterfallMist(long x /*sp 0*/, long y /*reg $23*/, long z /*sp 8*/, long angle /*reg $7*/)
{ // line 1, offset 0x331b4
    long xsize; // register $16
    long zsize; // register $18
    long dist; // register $16
    long lp; // register $20
    struct SPARKS *sptr; // register $17
} // line 86, offset 0x335b8
/*
 * Offset 0x335B8
 * C:\Projects2\Tomb5\GAME\EFFECT2.C (line 1706)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ TriggerDartSmoke(long x /*reg $19*/, long y /*reg $21*/, long z /*reg $20*/, long xv /*reg $17*/, long zv /*sp 16*/, long hit /*sp 20*/)
{ // line 1, offset 0x335b8
    long size; // register $17
    struct SPARKS *sptr; // register $16
    long dx; // register $2
    long dz; // register $4
} // line 82, offset 0x33874
/*
 * Offset 0x3389C
 * C:\Projects2\Tomb5\GAME\EFFECT2.C (line 1790)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ KillAllCurrentItems(short item_number /*reg $4*/)
/*
 * Offset 0x338AC
 * C:\Projects2\Tomb5\GAME\EFFECT2.C (line 1795)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ KillEverything()
/*
 * Offset 0x338B8
 * C:\Projects2\Tomb5\GAME\EFFECT2.C (line 2052)
 * Stack frame base $29, size 88
 */
void /*reg $31*/ ControlSmokeEmitter(short item_number /*reg $4*/)
{ // line 1, offset 0x338b8
    struct ITEM_INFO *item; // register $19
    struct SPARKS *sptr; // register $18
    long size; // register $16
    long dx; // register $20
    long dz; // register $5
    long normal; // register $21
    { // line 18, offset 0x339a4
        struct PHD_3DPOS pos; // stack offset -56
    } // line 31, offset 0x33a68
} // line 254, offset 0x342ac
/*
 * Offset 0x342D0
 * C:\Projects2\Tomb5\GAME\EFFECT2.C (line 2308)
 * Stack frame base $29, size 96
 */
void /*reg $31*/ ControlEnemyMissile(short fx_number /*reg $21*/)
{ // line 1, offset 0x342d0
    struct FX_INFO *fx; // register $20
    struct FLOOR_INFO *floor; // register $16
    short angles[2]; // stack offset -64
    struct PHD_VECTOR pos; // stack offset -56
    long speed; // register $8
    long ox; // register $18
    long oy; // register $19
    long oz; // register $17
    long h; // register $16
    long c; // register $2
    short room_number; // stack offset -40
    short max_turn; // register $6
} // line 187, offset 0x34a68
extern long wibble; // offset 0xA09D8
extern long SplashCount; // offset 0xA09E0
extern long KillEverythingFlag; // offset 0xA09DC
extern long next_spark; // offset 0xA09E4
extern unsigned char TES_extra_tab[6];
extern long DeadlyBounds[6];
extern struct SPLASH_STRUCT splashes[4];
extern struct RIPPLE_STRUCT ripples[32];
extern struct DYNAMIC dynamics[64];
extern struct SPLASH_SETUP splash_setup;
extern struct SP_DYNAMIC spark_dynamics[8];
extern long SmokeWeapon; // offset 0xA31B4
extern long SmokeWindX; // offset 0xA31AC
extern long SmokeWindZ; // offset 0xA31B0
extern long SmokeCountL; // offset 0xA31BC
extern long SmokeCountR; // offset 0xA31B8
extern struct SPARKS spark[128];
/*
 * Offset 0x34A8C
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 2146)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SetFadeClip(short height /*reg $4*/, short speed /*reg $5*/)
/*
 * Offset 0x34A9C
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 2152)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ UpdateFadeClip()
/*
 * Offset 0x34B14
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 2199)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SetScreenFadeOut(long fadespeed /*reg $4*/, long fadeback /*reg $5*/)
/*
 * Offset 0x34B48
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 2212)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SetScreenFadeIn(long fadespeed /*reg $4*/)
/*
 * Offset 0x34B78
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 2225)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ Fade()
{ // line 2, offset 0x34b78
    int oldfucker; // register $5
} // line 39, offset 0x34c84
/*
 * Offset 0x34C94
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 3003)
 * Stack frame base $29, size 64
 */
int /*reg $31*/ ExplodingDeath2(short item_number /*reg $22*/, long mesh_bits /*sp 4*/, short Flags /*reg $21*/)
{ // line 1, offset 0x34c94
    struct ITEM_INFO *item; // register $18
    struct object_info *object; // register $23
    struct FX_INFO *fx; // register $16
    long *bone; // register $20
    long bit; // register $30
    short *rotation; // stack offset -48
    short *frame; // register $16
    short *extra_rotation; // register $19
    short fx_number; // register $3
    int i; // register $17
    int poppush; // register $16
} // line 175, offset 0x3521c
/*
 * Offset 0x3521C
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 3893)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ TriggerLightningGlow(long x /*reg $18*/, long y /*reg $19*/, long z /*reg $20*/, long rgb /*reg $17*/)
{ // line 1, offset 0x3521c
    long size; // register $2
    struct SPARKS *sptr; // register $16
} // line 35, offset 0x3532c
/*
 * Offset 0x3532C
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 3957)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ DrawLensFlares(struct ITEM_INFO *item /*reg $4*/)
{ // line 1, offset 0x3532c
    struct GAME_VECTOR pos; // stack offset -24
} // line 9, offset 0x35378
/*
 * Offset 0x35378
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 3980)
 * Stack frame base $29, size 112
 */
void /*reg $31*/ SetUpLensFlare(long x /*reg $9*/, long y /*reg $23*/, long z /*reg $30*/, struct GAME_VECTOR *bulb /*reg $13*/)
{ // line 1, offset 0x35378
    long dx; // register $22
    long dy; // register $21
    long dz; // register $20
    long r; // register $19
    long rx; // register $16
    long ry; // register $17
    long rz; // register $18
    short room_number; // register $14
    short flaredraw; // stack offset -64
    { // line 65, offset 0x356cc
        struct GAME_VECTOR s; // stack offset -96
        struct GAME_VECTOR d; // stack offset -80
    } // line 78, offset 0x3575c
} // line 114, offset 0x35864
/*
 * Offset 0x35894
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 4235)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ DrawWeaponMissile(struct ITEM_INFO *item /*reg $16*/)
/*
 * Offset 0x35934
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 4257)
 * Stack frame base $29, size 104
 */
void /*reg $31*/ ControlTeleporter(short item_number /*reg $16*/)
{ // line 1, offset 0x35934
    struct ITEM_INFO *item; // register $19
    short room_number; // stack offset -40
    { // line 15, offset 0x359c8
        struct PHD_VECTOR s; // stack offset -72
        struct PHD_VECTOR d; // stack offset -56
        long r; // register $18
        long g; // register $20
        long b; // register $21
        { // line 77, offset 0x35d3c
            long size; // register $2
            struct SPARKS *sptr; // register $16
        } // line 77, offset 0x35d3c
    } // line 121, offset 0x35fb4
} // line 183, offset 0x361b4
/*
 * Offset 0x361D8
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 4446)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ ControlElectricFence(short item_number /*reg $4*/)
{ // line 1, offset 0x361d8
    struct ITEM_INFO *item; // register $17
    long x; // register $16
    long tx; // register $19
    long ty; // register $21
    long tz; // register $18
    long xand; // register $22
    long zand; // register $23
    { // line 73, offset 0x36354
        long lp; // register $20
        long cnt; // register $30
    } // line 97, offset 0x36468
} // line 140, offset 0x36468
/*
 * Offset 0x36498
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 4588)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ TriggerFenceSparks(long x /*reg $17*/, long y /*reg $18*/, long z /*reg $19*/, long kill /*reg $16*/, long crane /*sp 16*/)
{ // line 1, offset 0x36498
    struct SPARKS *sptr; // register $20
} // line 36, offset 0x3660c
/*
 * Offset 0x3660C
 * C:\Projects2\Tomb5\GAME\TOMB4FX.C (line 4639)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ trig_actor_gunflash(struct MATRIX3D *matrix /*reg $18*/, struct PHD_VECTOR *pos /*reg $17*/)
{ // line 1, offset 0x3660c
    struct GUNFLASH_STRUCT *fx; // register $16
    long lp; // register $3
} // line 33, offset 0x36698
extern char flare_table[121];
extern char LaserSightActive; // offset 0xA09FC
extern char LaserSightCol; // offset 0xA09FD
extern long next_fire_spark; // offset 0xA0A0C
extern long next_smoke_spark; // offset 0xA0A10
extern long next_gunshell; // offset 0xA0A18
extern long next_bubble; // offset 0xA0A1C
extern long next_drip; // offset 0xA0A20
extern long next_blood; // offset 0xA0A14
extern struct NODEOFFSET_INFO NodeOffsets[16];
extern short FlashFadeR; // offset 0xA0A04
extern short FlashFadeG; // offset 0xA0A06
extern short FlashFadeB; // offset 0xA0A08
extern short FlashFader; // offset 0xA0A0A
extern short ScreenFade; // offset 0xA09F0
extern short dScreenFade; // offset 0xA09F2
extern short ScreenFadeSpeed; // offset 0xA09F4
extern short ScreenFadeBack; // offset 0xA09F6
extern short ScreenFadedOut; // offset 0xA09F8
extern short ScreenFading; // offset 0xA09FA
extern short FadeScreenHeight; // offset 0xA09FE
extern short DestFadeScreenHeight; // offset 0xA0A00
extern short FadeClipSpeed; // offset 0xA0A02
extern long LaserSightX; // offset 0xA3268
extern long LaserSightY; // offset 0xA326C
extern long LaserSightZ; // offset 0xA3270
extern struct GUNFLASH_STRUCT Gunflashes[4];
extern struct PHD_VECTOR NodeVectors[16];
extern struct FIRE_SPARKS fire_spark[20];
extern struct SMOKE_SPARKS smoke_spark[32];
extern struct GUNSHELL_STRUCT Gunshells[24];
extern struct BLOOD_STRUCT blood[32];
extern struct BUBBLE_STRUCT Bubbles[40];
extern struct DRIP_STRUCT Drips[32];
extern struct SHOCKWAVE_STRUCT ShockWaves[16];
extern struct FIRE_LIST fires[32];
/*
 * Offset 0x39190
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 112)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ SoundEffects()
{ // line 2, offset 0x39190
    struct OBJECT_VECTOR *sound; // register $16
    int i; // register $17
} // line 43, offset 0x39294
/*
 * Offset 0x39294
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 335)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ WaterFall(short item_number /*reg $4*/)
{ // line 1, offset 0x39294
    struct ITEM_INFO *item; // register $16
    long x; // register $8
    long z; // register $6
    long ang; // register $7
} // line 27, offset 0x393cc
/*
 * Offset 0x393CC
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 369)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ void_effect(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x393D4
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 375)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ finish_level_effect(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x393F4
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 383)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ turn180_effect(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39410
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 392)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ floor_shake_effect(struct ITEM_INFO *item /*reg $4*/)
{ // line 1, offset 0x39410
    int x; // register $7
    int y; // register $6
    int z; // register $4
    int dist; // register $4
} // line 12, offset 0x39500
/*
 * Offset 0x39500
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 424)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ SoundFlipEffect(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39534
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 430)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ RubbleFX(struct ITEM_INFO *item /*reg $4*/)
{ // line 2, offset 0x39534
    struct ITEM_INFO *eq; // register $16
} // line 17, offset 0x395e0
/*
 * Offset 0x395E0
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 449)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ PoseidonSFX(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39610
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 456)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ ActivateCamera(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39624
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 461)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ ActivateKey(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39638
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 466)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SwapCrowbar(struct ITEM_INFO *item /*reg $4*/)
{ // line 2, offset 0x39638
    short *tmp; // register $3
} // line 10, offset 0x39694
/*
 * Offset 0x39694
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 478)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ExplosionFX(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x396D0
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 486)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ LaraLocation(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39710
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 494)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ LaraLocationPad(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39738
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 500)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ ResetTest(struct ITEM_INFO *item /*reg $4*/)
{ // line 2, offset 0x39738
    short item_num; // register $17
    short room_num; // register $9
    struct ITEM_INFO *target_item; // register $16
} // line 39, offset 0x39938
/*
 * Offset 0x39938
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 541)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ KillActiveBaddies(struct ITEM_INFO *item /*reg $19*/)
{ // line 1, offset 0x39938
    short item_num; // register $17
    struct ITEM_INFO *target_item; // register $16
} // line 20, offset 0x39a18
/*
 * Offset 0x39A18
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 567)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_hands_free(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39A24
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 612)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ shoot_right_gun(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39A34
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 617)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ shoot_left_gun(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39A44
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 664)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SetFog(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39A58
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 763)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ invisibility_on(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39A6C
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 768)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ invisibility_off(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39A84
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 773)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ reset_hair(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39AA4
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 792)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ClearSpidersPatch(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39AD8
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 810)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_1(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39B24
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 820)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_2(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39B74
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 830)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_3(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39BC4
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 840)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_4(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39C14
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 850)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_5(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39C64
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 860)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_6(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39CB4
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 870)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_7(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39D04
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 880)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_8(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39D54
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 890)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_9(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39DA4
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 900)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_10(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39DF0
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 910)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_11(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x39E3C
 * C:\Projects2\Tomb5\GAME\EFFECTS.C (line 920)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TL_12(struct ITEM_INFO *item /*reg $4*/)
extern long wf; // offset 0xA0AC8
extern short next_fx_free; // offset 0xA3668
extern short next_fx_active; // offset 0xA366C
extern int number_sound_effects; // offset 0xA3670
extern struct OBJECT_VECTOR *sound_effects;
extern struct FX_INFO *effects;
/*
 * Offset 0x39E88
 * C:\Projects2\Tomb5\GAME\FLMTORCH.C (line 87)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ TriggerTorchFlame(short item_number /*reg $17*/, long Node /*reg $18*/)
{ // line 1, offset 0x39e88
    long size; // register $2
    struct SPARKS *sptr; // register $16
} // line 47, offset 0x3a068
/*
 * Offset 0x3A068
 * C:\Projects2\Tomb5\GAME\FLMTORCH.C (line 137)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ FireCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x3a068
    struct ITEM_INFO *item; // register $16
    { // line 15, offset 0x3a160
        short rot; // register $19
    } // line 69, offset 0x3a2ac
} // line 92, offset 0x3a3cc
/*
 * Offset 0x3A3CC
 * C:\Projects2\Tomb5\GAME\FLMTORCH.C (line 233)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ DoFlameTorch()
{ // line 2, offset 0x3a3cc
    { // line 111, offset 0x3a724
        struct PHD_VECTOR pos; // stack offset -32
    } // line 127, offset 0x3a81c
} // line 128, offset 0x3a830
/*
 * Offset 0x3A830
 * C:\Projects2\Tomb5\GAME\FLMTORCH.C (line 364)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ GetFlameTorch()
/*
 * Offset 0x3A8F4
 * C:\Projects2\Tomb5\GAME\FLMTORCH.C (line 382)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ FlameTorchControl(short item_number /*reg $19*/)
{ // line 1, offset 0x3a8f4
    struct ITEM_INFO **itemlist; // register $16
    struct MESH_INFO **meshlist; // register $2
    long x; // register $9
    long y; // register $6
    long z; // register $7
    long xv; // register $11
    long yv; // register $2
    long zv; // register $10
    struct ITEM_INFO *item; // register $18
    { // line 61, offset 0x3ab50
        struct PHD_3DPOS pos; // stack offset -48
        struct static_info *sinfo; // register $5
    } // line 70, offset 0x3aba8
} // line 86, offset 0x3ac70
static short FireBounds[12]; // offset 0xA0ACC
extern short torchroom; // offset 0xA0AE4
/*
 * Offset 0x3AC70
 * C:\Projects2\Tomb5\GAME\HAIR.C (line 67)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitialiseHair()
{ // line 2, offset 0x3ac70
    int i; // register $7
    int j; // register $6
    long *bone; // register $5
    struct HAIR_STRUCT *hptr; // register $4
} // line 28, offset 0x3ad2c
extern int hair_wind; // offset 0xA0AE8
extern int hair_wind_angle; // offset 0xA0AEC
extern int hair_dwind_angle; // offset 0xA0AF0
extern int first_hair[2];
extern struct HAIR_STRUCT hairs[2][7];
/*
 * Offset 0x3AD2C
 * C:\Projects2\Tomb5\GAME\HEALTH.C (line 98)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ FlashIt()
{ // line 2, offset 0x3ad2c
    static int flash_state; // offset 0x4
    static int flash_count; // offset 0x8
} // line 13, offset 0x3ad68
/*
 * Offset 0x3AD68
 * C:\Projects2\Tomb5\GAME\HEALTH.C (line 116)
 * Stack frame base $29, size 216
 */
void /*reg $31*/ DrawGameInfo(int timed /*reg $4*/)
{ // line 2, offset 0x3ad68
    int flash_state; // register $16
    { // line 17, offset 0x3adac
        char sbuf[80]; // stack offset -192
    } // line 19, offset 0x3adac
    { // line 53, offset 0x3af50
        char buf[80]; // stack offset -112
        int seconds; // register $19
    } // line 77, offset 0x3b0a0
} // line 79, offset 0x3b0a0
/*
 * Offset 0x3B0C8
 * C:\Projects2\Tomb5\GAME\HEALTH.C (line 200)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ DrawHealthBar(int flash_state /*reg $4*/)
{ // line 1, offset 0x3b0c8
    int hitpoints; // register $6
    static int old_hitpoints; // offset 0x30
} // line 55, offset 0x3b3cc
/*
 * Offset 0x3B3CC
 * C:\Projects2\Tomb5\GAME\HEALTH.C (line 260)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ DrawAirBar(int flash_state /*reg $6*/)
{ // line 1, offset 0x3b3cc
    int air; // register $3
} // line 32, offset 0x3b570
/*
 * Offset 0x3B580
 * C:\Projects2\Tomb5\GAME\HEALTH.C (line 323)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitialisePickUpDisplay()
{ // line 2, offset 0x3b580
    int i; // register $3
} // line 9, offset 0x3b5b8
/*
 * Offset 0x3B5B8
 * C:\Projects2\Tomb5\GAME\HEALTH.C (line 340)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ DrawPickups(int timed /*reg $4*/)
{ // line 2, offset 0x3b5b8
    struct DISPLAYPU *pu; // register $4
    long lp; // register $6
    long dx; // register $2
} // line 50, offset 0x3b6e4
/*
 * Offset 0x3B6F4
 * C:\Projects2\Tomb5\GAME\HEALTH.C (line 396)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ AddDisplayPickup(short object_number /*reg $4*/)
{ // line 1, offset 0x3b6f4
    struct DISPLAYPU *pu; // register $3
    long lp; // register $5
} // line 22, offset 0x3b7a8
extern int health_bar_timer; // offset 0xA0AF4
extern char PoisonFlag; // offset 0xA36B0
extern struct DISPLAYPU pickups[8];
extern short PickupX; // offset 0xA3684
extern short PickupY; // offset 0xA3688
extern short PickupVel; // offset 0xA36AC
extern short CurrentPickup; // offset 0xA36B4
/*
 * Offset 0x3B7A8
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 659)
 * Stack frame base $29, size 56
 */
int /*reg $31*/ S_CallInventory2()
{ // line 2, offset 0x3b7a8
    short flag; // register $18
    int return_value; // register $19
    { // line 291, offset 0x3bd3c
        int val; // register $16
    } // line 335, offset 0x3be20
    { // line 387, offset 0x3bf3c
        short room_number; // stack offset -32
        struct ITEM_INFO *item; // register $16
        int val; // register $5
    } // line 415, offset 0x3c000
} // line 421, offset 0x3c024
/*
 * Offset 0x3C024
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1118)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ init_new_inventry()
/*
 * Offset 0x3C224
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1201)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ do_debounced_joystick_poo()
/*
 * Offset 0x3C43C
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1315)
 * Stack frame base $29, size 208
 */
void /*reg $31*/ DrawThreeDeeObject2D(int x /*reg $21*/, int y /*reg $18*/, int num /*reg $6*/, int shade /*reg $20*/, int xrot /*sp 16*/, int yrot /*sp 20*/, int zrot /*sp 24*/, int bright /*sp 28*/, int overlay /*sp 32*/)
{ // line 1, offset 0x3c43c
    struct ITEM_INFO item; // stack offset -176
    struct INVOBJ *objme; // register $17
} // line 84, offset 0x3c6a0
/*
 * Offset 0x3C6A0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1409)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ DrawInventoryItemMe(struct ITEM_INFO *item /*reg $20*/, long shade /*reg $30*/, int overlay /*reg $23*/, int shagflag /*reg $16*/)
{ // line 1, offset 0x3c6a0
    struct ANIM_STRUCT *anim; // register $4
    struct object_info *object; // register $21
    long *bone; // register $17
    short *rotation1; // stack offset -48
    short **meshpp; // register $18
    short *frmptr; // register $19
    long i; // register $19
    long poppush; // register $16
    unsigned long bit; // register $22
} // line 179, offset 0x3c900
/*
 * Offset 0x3C900
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1593)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ go_and_load_game()
/*
 * Offset 0x3C920
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1601)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ go_and_save_game()
/*
 * Offset 0x3C940
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1614)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ construct_combine_object_list()
{ // line 2, offset 0x3c940
    int n; // register $16
} // line 76, offset 0x3cb90
/*
 * Offset 0x3CB90
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1693)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ insert_object_into_list_v2(int num /*reg $5*/)
/*
 * Offset 0x3CC80
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1714)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ construct_object_list()
{ // line 2, offset 0x3cc80
    int n; // register $16
} // line 215, offset 0x3d2c4
/*
 * Offset 0x3D2C4
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1931)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ insert_object_into_list(int num /*reg $4*/)
/*
 * Offset 0x3D350
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 1958)
 * Stack frame base $29, size 216
 */
void /*reg $31*/ draw_current_object_list(int ringnum /*reg $22*/)
{ // line 1, offset 0x3d350
    int n; // register $21
    int maxobj; // register $23
    int xoff; // stack offset -48
    int i; // register $19
    int shade; // register $17
    int minobj; // stack offset -44
    { // line 251, offset 0x3d7b4
        char textbufme[128]; // stack offset -176
        int objmeup; // register $4
        int nummeup; // register $8
    } // line 354, offset 0x3dadc
    { // line 357, offset 0x3dadc
        short ymeup; // register $10
        short yrot; // register $9
        struct INVOBJ *objme; // register $3
        { // line 394, offset 0x3db74
            int activenum; // register $3
        } // line 419, offset 0x3dc4c
    } // line 424, offset 0x3dc4c
} // line 510, offset 0x3dee8
/*
 * Offset 0x3DF18
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 2515)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ handle_object_changeover(int ringnum /*reg $4*/)
/*
 * Offset 0x3DF44
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 2526)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ handle_inventry_menu()
{ // line 3, offset 0x3df44
    int n; // register $19
    int opts; // register $16
    int i; // register $17
    int ypos; // register $18
    int num; // register $9
    { // line 22, offset 0x3dff8
    } // line 50, offset 0x3e078
} // line 338, offset 0x3e9d0
/*
 * Offset 0x3E9F8
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 2885)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ setup_ammo_selector()
{ // line 2, offset 0x3e9f8
    int num; // register $4
    int opts; // register $11
} // line 102, offset 0x3ed00
/*
 * Offset 0x3ED08
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 2990)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ fade_ammo_selector()
/*
 * Offset 0x3EDDC
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3022)
 * Stack frame base $29, size 336
 */
void /*reg $31*/ draw_ammo_selector()
{ // line 2, offset 0x3eddc
    int n; // register $17
    int xpos; // register $18
    { // line 20, offset 0x3ee74
        short yrot; // register $16
        struct INVOBJ *objme; // register $2
        { // line 48, offset 0x3eee4
            char cunter[256]; // stack offset -296
        } // line 65, offset 0x3efb8
    } // line 73, offset 0x3f044
} // line 80, offset 0x3f068
/*
 * Offset 0x3F094
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3113)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ spinback(unsigned short *cock /*reg $4*/)
{ // line 1, offset 0x3f094
    unsigned short val; // register $5
    unsigned short val2; // register $6
} // line 33, offset 0x3f134
/*
 * Offset 0x3F13C
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3156)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ update_laras_weapons_status()
/*
 * Offset 0x3F200
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3277)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ is_item_currently_combinable(short obj /*reg $17*/)
{ // line 1, offset 0x3f200
    int n; // register $18
} // line 21, offset 0x3f29c
/*
 * Offset 0x3F29C
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3300)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ have_i_got_item(short obj /*reg $4*/)
{ // line 1, offset 0x3f29c
    int n; // register $5
} // line 11, offset 0x3f2dc
/*
 * Offset 0x3F2DC
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3315)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ do_these_objects_combine(int obj1 /*reg $4*/, int obj2 /*reg $5*/)
{ // line 1, offset 0x3f2dc
    int n; // register $6
} // line 12, offset 0x3f348
/*
 * Offset 0x3F348
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3333)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ combine_these_two_objects(short obj1 /*reg $8*/, short obj2 /*reg $5*/)
{ // line 1, offset 0x3f348
    int n; // register $6
} // line 19, offset 0x3f424
/*
 * Offset 0x3F424
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3357)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ seperate_object(short obj /*reg $4*/)
{ // line 1, offset 0x3f424
    int n; // register $6
} // line 18, offset 0x3f4c0
/*
 * Offset 0x3F4C0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3389)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_HK_SILENCER(int flag /*reg $4*/)
/*
 * Offset 0x3F500
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3415)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ combine_revolver_lasersight(int flag /*reg $4*/)
/*
 * Offset 0x3F590
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3435)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ combine_crossbow_lasersight(int flag /*reg $4*/)
/*
 * Offset 0x3F620
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3457)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PuzzleItem1(int flag /*reg $4*/)
/*
 * Offset 0x3F640
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3463)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PuzzleItem2(int flag /*reg $4*/)
/*
 * Offset 0x3F660
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3469)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PuzzleItem3(int flag /*reg $4*/)
/*
 * Offset 0x3F680
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3475)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PuzzleItem4(int flag /*reg $4*/)
/*
 * Offset 0x3F6A0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3481)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PuzzleItem5(int flag /*reg $4*/)
/*
 * Offset 0x3F6C0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3487)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PuzzleItem6(int flag /*reg $4*/)
/*
 * Offset 0x3F6E0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3493)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PuzzleItem7(int flag /*reg $4*/)
/*
 * Offset 0x3F700
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3499)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PuzzleItem8(int flag /*reg $4*/)
/*
 * Offset 0x3F720
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3511)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_KeyItem1(int flag /*reg $4*/)
/*
 * Offset 0x3F744
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3517)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_KeyItem2(int flag /*reg $4*/)
/*
 * Offset 0x3F768
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3523)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_KeyItem3(int flag /*reg $4*/)
/*
 * Offset 0x3F78C
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3529)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_KeyItem4(int flag /*reg $4*/)
/*
 * Offset 0x3F7B0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3535)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_KeyItem5(int flag /*reg $4*/)
/*
 * Offset 0x3F7D4
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3541)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_KeyItem6(int flag /*reg $4*/)
/*
 * Offset 0x3F7F8
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3547)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_KeyItem7(int flag /*reg $4*/)
/*
 * Offset 0x3F81C
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3553)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_KeyItem8(int flag /*reg $4*/)
/*
 * Offset 0x3F840
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3562)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PickupItem1(int flag /*reg $4*/)
/*
 * Offset 0x3F864
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3568)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PickupItem2(int flag /*reg $4*/)
/*
 * Offset 0x3F888
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3574)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PickupItem3(int flag /*reg $4*/)
/*
 * Offset 0x3F8AC
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3580)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_PickupItem4(int flag /*reg $4*/)
/*
 * Offset 0x3F8D0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3590)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ combine_clothbottle(int flag /*reg $4*/)
/*
 * Offset 0x3F8F0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3608)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ setup_objectlist_startposition(short newobj /*reg $4*/)
{ // line 1, offset 0x3f8f0
    int n; // register $6
} // line 9, offset 0x3f938
/*
 * Offset 0x3F938
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3620)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ setup_objectlist_startposition2(short newobj /*reg $8*/)
{ // line 1, offset 0x3f938
    int n; // register $6
} // line 9, offset 0x3f9a0
/*
 * Offset 0x3F9A0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3645)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ use_current_item()
{ // line 2, offset 0x3f9a0
    short invobject; // register $7
    short gmeobject; // register $5
    long OldBinocular; // register $9
} // line 179, offset 0x3fea0
/*
 * Offset 0x3FEB0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 3856)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ DEL_picked_up_object(short objnum /*reg $4*/)
{ // line 1, offset 0x3feb0
    { // line 130, offset 0x401b4
        int tf; // register $2
    } // line 133, offset 0x401f4
    { // line 137, offset 0x40204
        int lf; // register $2
    } // line 140, offset 0x40244
} // line 211, offset 0x40584
/*
 * Offset 0x40584
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4074)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ NailInvItem(short objnum /*reg $4*/)
/*
 * Offset 0x4086C
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4194)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ have_i_got_object(short object_number /*reg $4*/)
/*
 * Offset 0x4097C
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4217)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ remove_inventory_item(short object_number /*reg $4*/)
/*
 * Offset 0x40AC4
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4244)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ convert_obj_to_invobj(short obj /*reg $4*/)
{ // line 1, offset 0x40ac4
    int n; // register $3
} // line 9, offset 0x40b00
/*
 * Offset 0x40B08
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4256)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ convert_invobj_to_obj(int obj /*reg $4*/)
/*
 * Offset 0x40B2C
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4298)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ init_keypad_mode()
/*
 * Offset 0x40B54
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4310)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ do_keypad_mode()
{ // line 2, offset 0x40b54
    struct INVOBJ *objme; // register $7
    char buf[5]; // stack offset -24
    int n; // register $5
    { // line 12, offset 0x40b8c
        unsigned char val; // register $2
    } // line 18, offset 0x40ba4
    { // line 63, offset 0x40e00
        int val; // register $4
    } // line 109, offset 0x41010
    { // line 113, offset 0x41020
        unsigned char val; // register $16
    } // line 150, offset 0x41118
} // line 163, offset 0x411b0
/*
 * Offset 0x411C4
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4481)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ do_examine_mode()
{ // line 2, offset 0x411c4
    struct INVOBJ *objme; // register $16
    int saved_scale; // register $17
} // line 31, offset 0x412a8
/*
 * Offset 0x412BC
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4521)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ do_stats_mode()
/*
 * Offset 0x41324
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4573)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ dels_give_lara_items_cheat()
{ // line 2, offset 0x41324
    int piss; // register $4
} // line 44, offset 0x41470
/*
 * Offset 0x41470
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4622)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ dels_give_lara_guns_cheat()
/*
 * Offset 0x41608
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4826)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ S_DrawPickup(short object_number /*reg $4*/)
{ // line 1, offset 0x41608
} // line 7, offset 0x416e0
/*
 * Offset 0x416E0
 * C:\Projects2\Tomb5\GAME\NEWINV2.C (line 4839)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ do_playstation_button_prompts_v1()
{ // line 2, offset 0x416e0
} // line 37, offset 0x418e8
extern struct INVOBJ inventry_objects_list[100];
extern unsigned char wanky_secrets_table[18];
extern short options_table[99];
extern short optmessages[11];
extern struct COMBINELIST dels_handy_combine_table[24];
extern int GLOBAL_enterinventory; // offset 0xA0B30
extern int GLOBAL_inventoryitemchosen; // offset 0xA0B34
extern int GLOBAL_lastinvitem; // offset 0xA0B2C
extern short examine_mode; // offset 0xA0B28
extern short stats_mode; // offset 0xA0B2A
extern int GLOBAL_invkeypadmode; // offset 0xA0B38
extern int GLOBAL_invkeypadcombination; // offset 0xA0B3C
extern unsigned char keypadx; // offset 0xA0B40
extern unsigned char keypady; // offset 0xA0B41
extern unsigned char keypadnuminputs; // offset 0xA0B42
extern unsigned char keypadpause; // offset 0xA0B43
extern short inventry_xpos; // offset 0xA0B44
extern short inventry_ypos; // offset 0xA0B46
extern unsigned char keypadinputs[4];
extern short ammo_selector_fade_val; // offset 0xA3710
extern short ammo_selector_fade_dir; // offset 0xA371C
extern short combine_ring_fade_val; // offset 0xA370C
extern short combine_ring_fade_dir; // offset 0xA3718
extern short normal_ring_fade_val; // offset 0xA3708
extern short normal_ring_fade_dir; // offset 0xA3714
extern char seperate_type_flag; // offset 0xA3738
extern char combine_type_flag; // offset 0xA373C
extern short combine_obj1; // offset 0xA3720
extern short combine_obj2; // offset 0xA3724
extern char menu_active; // offset 0xA36F0
extern struct RINGME *rings[2];
extern char loading_or_saving; // offset 0xA3778
extern char use_the_bitch; // offset 0xA36FC
extern unsigned char left_debounce; // offset 0xA3760
extern unsigned char right_debounce; // offset 0xA376C
extern unsigned char up_debounce; // offset 0xA3768
extern unsigned char down_debounce; // offset 0xA3764
extern unsigned char select_debounce; // offset 0xA375C
extern unsigned char deselect_debounce; // offset 0xA3770
extern unsigned char go_left; // offset 0xA36F8
extern unsigned char go_right; // offset 0xA36D8
extern unsigned char go_up; // offset 0xA3704
extern unsigned char go_down; // offset 0xA36F4
extern unsigned char left_repeat; // offset 0xA36E8
extern unsigned char right_repeat; // offset 0xA36EC
extern unsigned char go_select; // offset 0xA3734
extern unsigned char go_deselect; // offset 0xA379C
extern unsigned char ammo_active; // offset 0xA377C
extern char bullshitbollox; // offset 0xA37A4
extern char _bullshitbollox; // offset 0xA37A0
static unsigned short AmountShotGunAmmo1; // offset 0xA36B8
static unsigned short AmountShotGunAmmo2; // offset 0xA36BA
static unsigned short AmountHKAmmo1; // offset 0xA36BC
static unsigned short AmountCrossBowAmmo1; // offset 0xA36BE
static unsigned short AmountCrossBowAmmo2; // offset 0xA36C0
static unsigned short AmountUziAmmo; // offset 0xA36C2
static unsigned short AmountRevolverAmmo; // offset 0xA36C4
static unsigned short AmountPistolsAmmo; // offset 0xA36C6
static char CurrentPistolsAmmoType; // offset 0xA36C8
static char CurrentUziAmmoType; // offset 0xA36C9
static char CurrentRevolverAmmoType; // offset 0xA36CA
static char CurrentShotGunAmmoType; // offset 0xA36CB
static char CurrentGrenadeGunAmmoType; // offset 0xA36CC
static char CurrentCrossBowAmmoType; // offset 0xA36CD
static char StashedCurrentPistolsAmmoType; // offset 0xA36CE
static char StashedCurrentUziAmmoType; // offset 0xA36CF
static char StashedCurrentRevolverAmmoType; // offset 0xA36D0
static char StashedCurrentShotGunAmmoType; // offset 0xA36D1
static char StashedCurrentGrenadeGunAmmoType; // offset 0xA36D2
static char StashedCurrentCrossBowAmmoType; // offset 0xA36D3
extern char current_selected_option; // offset 0xA36E0
extern char Stashedcurrent_selected_option; // offset 0xA36DC
extern struct AMMOLIST ammo_object_list[3];
extern char ammo_selector_flag; // offset 0xA3728
extern char num_ammo_slots; // offset 0xA3758
extern char *current_ammo_type; // offset 0xA3700
extern int OBJLIST_SPACING; // offset 0xA3798
extern char friggrimmer; // offset 0xA36D4
extern char friggrimmer2; // offset 0xA36E4
extern char oldLaraBusy; // offset 0xA3774
extern struct MENUTHANG current_options[3];
/*
 * Offset 0x46EE4
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 309)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ CheckForHoldingState(int state /*reg $4*/)
{ // line 1, offset 0x46ee4
    short *holds; // register $5
} // line 11, offset 0x46f28
/*
 * Offset 0x46F28
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 332)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ LaraGun()
{ // line 2, offset 0x46f28
    { // line 220, offset 0x47524
    } // line 235, offset 0x47568
} // line 294, offset 0x47714
/*
 * Offset 0x4772C
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 630)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ InitialiseNewWeapon()
/*
 * Offset 0x4789C
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 675)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ LaraTargetInfo(struct WEAPON_INFO *winfo /*reg $19*/)
{ // line 1, offset 0x4789c
    struct ITEM_INFO *item; // register $16
    short ang[2]; // stack offset -64
    struct GAME_VECTOR src; // stack offset -56
    struct GAME_VECTOR target; // stack offset -40
} // line 62, offset 0x47b08
/*
 * Offset 0x47B28
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 744)
 * Stack frame base $29, size 112
 */
void /*reg $31*/ LaraGetNewTarget(struct WEAPON_INFO *winfo /*sp 0*/)
{ // line 1, offset 0x47b28
    struct ITEM_INFO *item; // register $16
    struct ITEM_INFO *bestitem; // stack offset -56
    short ang[2]; // stack offset -96
    short bestyrot; // stack offset -52
    struct GAME_VECTOR src; // stack offset -88
    struct GAME_VECTOR target; // stack offset -72
    struct creature_info *creature; // register $19
    int x; // register $6
    int y; // register $5
    int z; // register $4
    int slot; // register $23
    int dist; // register $17
    int maxdist; // register $18
    int maxdist2; // stack offset -48
    int bestdist; // register $20
    short targets; // stack offset -44
    { // line 101, offset 0x47e4c
        short match; // register $4
    } // line 204, offset 0x480d4
} // line 214, offset 0x48120
/*
 * Offset 0x48150
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 964)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ find_target_point(struct ITEM_INFO *item /*reg $16*/, struct GAME_VECTOR *target /*reg $17*/)
{ // line 1, offset 0x48150
    short *bounds; // register $2
    long x; // register $6
    long y; // register $13
    long z; // register $3
    long c; // register $7
    long s; // register $9
} // line 19, offset 0x4826c
/*
 * Offset 0x4826C
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 988)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ AimWeapon(struct WEAPON_INFO *winfo /*reg $4*/, struct lara_arm *arm /*reg $5*/)
{ // line 1, offset 0x4826c
    short curr; // register $3
    short speed; // register $6
    short destx; // register $7
    short desty; // register $4
} // line 48, offset 0x48328
/*
 * Offset 0x48328
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 1048)
 * Stack frame base $29, size 64
 */
int /*reg $31*/ FireWeapon(int weapon_type /*reg $16*/, struct ITEM_INFO *target /*reg $23*/, struct ITEM_INFO *src /*reg $21*/, short *angles /*reg $20*/)
{ // line 1, offset 0x48328
    int r; // register $7
    int i; // register $6
    int nums; // register $8
    int bestdist; // register $17
    int best; // register $19
    short *ammo; // register $3
    struct WEAPON_INFO *winfo; // register $18
    struct SPHERE *sptr; // register $16
    short room_number; // stack offset -48
} // line 133, offset 0x486e0
/*
 * Offset 0x486E0
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 1187)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ HitTarget(struct ITEM_INFO *item /*reg $16*/, struct GAME_VECTOR *hitpos /*reg $17*/, int damage /*reg $19*/, int grenade /*reg $20*/)
{ // line 1, offset 0x486e0
    struct object_info *obj; // register $18
} // line 30, offset 0x48898
/*
 * Offset 0x48898
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 1248)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ WeaponObject(int weapon_type /*reg $4*/)
/*
 * Offset 0x488F4
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 1273)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ WeaponObjectMesh(int weapon_type /*reg $4*/)
/*
 * Offset 0x48984
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 1304)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ DoProperDetection(short item_number /*reg $22*/, long x /*reg $19*/, long y /*reg $20*/, long z /*reg $21*/, long xv /*sp 16*/, long yv /*sp 20*/, long zv /*sp 24*/)
{ // line 1, offset 0x48984
    struct ITEM_INFO *item; // register $16
    short room_number; // stack offset -48
    long ceiling; // register $4
    long height; // register $5
    long oldonobj; // register $17
    long oldheight; // register $18
    long bs; // register $4
    long yang; // register $3
    { // line 61, offset 0x48b34
        long xs; // register $4
    } // line 84, offset 0x48bd0
} // line 476, offset 0x4965c
/*
 * Offset 0x4965C
 * C:\Projects2\Tomb5\GAME\LARAFIRE.C (line 1786)
 * Stack frame base $29, size 0
 */
short * /*reg $31*/ get_current_ammo_pointer(int num /*reg $4*/)
{ // line 2, offset 0x4965c
    short *ammo; // register $2
} // line 48, offset 0x49700
extern struct WEAPON_INFO weapons[9];
static short HoldStates[18]; // offset 0x93710
extern struct ITEM_INFO *LastTargets[8];
extern struct ITEM_INFO *TargetList[8];
extern struct PHD_3DPOS bum_view;
extern struct GAME_VECTOR bum_vsrc;
extern struct GAME_VECTOR bum_vdest;
/*
 * Offset 0x49708
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 71)
 * Stack frame base $29, size 64
 */
int /*reg $31*/ DoFlareLight(struct PHD_VECTOR *pos /*reg $16*/, int flare_age /*reg $19*/)
{ // line 1, offset 0x49708
    int x; // register $20
    int y; // register $21
    int z; // register $22
    int random; // register $18
    long r; // register $10
    long g; // register $9
    long b; // register $8
    long falloff; // register $7
} // line 75, offset 0x49984
/*
 * Offset 0x49984
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 148)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ DoFlareInHand(int flare_age /*reg $16*/)
{ // line 1, offset 0x49984
    struct PHD_VECTOR pos; // stack offset -24
} // line 44, offset 0x49a8c
/*
 * Offset 0x49A8C
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 201)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ DrawFlareInAir(struct ITEM_INFO *item /*reg $16*/)
/*
 * Offset 0x49BBC
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 292)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ CreateFlare(short object /*reg $20*/, int thrown /*reg $21*/)
{ // line 1, offset 0x49bbc
    short flare_item; // register $18
    { // line 8, offset 0x49bfc
        struct PHD_VECTOR pos; // stack offset -56
        struct FLOOR_INFO *floor; // register $16
        short room_number; // stack offset -40
        int collision; // register $19
        struct ITEM_INFO *flare; // register $17
        struct ITEM_INFO **itemlist; // register $16
        struct MESH_INFO **meshlist; // register $16
    } // line 96, offset 0x49eb0
} // line 97, offset 0x49ed4
/*
 * Offset 0x49ED4
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 392)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ set_flare_arm(int frame /*reg $4*/)
{ // line 1, offset 0x49ed4
    int anim_base; // register $6
} // line 17, offset 0x49f74
/*
 * Offset 0x49F74
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 414)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ draw_flare()
{ // line 2, offset 0x49f74
    short ani; // register $16
} // line 63, offset 0x4a0f0
/*
 * Offset 0x4A108
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 482)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ undraw_flare()
{ // line 2, offset 0x4a108
    short ani; // register $17
    short ani2; // register $6
} // line 131, offset 0x4a378
/*
 * Offset 0x4A394
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 619)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ draw_flare_meshes()
/*
 * Offset 0x4A3BC
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 626)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ undraw_flare_meshes()
/*
 * Offset 0x4A3E4
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 636)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ ready_flare()
/*
 * Offset 0x4A418
 * C:\Projects2\Tomb5\GAME\LARAFLAR.C (line 648)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ FlareControl(short item_number /*reg $18*/)
{ // line 1, offset 0x4a418
    struct ITEM_INFO *flare; // register $16
    long x; // register $11
    long y; // register $6
    long z; // register $7
    long flare_age; // register $17
    long xv; // register $12
    long yv; // register $3
    long zv; // register $10
} // line 75, offset 0x4a66c
/*
 * Offset 0x42444
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 101)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ draw_shotgun_meshes(int weapon_type /*reg $4*/)
{ // line 2, offset 0x42444
} // line 7, offset 0x42498
/*
 * Offset 0x42498
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 113)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ undraw_shotgun_meshes(int weapon_type /*reg $4*/)
{ // line 2, offset 0x42498
} // line 7, offset 0x424e0
/*
 * Offset 0x424E0
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 125)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ready_shotgun(int weapon_type /*reg $4*/)
/*
 * Offset 0x42558
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 141)
 * Stack frame base $29, size 72
 */
void /*reg $31*/ RifleHandler(int weapon_type /*reg $17*/)
{ // line 1, offset 0x42558
    struct WEAPON_INFO *winfo; // register $16
    { // line 79, offset 0x428ac
        struct PHD_VECTOR pos; // stack offset -40
    } // line 113, offset 0x429d0
} // line 115, offset 0x429f0
/*
 * Offset 0x429F0
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 262)
 * Stack frame base $29, size 112
 */
void /*reg $31*/ FireShotgun()
{ // line 2, offset 0x429f0
    struct PHD_VECTOR pos; // stack offset -72
    short angles[2]; // stack offset -56
    short dangles[2]; // stack offset -48
    int i; // register $16
    int r; // register $3
    int fired; // register $19
    int x; // register $19
    int y; // register $18
    int z; // register $17
    int lp; // register $16
    int scatter; // register $17
} // line 68, offset 0x42ca8
/*
 * Offset 0x42CA8
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 332)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ FireHK(int running /*reg $8*/)
{ // line 1, offset 0x42ca8
    short angles[2]; // stack offset -24
} // line 46, offset 0x42e18
/*
 * Offset 0x42E18
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 380)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ FireCrossbow(struct PHD_3DPOS *Start /*reg $18*/)
{ // line 1, offset 0x42e18
    short *ammo; // register $19
    { // line 15, offset 0x42e7c
        struct ITEM_INFO *item; // register $16
    } // line 44, offset 0x42f60
} // line 45, offset 0x42f60
/*
 * Offset 0x42F7C
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 427)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ CrossbowHitSwitchType78(struct ITEM_INFO *item /*reg $17*/, struct ITEM_INFO *target /*reg $18*/, int MustHitLastNode /*reg $6*/)
{ // line 1, offset 0x42f7c
    short TriggerItems[8]; // stack offset -40
    short NumTrigs; // register $17
    long dx; // register $5
    long dy; // register $4
    long dz; // register $2
    long num1; // register $8
    long i; // register $6
    long cs; // register $9
    long cd; // register $7
    struct SPHERE *ptr1; // register $16
    { // line 76, offset 0x430ac
        short room_number; // stack offset -24
    } // line 79, offset 0x430ac
} // line 108, offset 0x43224
/*
 * Offset 0x4323C
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 539)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ ControlCrossbow(short item_number /*reg $19*/)
{ // line 1, offset 0x4323c
    struct ITEM_INFO *item; // register $17
    struct ITEM_INFO *target; // register $16
    struct ITEM_INFO **itemlist; // register $18
    struct MESH_INFO **staticlist; // register $2
    char *cptr; // register $16
    short room_number; // stack offset -32
    long speed; // register $8
} // line 65, offset 0x43464
/*
 * Offset 0x43480
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 606)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ draw_shotgun(int weapon_type /*reg $18*/)
{ // line 1, offset 0x43480
    struct ITEM_INFO *item; // register $16
} // line 35, offset 0x436b0
/*
 * Offset 0x436B0
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 644)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ undraw_shotgun(int weapon_type /*reg $16*/)
{ // line 1, offset 0x436b0
    struct ITEM_INFO *item; // register $17
} // line 30, offset 0x43810
/*
 * Offset 0x43810
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 682)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ AnimateShotgun(int weapon_type /*reg $19*/)
{ // line 1, offset 0x43810
    int running; // register $8
    struct ITEM_INFO *item; // register $17
    static int m16_firing; // offset 0x4
    { // line 16, offset 0x43858
        struct PHD_VECTOR pos; // stack offset -40
    } // line 35, offset 0x43900
} // line 214, offset 0x43fb0
/*
 * Offset 0x43FB0
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 939)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ DoGrenadeDamageOnBaddie(struct ITEM_INFO *baddie /*reg $16*/, struct ITEM_INFO *item /*reg $5*/)
/*
 * Offset 0x44138
 * C:\Projects2\Tomb5\GAME\LARA1GUN.C (line 976)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ TriggerGrapplingEffect(long x /*reg $21*/, long y /*reg $20*/, long z /*reg $19*/)
{ // line 1, offset 0x44138
    long size; // register $2
    long lp; // register $17
    struct SMOKE_SPARKS *sptr; // register $16
} // line 48, offset 0x44308
extern char HKShotsFired; // offset 0xA0B54
extern char HKTimer; // offset 0xA0B55
/*
 * Offset 0x44308
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 80)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ set_arm_info(struct lara_arm *arm /*reg $7*/, int frame /*reg $5*/)
{ // line 1, offset 0x44308
    int anim_base; // register $4
    struct PISTOL_DEF *p; // register $6
} // line 23, offset 0x443b4
/*
 * Offset 0x443B4
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 112)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ draw_pistols(int weapon_type /*reg $4*/)
{ // line 1, offset 0x443b4
    short ani; // register $17
    struct PISTOL_DEF *p; // register $5
} // line 25, offset 0x444a4
/*
 * Offset 0x444A4
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 142)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ undraw_pistols(int weapon_type /*reg $19*/)
{ // line 1, offset 0x444a4
    struct PISTOL_DEF *p; // register $18
    short anil; // register $17
    short anir; // register $16
} // line 85, offset 0x44804
/*
 * Offset 0x44804
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 233)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ready_pistols(int weapon_type /*reg $4*/)
/*
 * Offset 0x4487C
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 251)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ draw_pistol_meshes(int weapon_type /*reg $16*/)
{ // line 1, offset 0x4487c
} // line 15, offset 0x448f0
/*
 * Offset 0x448F0
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 272)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ undraw_pistol_mesh_left(int weapon_type /*reg $16*/)
{ // line 1, offset 0x448f0
    { // line 4, offset 0x44908
    } // line 12, offset 0x44958
} // line 13, offset 0x44968
/*
 * Offset 0x44968
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 290)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ undraw_pistol_mesh_right(int weapon_type /*reg $16*/)
{ // line 1, offset 0x44968
} // line 13, offset 0x449e4
/*
 * Offset 0x449E4
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 308)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ PistolHandler(int weapon_type /*reg $18*/)
{ // line 1, offset 0x449e4
    struct WEAPON_INFO *winfo; // register $17
    { // line 61, offset 0x44bf8
        struct PHD_VECTOR pos; // stack offset -32
    } // line 100, offset 0x44d60
} // line 101, offset 0x44d78
/*
 * Offset 0x44D78
 * C:\Projects2\Tomb5\GAME\LARA2GUN.C (line 414)
 * Stack frame base $29, size 112
 */
void /*reg $31*/ AnimatePistols(int weapon_type /*reg $20*/)
{ // line 1, offset 0x44d78
    struct PISTOL_DEF *p; // register $18
    struct WEAPON_INFO *winfo; // register $19
    short angles[2]; // stack offset -72
    static int uzi_left; // offset 0x18
    static int uzi_right; // offset 0x1c
    short anil; // register $16
    short anir; // register $17
    short sound_already; // register $21
    { // line 14, offset 0x44dcc
        struct PHD_VECTOR pos; // stack offset -64
    } // line 36, offset 0x44e74
    { // line 39, offset 0x44e88
        struct PHD_VECTOR pos; // stack offset -48
    } // line 61, offset 0x44f30
} // line 234, offset 0x45434
static struct PISTOL_DEF PistolTable[4]; // offset 0xA0B5C
/*
 * Offset 0x45434
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 77)
 * Stack frame base $29, size 40
 */
long /*reg $31*/ LaraCheckForLetGo(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
{ // line 1, offset 0x45434
    short room_number; // stack offset -24
} // line 29, offset 0x45530
/*
 * Offset 0x45530
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 108)
 * Stack frame base $29, size 64
 */
int /*reg $31*/ LaraTestClimbUpPos(struct ITEM_INFO *item /*reg $23*/, int front /*reg $5*/, int right /*reg $6*/, int *shift /*sp 12*/, int *ledge /*sp 16*/)
{ // line 1, offset 0x45530
    struct FLOOR_INFO *floor; // register $30
    short room_number; // stack offset -48
    int angle; // register $3
    int x; // register $19
    int y; // register $21
    int z; // register $20
    int height; // register $18
    int ceiling; // register $3
    int xfront; // register $16
    int zfront; // register $18
} // line 111, offset 0x457f0
/*
 * Offset 0x457F0
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 240)
 * Stack frame base $29, size 72
 */
int /*reg $31*/ LaraTestClimb(int x /*reg $23*/, int y /*reg $20*/, int z /*reg $30*/, int xfront /*reg $17*/, int zfront /*sp 16*/, int item_height /*sp 20*/, int item_room /*sp 24*/, int *shift /*sp 28*/)
{ // line 1, offset 0x457f0
    int hang; // stack offset -48
    struct FLOOR_INFO *floor; // register $19
    short room_number; // stack offset -56
    int height; // register $18
    int ceiling; // register $3
} // line 143, offset 0x45abc
/*
 * Offset 0x45ABC
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 401)
 * Stack frame base $29, size 72
 */
int /*reg $31*/ LaraClimbLeftCornerTest(struct ITEM_INFO *item /*reg $18*/, struct COLL_INFO *coll /*sp 4*/)
{ // line 1, offset 0x45abc
    int x; // register $17
    int z; // register $16
    int shift; // stack offset -48
    int flag; // register $22
    int oldx; // register $23
    int oldz; // register $20
    short oldy; // register $30
    short angle; // register $19
} // line 105, offset 0x45de4
/*
 * Offset 0x45DE4
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 523)
 * Stack frame base $29, size 72
 */
int /*reg $31*/ LaraClimbRightCornerTest(struct ITEM_INFO *item /*reg $18*/, struct COLL_INFO *coll /*sp 4*/)
{ // line 1, offset 0x45de4
    int x; // register $17
    int z; // register $16
    int shift; // stack offset -48
    int flag; // register $22
    int oldx; // register $23
    int oldz; // register $20
    short oldy; // register $30
    short angle; // register $19
} // line 102, offset 0x46100
/*
 * Offset 0x46100
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 644)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ LaraDoClimbLeftRight(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/, int result /*reg $6*/, int shift /*reg $7*/)
{ // line 1, offset 0x46100
    { // line 30, offset 0x461b8
        int flag; // register $2
    } // line 78, offset 0x46284
} // line 95, offset 0x462e0
/*
 * Offset 0x462F8
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 746)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ LaraTestClimbPos(struct ITEM_INFO *item /*reg $9*/, int front /*reg $5*/, int right /*reg $4*/, int origin /*reg $7*/, int height /*sp 16*/, int *shift /*sp 20*/)
{ // line 1, offset 0x462f8
    int angle; // register $8
    int x; // register $6
    int z; // register $8
    int xfront; // register $11
    int zfront; // register $10
} // line 37, offset 0x463f0
/*
 * Offset 0x463F0
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 791)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_as_climbstnc(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x464E8
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 823)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ lara_col_climbstnc(struct ITEM_INFO *item /*reg $18*/, struct COLL_INFO *coll /*reg $19*/)
{ // line 1, offset 0x464e8
    int result_r; // register $17
    int result_l; // register $5
    int shift_r; // stack offset -40
    int shift_l; // stack offset -32
    int ledge_r; // stack offset -36
    int ledge_l; // stack offset -28
} // line 109, offset 0x467c8
/*
 * Offset 0x467E4
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 935)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_climbleft(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x46834
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 946)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ lara_col_climbleft(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x46834
    int shift; // stack offset -24
} // line 12, offset 0x468a4
/*
 * Offset 0x468B8
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 961)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_climbright(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x46908
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 972)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ lara_col_climbright(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x46908
    int shift; // stack offset -24
} // line 12, offset 0x46970
/*
 * Offset 0x46984
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 987)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_climbing(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x469B0
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 994)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ lara_col_climbing(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x469b0
    int result_r; // register $17
    int result_l; // register $18
    int shift_r; // stack offset -40
    int shift_l; // stack offset -32
    int ledge_r; // stack offset -36
    int ledge_l; // stack offset -28
    int yshift; // register $19
    int frame; // register $4
} // line 69, offset 0x46b88
/*
 * Offset 0x46BA4
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 1066)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_climbdown(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x46BD0
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 1073)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ lara_col_climbdown(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x46bd0
    int result_r; // register $16
    int result_l; // register $5
    int shift_r; // stack offset -32
    int shift_l; // stack offset -28
    int yshift; // register $19
    int frame; // register $4
} // line 69, offset 0x46ddc
/*
 * Offset 0x46DF8
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 1145)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_climbend(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x46E30
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 1153)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_col_climbend(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x46E38
 * C:\Projects2\Tomb5\GAME\LARACLMB.C (line 1176)
 * Stack frame base $29, size 40
 */
short /*reg $31*/ GetClimbTrigger(long x /*reg $18*/, long y /*reg $17*/, long z /*reg $16*/, short room_number /*sp -24*/)
{ // line 1, offset 0x46e38
    short *data; // register $4
} // line 28, offset 0x46ee4
static short LeftIntRightExtTab[4]; // offset 0xA0B7C
static short LeftExtRightIntTab[4]; // offset 0xA0B84
/*
 * Offset 0x4B4F8
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 71)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ LaraTestWaterDepth(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x4b4f8
    int wd; // register $3
    struct FLOOR_INFO *floor; // register $18
    short room_number; // stack offset -24
} // line 34, offset 0x4b608
/*
 * Offset 0x4B608
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 109)
 * Stack frame base $29, size 344
 */
void /*reg $31*/ LaraSwimCollision(struct ITEM_INFO *item /*reg $19*/, struct COLL_INFO *coll /*reg $20*/)
{ // line 1, offset 0x4b608
    int height; // register $18
    short oxr; // register $22
    short oyr; // stack offset -48
    short hit; // register $21
    long ox; // register $23
    long oy; // register $30
    long oz; // stack offset -44
    struct COLL_INFO coll2; // stack offset -320
    struct COLL_INFO coll3; // stack offset -184
    { // line 126, offset 0x4ba48
        long pitch; // register $2
    } // line 129, offset 0x4ba78
} // line 140, offset 0x4bac4
/*
 * Offset 0x4BAF4
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 251)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SwimTurn(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x4BBDC
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 274)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SwimTurnSubsuit(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x4BD20
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 303)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ UpdateSubsuitAngles()
{ // line 2, offset 0x4bd20
    short vel; // register $4
    { // line 57, offset 0x4bf70
        short vol; // register $2
    } // line 65, offset 0x4bfa4
} // line 66, offset 0x4bfb4
/*
 * Offset 0x4BFB4
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 376)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ LaraUnderWater(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $18*/)
/*
 * Offset 0x4C3A8
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 475)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ lara_as_swimcheat(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C548
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 517)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_swim(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C634
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 548)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_glide(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C730
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 582)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_tread(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C854
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 619)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_dive(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C884
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 626)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_uwdeath(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C8F8
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 644)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_waterroll(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C900
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 658)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_swim(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C920
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 664)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_glide(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C940
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 669)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_tread(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C960
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 675)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_dive(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4C980
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 681)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_uwdeath(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
{ // line 1, offset 0x4c980
    int wh; // register $4
} // line 11, offset 0x4ca18
/*
 * Offset 0x4CA18
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 694)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_waterroll(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4CA38
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 700)
 * Stack frame base $29, size 48
 */
long /*reg $31*/ GetWaterDepth(long x /*reg $18*/, long y /*reg $20*/, long z /*reg $19*/, short room_number /*sp -32*/)
{ // line 1, offset 0x4ca38
    int wh; // register $16
    struct room_info *r; // register $16
    struct FLOOR_INFO *floor; // register $17
    short data; // register $4
    int x_floor; // register $5
    int y_floor; // register $4
} // line 87, offset 0x4cd34
/*
 * Offset 0x4CD34
 * C:\Projects2\Tomb5\GAME\LARASWIM.C (line 794)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ LaraWaterCurrent(struct COLL_INFO *coll /*reg $19*/)
{ // line 1, offset 0x4cd34
    struct PHD_VECTOR target; // stack offset -40
    struct ITEM_INFO *item; // register $17
    { // line 12, offset 0x4cd70
        long shifter; // register $4
        long absvel; // register $2
    } // line 42, offset 0x4ce68
    { // line 45, offset 0x4ce70
        long angle; // register $2
        long dx; // register $4
        long dz; // register $3
        long speed; // register $6
        long sinkval; // register $16
    } // line 63, offset 0x4cf6c
} // line 105, offset 0x4d0e0
extern char SubHitCount; // offset 0xA1230
extern struct SUBSUIT_INFO subsuit;
/*
 * Offset 0x4D100
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 62)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ LaraTestWaterStepOut(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4D22C
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 104)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ LaraTestWaterClimbOut(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $5*/)
{ // line 1, offset 0x4d22c
    int hdif; // register $18
    short angle; // register $16
} // line 86, offset 0x4d4f0
/*
 * Offset 0x4D4F0
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 195)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ LaraSurfaceCollision(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x4d4f0
} // line 34, offset 0x4d66c
/*
 * Offset 0x4D684
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 236)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ LaraSurface(struct ITEM_INFO *item /*reg $16*/, struct COLL_INFO *coll /*reg $17*/)
/*
 * Offset 0x4D8E4
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 292)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_surfswim(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4D9A8
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 315)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_surfback(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4DA50
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 336)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_surfleft(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4DAF8
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 357)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ lara_as_surfright(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4DBA0
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 378)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_as_surftread(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4DCE8
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 432)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ lara_col_surfswim(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $16*/)
/*
 * Offset 0x4DD38
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 441)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_surfback(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4DD64
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 448)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_surfleft(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4DD90
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 455)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_surfright(struct ITEM_INFO *item /*reg $4*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4DDBC
 * C:\Projects2\Tomb5\GAME\LARASURF.C (line 462)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ lara_col_surftread(struct ITEM_INFO *item /*reg $6*/, struct COLL_INFO *coll /*reg $8*/)
/*
 * Offset 0x4DE40
 * C:\Projects2\Tomb5\GAME\LOT.C (line 57)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ InitialiseLOTarray(int allocmem /*reg $18*/)
{ // line 1, offset 0x4de40
    int i; // register $17
    struct creature_info *creature; // register $16
} // line 19, offset 0x4dec0
/*
 * Offset 0x4DEC0
 * C:\Projects2\Tomb5\GAME\LOT.C (line 83)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ DisableBaddieAI(short item_num /*reg $4*/)
{ // line 1, offset 0x4dec0
    struct ITEM_INFO *item; // register $3
    struct creature_info *creature; // register $4
} // line 18, offset 0x4df0c
/*
 * Offset 0x4DF0C
 * C:\Projects2\Tomb5\GAME\LOT.C (line 110)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ EnableBaddieAI(short item_number /*reg $17*/, int Always /*reg $5*/)
{ // line 1, offset 0x4df0c
    int x; // register $3
    int y; // register $2
    int z; // register $2
    int worstslot; // register $16
    int slot; // register $11
    int worstdist; // register $7
    int dist; // register $3
    struct ITEM_INFO *item; // register $9
    struct creature_info *creature; // register $10
} // line 68, offset 0x4e13c
/*
 * Offset 0x4E13C
 * C:\Projects2\Tomb5\GAME\LOT.C (line 185)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ InitialiseSlot(short item_number /*reg $16*/, int slot /*reg $5*/)
{ // line 1, offset 0x4e13c
    struct creature_info *creature; // register $10
    struct ITEM_INFO *item; // register $17
    int i; // register $6
} // line 136, offset 0x4e330
/*
 * Offset 0x4E330
 * C:\Projects2\Tomb5\GAME\LOT.C (line 324)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ CreateZone(struct ITEM_INFO *item /*reg $9*/)
{ // line 1, offset 0x4e330
    int i; // register $5
    struct creature_info *creature; // register $7
    struct box_node *node; // register $6
    short *zone; // register $8
    short zone_number; // register $10
    short *flip; // register $4
    short flip_number; // register $9
    struct room_info *r; // register $5
} // line 46, offset 0x4e4a0
extern int slots_used; // offset 0xA1234
extern short nAIObjects; // offset 0xA38C8
extern struct AIOBJECT *AIObjects;
extern struct creature_info *baddie_slots;
/*
 * Offset 0x4A684
 * C:\Projects2\Tomb5\GAME\LARAMISC.C (line 294)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ LaraInitialiseMeshes()
{ // line 2, offset 0x4a684
    int i; // register $5
} // line 28, offset 0x4a790
/*
 * Offset 0x4A790
 * C:\Projects2\Tomb5\GAME\LARAMISC.C (line 356)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ LaraCheat(struct ITEM_INFO *item /*reg $17*/, struct COLL_INFO *coll /*reg $5*/)
/*
 * Offset 0x4A838
 * C:\Projects2\Tomb5\GAME\LARAMISC.C (line 419)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ LaraControl(short item_number /*reg $4*/)
{ // line 2, offset 0x4a838
    long oldx; // register $23
    long oldy; // register $30
    long oldz; // stack offset -44
    struct ITEM_INFO *item; // register $16
    int wh; // register $19
    int wd; // register $20
    int hfw; // register $18
    int room_water_state; // register $21
    short room_number; // stack offset -48
} // line 417, offset 0x4b2d8
/*
 * Offset 0x4B308
 * C:\Projects2\Tomb5\GAME\LARAMISC.C (line 1010)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitialiseLaraLoad(short item_num /*reg $4*/)
/*
 * Offset 0x4B340
 * C:\Projects2\Tomb5\GAME\LARAMISC.C (line 1019)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ InitialiseLaraAnims(struct ITEM_INFO *item /*reg $5*/)
/*
 * Offset 0x4B3D8
 * C:\Projects2\Tomb5\GAME\LARAMISC.C (line 1041)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ DelAlignLaraToRope(struct ITEM_INFO *item /*reg $4*/)
/*
 * Offset 0x4B408
 * C:\Projects2\Tomb5\GAME\LARAMISC.C (line 1047)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ GetLaraDeadlyBounds()
{ // line 2, offset 0x4b408
    short *bounds; // register $16
    short tbounds[6]; // stack offset -24
} // line 29, offset 0x4b4f8
extern char *states[131];
extern char *quadrant_names[4];
extern char *gunstates[6];
extern char *waterstates[5];
extern char *guntypes[9];
extern char *coll_typess[8];
extern char *htypes[4];
static struct COLL_INFO *coll; // offset 0xA0B8C
extern short SubsuitAir; // offset 0xA122E
extern struct COLL_INFO mycoll;
extern short cheat_hit_points; // offset 0xA3828
/*
 * Offset 0x4E4E0
 * C:\Projects2\Tomb5\GAME\MISSILE.C (line 61)
 * Stack frame base $29, size 48
 */
int /*reg $31*/ ExplodeFX(struct FX_INFO *fx /*reg $17*/, int NoXZVel /*reg $19*/, long bits /*reg $18*/)
{ // line 1, offset 0x4e4e0
    short **meshpp; // register $2
} // line 24, offset 0x4e600
/*
 * Offset 0x4E600
 * C:\Projects2\Tomb5\GAME\MISSILE.C (line 201)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ ControlBodyPart(short fx_number /*reg $20*/)
{ // line 1, offset 0x4e600
    struct FX_INFO *fx; // register $19
    struct FLOOR_INFO *floor; // register $16
    long height; // register $4
    long ceiling; // register $2
    long ox; // register $18
    long oy; // register $17
    long oz; // register $21
    short room_number; // stack offset -40
    short t; // register $16
} // line 133, offset 0x4ea90
extern struct ITEM_LIGHT fxil;
/*
 * Offset 0x4EAB4
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 96)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ EarthQuake(short item_number /*reg $17*/)
{ // line 1, offset 0x4eab4
    short earth_item; // register $4
    int pitch; // register $6
    struct ITEM_INFO *item; // register $16
} // line 88, offset 0x4ed9c
/*
 * Offset 0x4EDB0
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 186)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ SmashObject(short item_number /*reg $17*/)
{ // line 1, offset 0x4edb0
    struct room_info *r; // register $5
    struct FLOOR_INFO *floor; // register $4
    struct ITEM_INFO *item; // register $16
} // line 26, offset 0x4eef8
/*
 * Offset 0x4EEF8
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 215)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ SmashObjectControl(short item_number /*reg $4*/)
{ // line 1, offset 0x4eef8
} // line 6, offset 0x4ef1c
/*
 * Offset 0x4EF1C
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 223)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ BridgeFlatFloor(struct ITEM_INFO *item /*reg $4*/, long x /*reg $5*/, long y /*reg $6*/, long z /*reg $7*/, long *height /*sp 16*/)
/*
 * Offset 0x4EF58
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 233)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ BridgeFlatCeiling(struct ITEM_INFO *item /*reg $4*/, long x /*reg $5*/, long y /*reg $6*/, long z /*reg $7*/, long *height /*sp 16*/)
/*
 * Offset 0x4EF80
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 240)
 * Stack frame base $29, size 0
 */
long /*reg $31*/ GetOffset(struct ITEM_INFO *item /*reg $4*/, long x /*reg $5*/, long z /*reg $6*/)
/*
 * Offset 0x4EFCC
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 253)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ BridgeTilt1Floor(struct ITEM_INFO *item /*reg $17*/, long x /*reg $5*/, long y /*reg $16*/, long z /*reg $7*/, long *height /*sp 16*/)
{ // line 1, offset 0x4efcc
    long level; // register $3
} // line 11, offset 0x4f038
/*
 * Offset 0x4F038
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 266)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ BridgeTilt1Ceiling(struct ITEM_INFO *item /*reg $17*/, long x /*reg $5*/, long y /*reg $16*/, long z /*reg $7*/, long *height /*sp 16*/)
{ // line 1, offset 0x4f038
    long level; // register $3
} // line 7, offset 0x4f090
/*
 * Offset 0x4F090
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 275)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ BridgeTilt2Floor(struct ITEM_INFO *item /*reg $17*/, long x /*reg $5*/, long y /*reg $16*/, long z /*reg $7*/, long *height /*sp 16*/)
{ // line 1, offset 0x4f090
    long level; // register $3
} // line 11, offset 0x4f0fc
/*
 * Offset 0x4F0FC
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 288)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ BridgeTilt2Ceiling(struct ITEM_INFO *item /*reg $17*/, long x /*reg $5*/, long y /*reg $16*/, long z /*reg $7*/, long *height /*sp 16*/)
{ // line 1, offset 0x4f0fc
    long level; // register $3
} // line 7, offset 0x4f154
/*
 * Offset 0x4F154
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 365)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ ControlAnimatingSlots(short item_number /*reg $16*/)
{ // line 1, offset 0x4f154
    struct ITEM_INFO *item; // register $19
    struct creature_info *c; // register $4
    long f; // register $5
    { // line 10, offset 0x4f1ac
        struct PHD_VECTOR pos; // stack offset -64
        short roomnum; // stack offset -48
    } // line 20, offset 0x4f1fc
    { // line 50, offset 0x4f31c
        short fe; // register $3
    } // line 66, offset 0x4f3ec
    { // line 72, offset 0x4f42c
        struct PHD_VECTOR pos; // stack offset -40
    } // line 76, offset 0x4f460
} // line 125, offset 0x4f680
/*
 * Offset 0x4F69C
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 504)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ PoleCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $16*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x4f69c
    struct ITEM_INFO *item; // register $17
    { // line 12, offset 0x4f74c
        short roty; // register $19
    } // line 36, offset 0x4f800
    { // line 51, offset 0x4f88c
        short roty; // register $18
    } // line 72, offset 0x4f928
} // line 87, offset 0x4f9a4
/*
 * Offset 0x4F9A4
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 593)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ ControlTriggerTriggerer(short item_number /*reg $4*/)
{ // line 1, offset 0x4f9a4
    struct ITEM_INFO *item; // register $17
    short *data; // register $16
} // line 49, offset 0x4faa8
/*
 * Offset 0x4FABC
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 652)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ AnimateWaterfalls()
{ // line 2, offset 0x4fabc
    struct PSXTEXTI *Twaterfall; // register $4
    long i; // register $8
    long speed1; // register $6
    long speed2; // register $11
} // line 30, offset 0x4fbc4
/*
 * Offset 0x4FBC4
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 734)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ControlWaterfall(short item_number /*reg $4*/)
{ // line 1, offset 0x4fbc4
    struct ITEM_INFO *item; // register $16
} // line 18, offset 0x4fc8c
/*
 * Offset 0x4FC8C
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 911)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ TightRopeCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x4fc8c
    struct ITEM_INFO *item; // register $16
    { // line 43, offset 0x4fe64
        long dx; // register $2
        long dz; // register $3
    } // line 50, offset 0x4fea8
} // line 52, offset 0x4fec4
/*
 * Offset 0x4FEC4
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 974)
 * Stack frame base $29, size 72
 */
void /*reg $31*/ ParallelBarsCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $16*/, struct COLL_INFO *coll /*reg $20*/)
{ // line 1, offset 0x4fec4
    struct ITEM_INFO *item; // register $17
    struct PHD_VECTOR pos; // stack offset -56
    struct PHD_VECTOR pos2; // stack offset -40
    short Pass1; // register $19
} // line 61, offset 0x50114
/*
 * Offset 0x50114
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 1037)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ ControlXRayMachine(short item_number /*reg $19*/)
{ // line 1, offset 0x50114
    struct ITEM_INFO *item; // register $17
    { // line 48, offset 0x50298
        long num; // register $16
    } // line 57, offset 0x502f4
    { // line 68, offset 0x50310
        struct room_info *r; // register $4
        struct MESH_INFO *mesh; // register $16
        long j; // register $18
    } // line 86, offset 0x503f4
} // line 95, offset 0x50438
/*
 * Offset 0x50454
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 1134)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ CutsceneRopeControl(short item_number /*reg $4*/)
{ // line 1, offset 0x50454
    struct ITEM_INFO *item; // register $16
    struct PHD_VECTOR pos1; // stack offset -40
    struct PHD_VECTOR pos2; // stack offset -24
    long dx; // register $2
    long dy; // register $5
    long dz; // register $4
} // line 30, offset 0x50594
/*
 * Offset 0x50594
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 1183)
 * Stack frame base $29, size 88
 */
void /*reg $31*/ DrawBaddieGunFlash(struct ITEM_INFO *item /*reg $19*/)
{ // line 1, offset 0x50594
    struct MATRIX3D m; // stack offset -72
    short node[2]; // stack offset -40
    short num; // register $16
    short bite[2]; // stack offset -32
    int RGB1; // register $18
    int RGB2; // register $17
    int RGB3; // register $16
    int shade; // register $2
} // line 34, offset 0x5073c
/*
 * Offset 0x50758
 * C:\Projects2\Tomb5\GAME\OBJECTS.C (line 1261)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ HybridCollision(short item_num /*reg $4*/, struct ITEM_INFO *laraitem /*reg $5*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x50758
    struct ITEM_INFO *item; // register $8
} // line 7, offset 0x507cc
static struct PHD_VECTOR PolePos; // offset 0xA1238
static struct PHD_VECTOR PolePosR; // offset 0xA1244
static short PoleBounds[12]; // offset 0xA1250
extern int AnimatingWaterfallsVOffset; // offset 0xA1268
static short TightRopeBounds[12]; // offset 0xA126C
static struct PHD_VECTOR TightRopePos; // offset 0xA1284
static short ParallelBarsBounds[12]; // offset 0xA1290
extern struct BITE_INFO EnemyBites[9];
/*
 * Offset 0x507DC
 * C:\Projects2\Tomb5\GAME\PEOPLE.C (line 58)
 * Stack frame base $29, size 56
 */
int /*reg $31*/ TargetVisible(struct ITEM_INFO *item /*reg $4*/, struct AI_info *info /*reg $5*/)
{ // line 1, offset 0x507dc
    struct GAME_VECTOR start; // stack offset -40
    struct GAME_VECTOR target; // stack offset -24
    struct creature_info *creature; // register $3
    struct ITEM_INFO *enemy; // register $16
    short *bounds; // register $2
} // line 34, offset 0x508ec
/*
 * Offset 0x508EC
 * C:\Projects2\Tomb5\GAME\PEOPLE.C (line 94)
 * Stack frame base $29, size 64
 */
int /*reg $31*/ Targetable(struct ITEM_INFO *item /*reg $17*/, struct AI_info *info /*reg $5*/)
{ // line 1, offset 0x508ec
    struct GAME_VECTOR start; // stack offset -48
    struct GAME_VECTOR target; // stack offset -32
    struct creature_info *creature; // register $2
    struct ITEM_INFO *enemy; // register $16
    short *bounds; // register $4
} // line 56, offset 0x50a34
/*
 * Offset 0x50A34
 * C:\Projects2\Tomb5\GAME\PEOPLE.C (line 152)
 * Stack frame base $29, size 0
 */
short /*reg $31*/ GunShot(long x /*reg $4*/, long y /*reg $5*/, long z /*reg $6*/, short speed /*reg $7*/, int yrot /*sp 16*/, int room_number /*sp 20*/)
/*
 * Offset 0x50A3C
 * C:\Projects2\Tomb5\GAME\PEOPLE.C (line 184)
 * Stack frame base $29, size 72
 */
short /*reg $31*/ GunHit(long x /*reg $19*/, long y /*reg $20*/, long z /*reg $21*/, short speed /*reg $7*/, int yrot /*sp 16*/, int room_number /*sp 20*/)
{ // line 1, offset 0x50a3c
    struct PHD_VECTOR pos; // stack offset -48
} // line 12, offset 0x50b58
/*
 * Offset 0x50B58
 * C:\Projects2\Tomb5\GAME\PEOPLE.C (line 199)
 * Stack frame base $29, size 72
 */
short /*reg $31*/ GunMiss(long x /*reg $20*/, long y /*reg $21*/, long z /*reg $22*/, short speed /*reg $7*/, int yrot /*sp 16*/, int room_number /*sp 20*/)
{ // line 1, offset 0x50b58
    struct GAME_VECTOR pos; // stack offset -48
} // line 13, offset 0x50c74
/*
 * Offset 0x50C74
 * C:\Projects2\Tomb5\GAME\PEOPLE.C (line 215)
 * Stack frame base $29, size 128
 */
int /*reg $31*/ ShotLara(struct ITEM_INFO *item /*reg $19*/, struct AI_info *info /*reg $16*/, struct BITE_INFO *gun /*reg $21*/, short extra_rotation /*reg $7*/, int damage /*sp 16*/)
{ // line 1, offset 0x50c74
    int hit; // register $16
    int targetable; // register $18
    int random; // register $16
    int distance; // register $2
    struct GAME_VECTOR start; // stack offset -104
    struct GAME_VECTOR target; // stack offset -88
    struct creature_info *creature; // register $3
    struct ITEM_INFO *enemy; // register $17
    struct PHD_VECTOR pos; // stack offset -72
    { // line 65, offset 0x50e94
        struct PHD_VECTOR v; // stack offset -56
        struct MESH_INFO *StaticMesh; // stack offset -40
    } // line 102, offset 0x50fdc
} // line 105, offset 0x51004
/*
 * Offset 0x536A0
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 136)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ WriteSG(void *pointer /*reg $4*/, int size /*reg $5*/)
{ // line 1, offset 0x536a0
    char *data; // register $4
} // line 18, offset 0x536e0
/*
 * Offset 0x536E0
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 157)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ ReadSG(void *pointer /*reg $4*/, int size /*reg $5*/)
{ // line 1, offset 0x536e0
    char *data; // register $4
} // line 10, offset 0x53720
/*
 * Offset 0x53720
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 189)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ CheckSumValid(char *buffer /*reg $4*/)
{ // line 1, offset 0x53720
    { // line 1, offset 0x53720
    } // line 23, offset 0x53738
} // line 26, offset 0x53738
/*
 * Offset 0x53738
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 232)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ SaveLaraData()
{ // line 2, offset 0x53738
    int i; // register $4
    { // line 30, offset 0x53844
        struct ITEM_INFO *item; // register $3
    } // line 37, offset 0x53894
} // line 41, offset 0x538d0
/*
 * Offset 0x538D0
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 290)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ RestoreLaraData(int FullSave /*reg $4*/)
{ // line 2, offset 0x538d0
    { // line 29, offset 0x5397c
        char flag; // register $17
    } // line 39, offset 0x539c4
    { // line 45, offset 0x539d8
        struct ITEM_INFO *item; // register $4
    } // line 58, offset 0x53a4c
    { // line 63, offset 0x53a4c
        int i; // register $4
    } // line 67, offset 0x53a74
} // line 71, offset 0x53aac
/*
 * Offset 0x53AAC
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 378)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ SaveLevelData(int FullSave /*reg $22*/)
{ // line 1, offset 0x53aac
    int i; // register $19
    int j; // register $5
    short pos; // stack offset -58
    short word; // stack offset -64
    struct room_info *r; // register $17
    struct ITEM_INFO *item; // register $17
    unsigned char byte; // stack offset -62
    { // line 59, offset 0x53bf0
        int k; // register $16
    } // line 74, offset 0x53c78
    { // line 102, offset 0x53db8
        unsigned short packed; // stack offset -60
        struct object_info *obj; // register $18
        { // line 231, offset 0x541ac
            unsigned long flags; // stack offset -52
            { // line 276, offset 0x54374
                char lflags; // stack offset -56
            } // line 296, offset 0x544a0
        } // line 297, offset 0x544a0
    } // line 306, offset 0x544c8
    { // line 356, offset 0x546ac
        int flare_age; // stack offset -48
    } // line 358, offset 0x546ac
    { // line 381, offset 0x54748
        struct RAT_STRUCT *rat; // register $16
        short objnum; // register $3
        short maxval; // register $17
    } // line 447, offset 0x54910
    { // line 452, offset 0x54920
        struct BAT_STRUCT *bat; // register $16
    } // line 505, offset 0x54aac
} // line 514, offset 0x54b08
/*
 * Offset 0x54B08
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 909)
 * Stack frame base $29, size 96
 */
void /*reg $31*/ RestoreLevelData(int FullSave /*sp 0*/)
{ // line 1, offset 0x54b08
    int i; // register $21
    int j; // register $20
    char byte; // stack offset -74
    unsigned short word; // stack offset -78
    short sword; // stack offset -80
    struct room_info *r; // register $17
    struct ITEM_INFO *item; // register $19
    short item_number; // register $20
    struct creature_info *creature; // register $16
    { // line 46, offset 0x54c30
        int k; // register $19
        { // line 62, offset 0x54cc4
            struct FLOOR_INFO *floor; // register $16
            short room_number; // stack offset -76
        } // line 69, offset 0x54d1c
    } // line 75, offset 0x54d40
    { // line 99, offset 0x54e6c
        char anim; // stack offset -62
        unsigned short packed; // stack offset -72
        struct object_info *obj; // register $17
        { // line 124, offset 0x54eec
            unsigned short room_number; // stack offset -70
            { // line 170, offset 0x55054
            } // line 174, offset 0x55080
        } // line 175, offset 0x55080
        { // line 181, offset 0x55094
            short req; // stack offset -64
            short goal; // stack offset -66
            short current; // stack offset -68
        } // line 202, offset 0x55120
        { // line 213, offset 0x55150
            unsigned long flags; // stack offset -52
            { // line 277, offset 0x553d8
                char lflags; // stack offset -61
            } // line 285, offset 0x5540c
        } // line 309, offset 0x55508
    } // line 348, offset 0x55650
    { // line 352, offset 0x5567c
        unsigned char numberof; // stack offset -60
        { // line 397, offset 0x5579c
            int flare_age; // stack offset -48
        } // line 399, offset 0x5579c
        { // line 420, offset 0x55820
            struct RAT_STRUCT *rat; // register $16
            short objnum; // register $3
            { // line 440, offset 0x55884
                unsigned short uword; // stack offset -58
            } // line 464, offset 0x5592c
        } // line 470, offset 0x55964
        { // line 475, offset 0x55974
            struct BAT_STRUCT *bat; // register $16
            { // line 485, offset 0x559b0
                unsigned short uword; // stack offset -56
            } // line 509, offset 0x55a58
        } // line 515, offset 0x55a90
    } // line 523, offset 0x55ac0
} // line 526, offset 0x55af8
/*
 * Offset 0x55AF8
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 1478)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ sgSaveGame()
{ // line 2, offset 0x55af8
    { // line 2, offset 0x55af8
    } // line 22, offset 0x55b88
} // line 27, offset 0x55b88
/*
 * Offset 0x55B88
 * C:\Projects2\Tomb5\GAME\SAVEGAME.C (line 1507)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ sgRestoreGame()
extern char FromTitle; // offset 0xA14AC
extern char JustLoaded; // offset 0xA14AD
extern char *MGSaveGamePtr; // offset 0xA3924
static int SGcount; // offset 0xA391C
static char *SGpoint; // offset 0xA3920
extern struct savegame_info savegame;
/*
 * Offset 0x55BE0
 * C:\Projects2\Tomb5\GAME\SOUND.C (line 1060)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ SayNo()
{ // line 2, offset 0x55be0
    int fx; // register $4
} // line 11, offset 0x55c3c
extern int sound_active; // offset 0xA14B0
extern short *sample_lut; // offset 0xA392C
extern struct SAMPLE_INFO *sample_infos;
extern struct SoundSlot LaSlot[24];
/*
 * Offset 0x55C3C
 * C:\Projects2\Tomb5\GAME\SPHERE.C (line 79)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ TestCollision(struct ITEM_INFO *item /*reg $20*/, struct ITEM_INFO *laraitem /*reg $17*/)
{ // line 1, offset 0x55c3c
    int num1; // register $19
    int num2; // register $12
    int x1; // register $11
    int y1; // register $10
    int z1; // register $16
    int r1; // register $9
    int x; // register $3
    int y; // register $4
    int z; // register $2
    int r; // register $5
    int i; // register $8
    int j; // register $7
    unsigned long flags; // register $18
    struct SPHERE *ptr1; // register $16
    struct SPHERE *ptr2; // register $6
} // line 66, offset 0x55de4
extern char GotLaraSpheres; // offset 0xA3A20
extern int NumLaraSpheres; // offset 0xA3A24
extern struct SPHERE LaraSpheres[15];
extern struct SPHERE Slist[34];
/*
 * Offset 0x55DE4
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 277)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ SwitchTrigger(short item_num /*reg $6*/, short timer /*reg $5*/)
{ // line 1, offset 0x55de4
    struct ITEM_INFO *item; // register $16
} // line 43, offset 0x55f4c
/*
 * Offset 0x55F4C
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 322)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ GetSwitchTrigger(struct ITEM_INFO *item /*reg $16*/, short *ItemNos /*reg $17*/, long AttatchedToSwitch /*reg $6*/)
{ // line 1, offset 0x55f4c
    short *data; // register $5
    short num; // register $7
} // line 43, offset 0x56080
/*
 * Offset 0x56080
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 371)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ GetKeyTrigger(struct ITEM_INFO *item /*reg $16*/)
{ // line 1, offset 0x56080
    short *data; // register $4
} // line 40, offset 0x561a8
/*
 * Offset 0x561A8
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 414)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ TestTriggersAtXYZ(long x /*reg $20*/, long y /*reg $19*/, long z /*reg $18*/, short room_number /*sp -32*/, int heavy /*sp 16*/, int flags /*sp 20*/)
{ // line 1, offset 0x561a8
} // line 7, offset 0x5623c
/*
 * Offset 0x5623C
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 423)
 * Stack frame base $29, size 88
 */
void /*reg $31*/ SwitchControl(short item_number /*reg $19*/)
{ // line 1, offset 0x5623c
    struct ITEM_INFO *item; // register $17
    { // line 6, offset 0x562a0
        struct PHD_VECTOR pos; // stack offset -72
        struct ITEM_INFO *switem; // register $16
        short TriggerItems[8]; // stack offset -56
        short NumTrigs; // register $2
        short room_number; // stack offset -40
    } // line 33, offset 0x563e4
} // line 51, offset 0x56470
/*
 * Offset 0x56470
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 492)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ SwitchCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x56470
    struct ITEM_INFO *item; // register $16
    { // line 15, offset 0x56558
        short *bounds; // register $4
    } // line 131, offset 0x56874
} // line 141, offset 0x568a4
/*
 * Offset 0x568C0
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 646)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ SwitchCollision2(short item_num /*reg $19*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x568c0
    struct ITEM_INFO *item; // register $16
} // line 41, offset 0x56a0c
/*
 * Offset 0x56A2C
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 695)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ UnderwaterSwitchCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x56a2c
    struct ITEM_INFO *item; // register $16
    { // line 12, offset 0x56afc
        int flag; // register $19
    } // line 56, offset 0x56c78
} // line 57, offset 0x56c98
/*
 * Offset 0x56C98
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 760)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ PulleyCollision(short item_num /*reg $16*/, struct ITEM_INFO *l /*reg $18*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x56c98
    struct ITEM_INFO *item; // register $17
    { // line 12, offset 0x56d74
        short roty; // register $20
    } // line 43, offset 0x56e5c
} // line 48, offset 0x56e9c
/*
 * Offset 0x56E9C
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 816)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ TurnSwitchControl(short item_num /*reg $19*/)
{ // line 1, offset 0x56e9c
    struct ITEM_INFO *item; // register $17
    struct ITEM_INFO *l; // register $18
} // line 78, offset 0x57210
/*
 * Offset 0x57210
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 896)
 * Stack frame base $29, size 72
 */
void /*reg $31*/ TurnSwitchCollision(short item_num /*reg $16*/, struct ITEM_INFO *l /*reg $20*/, struct COLL_INFO *coll /*reg $21*/)
{ // line 1, offset 0x57210
    int flag; // register $17
    struct ITEM_INFO *item; // register $19
    { // line 61, offset 0x57504
        short Triggers[8]; // stack offset -48
    } // line 96, offset 0x57608
} // line 120, offset 0x576f4
/*
 * Offset 0x576F4
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1024)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ RailSwitchCollision(short item_num /*reg $16*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $21*/)
{ // line 1, offset 0x576f4
    int flag; // register $19
    struct ITEM_INFO *item; // register $18
} // line 71, offset 0x57980
/*
 * Offset 0x57980
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1103)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ JumpSwitchCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $16*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x57980
    struct ITEM_INFO *item; // register $17
} // line 28, offset 0x57acc
/*
 * Offset 0x57ACC
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1139)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ CrowbarSwitchCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $16*/, struct COLL_INFO *coll /*reg $21*/)
{ // line 1, offset 0x57acc
    int flag; // register $19
    struct ITEM_INFO *item; // register $17
} // line 112, offset 0x57eb8
/*
 * Offset 0x57EB8
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1259)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ FullBlockSwitchControl(short item_number /*reg $4*/)
{ // line 1, offset 0x57eb8
    struct ITEM_INFO *item; // register $6
} // line 25, offset 0x57fb8
/*
 * Offset 0x57FB8
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1286)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ FullBlockSwitchCollision(short item_num /*reg $17*/, struct ITEM_INFO *l /*reg $18*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x57fb8
    struct ITEM_INFO *item; // register $16
} // line 50, offset 0x581d8
/*
 * Offset 0x581D8
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1344)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ CogSwitchControl(short item_num /*reg $17*/)
{ // line 1, offset 0x581d8
    struct ITEM_INFO *item; // register $16
} // line 38, offset 0x58354
/*
 * Offset 0x58354
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1384)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ CogSwitchCollision(short item_num /*reg $16*/, struct ITEM_INFO *l /*reg $20*/, struct COLL_INFO *coll /*reg $22*/)
{ // line 1, offset 0x58354
    short *data; // register $4
    struct DOOR_DATA *door; // register $21
    struct ITEM_INFO *door_item; // register $18
    struct ITEM_INFO *item; // register $17
} // line 71, offset 0x5864c
/*
 * Offset 0x58674
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1463)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ CrowDoveSwitchControl(short item_number /*reg $4*/)
{ // line 1, offset 0x58674
    struct ITEM_INFO *item; // register $16
} // line 21, offset 0x5872c
/*
 * Offset 0x58740
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1486)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ CrowDoveSwitchCollision(short item_num /*reg $17*/, struct ITEM_INFO *l /*reg $18*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x58740
    struct ITEM_INFO *item; // register $16
    { // line 13, offset 0x58830
        short roty; // register $20
    } // line 44, offset 0x58918
} // line 49, offset 0x58958
/*
 * Offset 0x58958
 * C:\Projects2\Tomb5\GAME\SWITCH.C (line 1537)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ ProcessExplodingSwitchType8(struct ITEM_INFO *item /*reg $17*/)
{ // line 1, offset 0x58958
    struct PHD_VECTOR pos; // stack offset -32
} // line 11, offset 0x58a1c
static short Switch2Bounds[12]; // offset 0xA14B4
static struct PHD_VECTOR Switch2Position; // offset 0xA14CC
static short TurnSwitchBoundsA[12]; // offset 0xA14D8
static struct PHD_VECTOR TurnSwitchPos; // offset 0xA14F0
static short TurnSwitchBoundsC[12]; // offset 0xA14FC
static struct PHD_VECTOR TurnSwitchPosA; // offset 0xA1514
static struct PHD_VECTOR CogSwitchPos; // offset 0xA1520
static short CogSwitchBounds[12]; // offset 0xA152C
static struct PHD_VECTOR RailSwitchPos; // offset 0xA1544
static short RailSwitchBounds[12]; // offset 0xA1550
static struct PHD_VECTOR RailSwitchPos2; // offset 0xA1568
static short RailSwitchBounds2[12]; // offset 0xA1574
static short JumpSwitchBounds[12]; // offset 0xA158C
static struct PHD_VECTOR JumpSwitchPos; // offset 0xA15A4
static struct PHD_VECTOR CrowbarPos; // offset 0xA15B0
static short CrowbarBounds[12]; // offset 0xA15BC
static struct PHD_VECTOR CrowbarPos2; // offset 0xA15D4
static short CrowbarBounds2[12]; // offset 0xA15E0
static short FullBlockSwitchBounds[12]; // offset 0xA15F8
static struct PHD_VECTOR FullBlockSwitchPos; // offset 0xA1610
static short PulleyBounds[12]; // offset 0xA161C
static struct PHD_VECTOR PulleyPos; // offset 0xA1634
static struct PHD_VECTOR CrowDovePos; // offset 0xA1640
static short UnderwaterSwitchBounds[12]; // offset 0xA164C
static short UnderwaterSwitchBounds2[12]; // offset 0xA1664
static struct PHD_VECTOR UnderwaterSwitchPos; // offset 0xA167C
static struct PHD_VECTOR UnderwaterSwitchPos2; // offset 0xA1688
static short SwitchBounds[12]; // offset 0xA1694
static struct PHD_VECTOR SwitchPos; // offset 0xA16AC
extern unsigned char CurrentSequence; // offset 0xA3A28
extern unsigned char Sequences[3];
extern unsigned char SequenceResults[3][3][3];
extern unsigned char SequenceUsed[6];
/*
 * Offset 0x51004
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 199)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ PuzzleDone(struct ITEM_INFO *item /*reg $17*/, short item_num /*reg $16*/)
{ // line 1, offset 0x51004
    struct ITEM_INFO *litem; // register $16
    int lp; // register $18
} // line 47, offset 0x51200
/*
 * Offset 0x51200
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 248)
 * Stack frame base $29, size 40
 */
short * /*reg $31*/ FindPlinth(struct ITEM_INFO *item /*reg $18*/)
{ // line 1, offset 0x51200
    int i; // register $17
    short *p; // register $7
    short item_num; // register $5
    struct room_info *r; // register $19
    struct MESH_INFO *mesh; // register $16
    { // line 16, offset 0x51290
        short *o; // register $4
    } // line 27, offset 0x51324
    { // line 39, offset 0x5136c
        struct ITEM_INFO *plinth; // register $4
    } // line 54, offset 0x513fc
} // line 61, offset 0x51450
/*
 * Offset 0x51450
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 315)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ AnimatingPickUp(short item_number /*reg $17*/)
{ // line 1, offset 0x51450
    struct ITEM_INFO *item; // register $16
    short room_number; // stack offset -24
} // line 34, offset 0x515ac
/*
 * Offset 0x515AC
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 351)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ RegeneratePickups()
{ // line 2, offset 0x515ac
    struct ITEM_INFO *item; // register $4
    short objnum; // register $3
    short lp; // register $3
    short *ammo; // register $2
} // line 37, offset 0x516c8
/*
 * Offset 0x516C8
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 390)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ PickUpCollision(short item_num /*reg $19*/, struct ITEM_INFO *l /*reg $18*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x516c8
    short rotx; // register $23
    short roty; // register $22
    short rotz; // register $30
    struct ITEM_INFO *item; // register $17
    { // line 42, offset 0x5187c
        int flag; // register $21
        short *bounds; // register $5
    } // line 263, offset 0x51c3c
    { // line 301, offset 0x51ddc
        int ime; // register $16
        struct ITEM_INFO *itemme; // register $2
    } // line 310, offset 0x51e38
} // line 423, offset 0x52158
/*
 * Offset 0x52188
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 816)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ KeyHoleCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $19*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x52188
    struct ITEM_INFO *item; // register $16
    { // line 20, offset 0x522ac
        int key; // register $20
        int hole; // register $21
    } // line 77, offset 0x52474
} // line 85, offset 0x524a0
/*
 * Offset 0x524C8
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 903)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ PuzzleDoneCollision(short item_num /*reg $4*/, struct ITEM_INFO *l /*reg $5*/, struct COLL_INFO *coll /*reg $6*/)
/*
 * Offset 0x52520
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 911)
 * Stack frame base $29, size 88
 */
void /*reg $31*/ PuzzleHoleCollision(short item_num /*reg $20*/, struct ITEM_INFO *l /*reg $16*/, struct COLL_INFO *coll /*reg $18*/)
{ // line 1, offset 0x52520
    int PuzzleType; // register $22
    struct ITEM_INFO *item; // register $17
    int hole; // register $21
    { // line 29, offset 0x52670
        short *bounds; // register $18
        short yrot; // register $23
        { // line 70, offset 0x52774
            struct PHD_VECTOR pos; // stack offset -72
            int puzzle; // register $5
            { // line 78, offset 0x527c4
                long angle; // register $2
                struct PHD_VECTOR pos; // stack offset -56
            } // line 99, offset 0x52840
        } // line 190, offset 0x52a8c
    } // line 200, offset 0x52ad8
} // line 230, offset 0x52be4
/*
 * Offset 0x52C14
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 1150)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ KeyTrigger(short item_num /*reg $4*/)
{ // line 1, offset 0x52c14
    struct ITEM_INFO *item; // register $4
    { // line 7, offset 0x52c80
        int oldkey; // register $5
    } // line 15, offset 0x52cb8
} // line 18, offset 0x52cc0
/*
 * Offset 0x52CC0
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 1174)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ PickupTrigger(short item_num /*reg $5*/)
{ // line 1, offset 0x52cc0
    struct ITEM_INFO *item; // register $4
} // line 19, offset 0x52d54
/*
 * Offset 0x52D54
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 1219)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ SearchObjectControl(short item_number /*reg $18*/)
{ // line 1, offset 0x52d54
    struct ITEM_INFO *item; // register $16
    short ObjNum; // register $17
    short frame; // register $7
    short flip; // register $6
} // line 89, offset 0x53080
/*
 * Offset 0x53080
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 1313)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ SearchObjectCollision(short item_num /*reg $17*/, struct ITEM_INFO *l /*reg $19*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x53080
    struct ITEM_INFO *item; // register $16
    short ObjNum; // register $20
    { // line 16, offset 0x53184
        short *bounds; // register $6
    } // line 67, offset 0x53350
} // line 76, offset 0x5339c
/*
 * Offset 0x5339C
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 1391)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ CollectCarriedItems(struct ITEM_INFO *item /*reg $19*/)
{ // line 1, offset 0x5339c
    struct ITEM_INFO *pickup; // register $16
    short pickup_number; // register $17
} // line 19, offset 0x53428
/*
 * Offset 0x53428
 * C:\Projects2\Tomb5\GAME\PICKUP.C (line 1423)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ MonitorScreenCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $17*/, struct COLL_INFO *coll /*reg $20*/)
{ // line 1, offset 0x53428
    struct ITEM_INFO *item; // register $16
    { // line 14, offset 0x53544
        short *bounds; // register $2
    } // line 45, offset 0x53660
} // line 51, offset 0x536a0
static short PickUpBounds[12]; // offset 0xA1338
static struct PHD_VECTOR PickUpPosition; // offset 0xA1350
static short HiddenPickUpBounds[12]; // offset 0xA135C
static struct PHD_VECTOR HiddenPickUpPosition; // offset 0xA1374
static short CrowbarPickUpBounds[12]; // offset 0xA1380
static struct PHD_VECTOR CrowbarPickUpPosition; // offset 0xA1398
static short JobyCrowPickUpBounds[12]; // offset 0xA13A4
static struct PHD_VECTOR JobyCrowPickUpPosition; // offset 0xA13BC
static short PlinthPickUpBounds[12]; // offset 0xA13C8
static struct PHD_VECTOR PlinthPickUpPosition; // offset 0xA13E0
static short PickUpBoundsUW[12]; // offset 0xA13EC
static struct PHD_VECTOR PickUpPositionUW; // offset 0xA1404
static short KeyHoleBounds[12]; // offset 0xA1410
static struct PHD_VECTOR KeyHolePosition; // offset 0xA1428
static short PuzzleBounds[12]; // offset 0xA1434
static short SOBounds[12]; // offset 0xA144C
static struct PHD_VECTOR SOPos; // offset 0xA1464
extern short SearchCollectFrames[4];
extern short SearchAnims[4];
extern short SearchOffsets[4];
static short MSBounds[12]; // offset 0xA1488
static struct PHD_VECTOR MSPos; // offset 0xA14A0
extern unsigned char NumRPickups; // offset 0xA390C
extern unsigned char RPickups[16];
extern struct PHD_VECTOR OldPickupPos;
/*
 * Offset 0x5D018
 * C:\Projects2\Tomb5\GAME\OBJLIGHT.C (line 28)
 * Stack frame base $29, size 104
 */
void /*reg $31*/ TriggerAlertLight(long x /*reg $18*/, long y /*reg $19*/, long z /*reg $17*/, long r /*reg $21*/, long g /*sp 16*/, long b /*sp 20*/, long angle /*sp 24*/, int room_no /*sp 28*/, int falloff /*sp 32*/)
{ // line 1, offset 0x5d018
    long sin; // register $3
    long cos; // register $2
    struct GAME_VECTOR src; // stack offset -72
    struct GAME_VECTOR target; // stack offset -56
} // line 21, offset 0x5d118
/*
 * Offset 0x5D118
 * C:\Projects2\Tomb5\GAME\OBJLIGHT.C (line 51)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ ControlStrobeLight(short item_number /*reg $4*/)
{ // line 1, offset 0x5d118
    struct ITEM_INFO *item; // register $20
    long angle; // register $16
    long sin; // register $4
    long cos; // register $6
    long r; // register $18
    long g; // register $19
    long b; // register $17
} // line 30, offset 0x5d254
/*
 * Offset 0x5D254
 * C:\Projects2\Tomb5\GAME\OBJLIGHT.C (line 83)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ ControlPulseLight(short item_number /*reg $4*/)
{ // line 1, offset 0x5d254
    struct ITEM_INFO *item; // register $16
    long sin; // register $6
    long r; // register $5
    long g; // register $4
    long b; // register $2
} // line 24, offset 0x5d368
/*
 * Offset 0x5D368
 * C:\Projects2\Tomb5\GAME\OBJLIGHT.C (line 109)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ ControlColouredLight(short item_number /*reg $4*/)
{ // line 1, offset 0x5d368
    struct ITEM_INFO *item; // register $16
    long r; // register $3
    long g; // register $3
    long b; // register $2
} // line 14, offset 0x5d3f8
/*
 * Offset 0x5D3F8
 * C:\Projects2\Tomb5\GAME\OBJLIGHT.C (line 125)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ ControlElectricalLight(short item_number /*reg $4*/)
{ // line 1, offset 0x5d3f8
    struct ITEM_INFO *item; // register $16
    long shade; // register $17
    long r; // register $5
    long g; // register $4
    long b; // register $2
} // line 74, offset 0x5d64c
/*
 * Offset 0x5D660
 * C:\Projects2\Tomb5\GAME\OBJLIGHT.C (line 201)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ ControlBlinker(short item_number /*reg $4*/)
{ // line 1, offset 0x5d660
    struct ITEM_INFO *item; // register $16
    struct PHD_VECTOR pos; // stack offset -24
    long r; // register $2
    long g; // register $2
    long b; // register $3
} // line 24, offset 0x5d74c
extern int FootPrintNum; // offset 0xA3A54
extern struct FOOTPRINT FootPrint[32];
/*
 * Offset 0x5D74C
 * C:\Projects2\Tomb5\SPEC_PSX\3D_GEN.C (line 554)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ phd_InitWindow(int view_angle /*reg $4*/)
extern long phd_left; // offset 0xA3A7C
extern long phd_right; // offset 0xA3A84
extern long phd_top; // offset 0xA3A74
extern long phd_bottom; // offset 0xA3A58
extern long phd_persp; // offset 0xA3A80
extern long w2v_matrix[12];
extern long *phd_mxptr; // offset 0xA3A78
extern long matrix_stack[24];
extern struct PHD_3DPOS viewer;
extern struct VECTOR3D CamPos;
extern struct VECTOR3D CamTgt;
/*
 * Offset 0x5D7FC
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 138)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ CDDA_SetVolume(int nVolume /*reg $4*/)
{ // line 3, offset 0x5d7fc
    struct SpuCommonAttr attr; // stack offset -48
} // line 12, offset 0x5d838
/*
 * Offset 0x5D838
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 162)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ XAReplay()
{ // line 2, offset 0x5d838
    struct CdlLOC loc; // stack offset -16
} // line 8, offset 0x5d884
/*
 * Offset 0x5D884
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 182)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ cbvsync()
{ // line 2, offset 0x5d884
    int ret; // register $5
    unsigned char io[8]; // stack offset -16
    { // line 86, offset 0x5daec
        int cnt; // register $2
    } // line 93, offset 0x5db20
} // line 120, offset 0x5dc10
/*
 * Offset 0x5DC10
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 320)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ S_CDPlay(short track /*reg $16*/, int mode /*reg $17*/)
{ // line 1, offset 0x5dc10
    unsigned char param[4]; // stack offset -24
} // line 39, offset 0x5dcbc
/*
 * Offset 0x5DCD0
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 370)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ S_CDStop()
/*
 * Offset 0x5DD14
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 402)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ S_CDPause()
/*
 * Offset 0x5DD40
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 424)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ S_CDRestart()
/*
 * Offset 0x5DD78
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 446)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ S_StartSyncedAudio(int nTrack /*reg $4*/)
/*
 * Offset 0x5DDC4
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 490)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ CDDA_SetMasterVolume(int nVolume /*reg $4*/)
/*
 * Offset 0x5DDE8
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 524)
 * Stack frame base $29, size 2200
 */
void /*reg $31*/ InitNewCDSystem()
{ // line 2, offset 0x5dde8
    int i; // register $16
    long local_wadfile_header[512]; // stack offset -2184
    { // line 38, offset 0x5de28
        struct CdlFILE fp; // stack offset -136
        char buf[80]; // stack offset -112
    } // line 41, offset 0x5de28
} // line 58, offset 0x5deb0
/*
 * Offset 0x5DEB0
 * C:\Projects2\Tomb5\SPEC_PSX\CD.C (line 733)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ DEL_ChangeCDMode(int mode /*reg $3*/)
{ // line 1, offset 0x5deb0
    unsigned char param[4]; // stack offset -16
} // line 40, offset 0x5df58
extern unsigned short XATrackClip[136];
extern short XAFadeRate; // offset 0xA176C
extern int current_cd_mode; // offset 0xA177C
extern int XACurPos; // offset 0xA3BE0
extern int XAEndPos; // offset 0xA3BE4
extern short XAVolume; // offset 0xA3BC8
extern short XAReqVolume; // offset 0xA3BE8
extern short XAMasterVolume; // offset 0xA3BCC
extern short XATrack; // offset 0xA3BC4
extern short XAReqTrack; // offset 0xA3BD8
extern char XAFlag; // offset 0xA3BD4
extern char XAWait; // offset 0xA3BD0
static char XARepeat; // offset 0xA3B2C
extern int XAStartPos; // offset 0xA3BDC
static int XATrackList[17][2]; // offset 0xA3B3C
/*
 * Offset 0x58A1C
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 129)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ OpenTrapDoor(struct ITEM_INFO *item /*reg $6*/)
{ // line 1, offset 0x58a1c
    long x; // register $2
    long z; // register $4
    struct room_info *r; // register $5
    struct FLOOR_INFO *floor; // register $3
    unsigned short pitsky; // register $7
} // line 36, offset 0x58b68
/*
 * Offset 0x58B68
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 167)
 * Stack frame base $29, size 104
 */
void /*reg $31*/ CloseTrapDoor(struct ITEM_INFO *item /*reg $9*/)
{ // line 1, offset 0x58b68
    long x; // register $2
    long z; // register $2
    struct room_info *r; // register $7
    unsigned short pitsky; // register $8
    struct FLOOR_INFO *floor; // register $3
    { // line 14, offset 0x58bdc
    } // line 14, offset 0x58bdc
    { // line 30, offset 0x58c64
    } // line 30, offset 0x58c64
    { // line 46, offset 0x58cdc
        char buf[80]; // stack offset -88
    } // line 54, offset 0x58cf0
} // line 59, offset 0x58d08
/*
 * Offset 0x58D08
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 232)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TrapDoorControl(short item_number /*reg $4*/)
{ // line 1, offset 0x58d08
    struct ITEM_INFO *item; // register $16
} // line 34, offset 0x58e80
/*
 * Offset 0x58E80
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 269)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ FloorTrapDoorCollision(short item_num /*reg $18*/, struct ITEM_INFO *l /*reg $19*/, struct COLL_INFO *coll /*reg $20*/)
{ // line 1, offset 0x58e80
    struct ITEM_INFO *item; // register $17
    { // line 15, offset 0x58f78
        long y; // register $3
    } // line 36, offset 0x59080
} // line 50, offset 0x5912c
/*
 * Offset 0x5912C
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 321)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ CeilingTrapDoorCollision(short item_num /*reg $21*/, struct ITEM_INFO *l /*reg $18*/, struct COLL_INFO *coll /*reg $23*/)
{ // line 1, offset 0x5912c
    struct ITEM_INFO *item; // register $16
    short pass2; // register $19
} // line 45, offset 0x593f8
/*
 * Offset 0x593F8
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 368)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ TrapDoorCollision(short item_num /*reg $4*/, struct ITEM_INFO *l /*reg $8*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x593f8
    struct ITEM_INFO *item; // register $5
} // line 6, offset 0x5947c
/*
 * Offset 0x5947C
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 381)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ FallingBlockCollision(short item_number /*reg $4*/, struct ITEM_INFO *l /*reg $5*/, struct COLL_INFO *coll /*reg $6*/)
{ // line 1, offset 0x5947c
    struct ITEM_INFO *item; // register $16
    long x; // register $3
    long z; // register $5
    long tx; // register $2
    long tz; // register $4
} // line 23, offset 0x59558
/*
 * Offset 0x59558
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 406)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ FallingBlock(short item_number /*reg $5*/)
{ // line 1, offset 0x59558
    struct ITEM_INFO *item; // register $16
} // line 32, offset 0x59664
/*
 * Offset 0x59674
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 440)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ FallingBlockFloor(struct ITEM_INFO *item /*reg $4*/, long x /*reg $5*/, long y /*reg $6*/, long z /*reg $7*/, long *height /*sp 16*/)
{ // line 1, offset 0x59674
    long tx; // register $2
    long tz; // register $3
} // line 15, offset 0x596d4
/*
 * Offset 0x596D4
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 457)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ FallingBlockCeiling(struct ITEM_INFO *item /*reg $4*/, long x /*reg $5*/, long y /*reg $6*/, long z /*reg $7*/, long *height /*sp 16*/)
{ // line 1, offset 0x596d4
    long tx; // register $2
    long tz; // register $3
} // line 11, offset 0x59720
/*
 * Offset 0x59720
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 474)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ FallingCeiling(short item_number /*reg $17*/)
{ // line 1, offset 0x59720
    struct ITEM_INFO *item; // register $16
    short room_number; // stack offset -24
} // line 42, offset 0x59874
/*
 * Offset 0x5988C
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 522)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ DartEmitterControl(short item_num /*reg $4*/)
{ // line 1, offset 0x5988c
    struct ITEM_INFO *item; // register $17
    struct ITEM_INFO *dart; // register $16
    short dart_num; // register $19
    long x; // register $18
    long z; // register $22
    long lp; // register $17
    long xand; // register $20
    long zand; // register $21
    { // line 64, offset 0x59a30
        long rnd; // register $2
    } // line 66, offset 0x59a5c
} // line 73, offset 0x59aa8
/*
 * Offset 0x59AD4
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 601)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ DartsControl(short item_num /*reg $21*/)
{ // line 1, offset 0x59ad4
    struct ITEM_INFO *item; // register $16
    struct FLOOR_INFO *floor; // register $17
    short room_number; // stack offset -40
    long lp; // register $17
    long ox; // register $18
    long oz; // register $19
    long speed; // register $4
} // line 42, offset 0x59cf4
/*
 * Offset 0x59D18
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 645)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ FlameEmitterControl(short item_number /*reg $4*/)
{ // line 1, offset 0x59d18
    struct ITEM_INFO *item; // register $17
    unsigned long distance; // register $16
    long x; // register $19
    long z; // register $18
} // line 111, offset 0x5a1bc
/*
 * Offset 0x5A1BC
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 760)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ FlameEmitter2Control(short item_number /*reg $4*/)
{ // line 1, offset 0x5a1bc
    struct ITEM_INFO *item; // register $16
    long r; // register $17
    long g; // register $4
} // line 83, offset 0x5a38c
/*
 * Offset 0x5A38C
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 865)
 * Stack frame base $29, size 112
 */
void /*reg $31*/ FlameEmitter3Control(short item_number /*reg $4*/)
{ // line 1, offset 0x5a38c
    struct ITEM_INFO *item; // register $18
    struct PHD_3DPOS pos; // stack offset -80
    long x; // register $16
    long z; // register $17
    long distance; // register $3
    long r; // register $2
    long g; // register $3
    { // line 12, offset 0x5a3e8
        struct PHD_VECTOR s; // stack offset -56
        struct PHD_VECTOR d; // stack offset -40
        short g; // register $20
        short b; // register $19
        { // line 43, offset 0x5a5b0
            struct ITEM_INFO *item2; // register $16
        } // line 63, offset 0x5a740
    } // line 67, offset 0x5a758
} // line 134, offset 0x5aa4c
/*
 * Offset 0x5AA6C
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1003)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ FlameControl(short fx_number /*reg $18*/)
{ // line 1, offset 0x5aa6c
    struct FX_INFO *fx; // register $16
    long y; // register $17
    long r; // register $17
    long g; // register $4
} // line 53, offset 0x5ace4
/*
 * Offset 0x5ACE4
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1058)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ LaraBurn()
{ // line 2, offset 0x5ace4
    struct FX_INFO *fx; // register $3
} // line 15, offset 0x5ad68
/*
 * Offset 0x5AD78
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1076)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ LavaBurn(struct ITEM_INFO *item /*reg $16*/)
{ // line 1, offset 0x5ad78
    short room_number; // stack offset -16
} // line 20, offset 0x5adf8
/*
 * Offset 0x5AE08
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1108)
 * Stack frame base $29, size 80
 */
void /*reg $31*/ ControlRollingBall(short item_number /*sp -60*/)
{ // line 1, offset 0x5ae08
    struct ITEM_INFO *item; // register $17
    short room_number; // stack offset -64
    short velnotadjusted; // register $4
    unsigned short destyrot; // register $3
    unsigned short tyrot; // register $16
    long h; // register $21
    long fx; // register $18
    long fz; // register $19
    long fh; // register $22
    long fhf; // register $19
    long bz; // register $20
    long bh; // stack offset -56
    long bhf; // register $18
    long rx; // register $23
    long rh; // stack offset -52
    long rhf; // register $20
    long lx; // register $30
    long lh; // stack offset -48
    long lhf; // register $5
} // line 247, offset 0x5b720
/*
 * Offset 0x5B750
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1357)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ RollingBallCollision(short item_number /*reg $17*/, struct ITEM_INFO *laraitem /*reg $18*/, struct COLL_INFO *coll /*reg $19*/)
{ // line 1, offset 0x5b750
    struct ITEM_INFO *item; // register $16
} // line 23, offset 0x5b838
/*
 * Offset 0x5B854
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1383)
 * Stack frame base $29, size 72
 */
void /*reg $31*/ DrawScaledSpike(struct ITEM_INFO *item /*reg $16*/)
{ // line 1, offset 0x5b854
    struct object_info *object; // register $4
    struct room_info *r; // register $3
    struct VECTOR v; // stack offset -56
    short **meshpp; // register $18
    int clip; // register $17
    short *frmptr[2]; // stack offset -40
    int rate; // stack offset -24
    { // line 76, offset 0x5b9e4
        struct CVECTOR c; // stack offset -32
        long scale; // register $4
    } // line 92, offset 0x5ba2c
} // line 103, offset 0x5ba68
/*
 * Offset 0x5BA80
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1498)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ TwoBlockPlatformFloor(struct ITEM_INFO *item /*reg $16*/, long x /*reg $5*/, long y /*reg $18*/, long z /*reg $7*/, long *height /*sp 16*/)
/*
 * Offset 0x5BB08
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1514)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ TwoBlockPlatformCeiling(struct ITEM_INFO *item /*reg $16*/, long x /*reg $5*/, long y /*reg $17*/, long z /*reg $7*/, long *height /*sp 16*/)
/*
 * Offset 0x5BB80
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1526)
 * Stack frame base $29, size 0
 */
int /*reg $31*/ OnTwoBlockPlatform(struct ITEM_INFO *item /*reg $4*/, long x /*reg $5*/, long z /*reg $6*/)
{ // line 1, offset 0x5bb80
    int tx; // register $8
    int tz; // register $7
} // line 22, offset 0x5bc7c
/*
 * Offset 0x5BC7C
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1550)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ ControlTwoBlockPlatform(short item_number /*reg $17*/)
{ // line 1, offset 0x5bc7c
    struct ITEM_INFO *item; // register $16
    long height; // stack offset -20
    { // line 17, offset 0x5bcf4
        short room_number; // stack offset -24
    } // line 23, offset 0x5bd38
} // line 57, offset 0x5be50
/*
 * Offset 0x5BE64
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1623)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ TestBoundsCollideTeethSpikes(struct ITEM_INFO *item /*reg $7*/)
{ // line 1, offset 0x5be64
    long x; // register $16
    long y; // register $17
    long z; // register $18
    short *larabounds; // register $4
    long minx; // register $5
    long maxx; // register $8
    long minz; // register $6
    long maxz; // register $3
    long size; // register $19
} // line 44, offset 0x5c000
/*
 * Offset 0x5C000
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1669)
 * Stack frame base $29, size 64
 */
void /*reg $31*/ ControlScaledSpike(short item_number /*reg $4*/)
{ // line 1, offset 0x5c000
    struct ITEM_INFO *item; // register $18
    short room_number; // stack offset -40
    int num; // register $22
    int dx; // register $19
    int dy; // register $20
    int dz; // register $17
    short *larabounds; // register $17
    short *bounds; // register $16
    short yt; // register $7
    short yb; // register $21
    short iyb1; // register $5
    short iyb2; // register $3
    { // line 12, offset 0x5c064
        short hit; // register $2
    } // line 102, offset 0x5c464
} // line 136, offset 0x5c56c
/*
 * Offset 0x5C56C
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1808)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ControlRaisingBlock(short item_number /*reg $4*/)
{ // line 1, offset 0x5c56c
    struct ITEM_INFO *item; // register $16
} // line 71, offset 0x5c8bc
/*
 * Offset 0x5C8BC
 * C:\Projects2\Tomb5\GAME\TRAPS.C (line 1886)
 * Stack frame base $29, size 96
 */
void /*reg $31*/ ControlExplosion(short item_number /*reg $21*/)
{ // line 1, offset 0x5c8bc
    struct ITEM_INFO *item; // register $18
    struct PHD_VECTOR pos; // stack offset -64
    struct ITEM_INFO *target; // register $16
    struct ITEM_INFO **itemlist; // register $17
    struct MESH_INFO **staticlist; // register $19
    struct MESH_INFO *staticp; // register $16
    char *cptr; // register $16
    long dx; // register $17
    long dy; // register $16
    long dz; // register $3
    long lp; // register $19
    long uw; // register $20
    { // line 130, offset 0x5cf74
        struct ITEM_INFO *switem; // register $2
        short TriggerItems[8]; // stack offset -48
        short NumTrigs; // register $6
    } // line 139, offset 0x5cfe0
} // line 144, offset 0x5cff0
extern short SPxzoffs[8];
extern short SPyoffs[8];
static struct PHD_VECTOR FloorTrapDoorPos; // offset 0xA16B8
static short FloorTrapDoorBounds[12]; // offset 0xA16C4
static struct PHD_VECTOR CeilingTrapDoorPos; // offset 0xA16DC
static short CeilingTrapDoorBounds[12]; // offset 0xA16E8
extern unsigned char Flame3xzoffs[16][2];
extern short SPDETyoffs[8];
/*
 * Offset 0x5DF68
 * C:\Projects2\Tomb5\SPEC_PSX\GPU.C (line 101)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ GPU_UseOrderingTables(unsigned long *pBuffers /*reg $6*/, int nOTSize /*reg $5*/)
/*
 * Offset 0x5DFB0
 * C:\Projects2\Tomb5\SPEC_PSX\GPU.C (line 113)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ GPU_UsePolygonBuffers(unsigned long *pBuffers /*reg $4*/, int nPBSize /*reg $5*/)
/*
 * Offset 0x5DFDC
 * C:\Projects2\Tomb5\SPEC_PSX\GPU.C (line 135)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ GPU_EndScene()
{ // line 3, offset 0x5dfdc
    int nPolys; // register $2
    static int nWorstPolys; // offset 0x10
} // line 55, offset 0x5e078
/*
 * Offset 0x5E078
 * C:\Projects2\Tomb5\SPEC_PSX\GPU.C (line 211)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ GPU_FlipNoIdle()
/*
 * Offset 0x5E1B4
 * C:\Projects2\Tomb5\SPEC_PSX\GPU.C (line 640)
 * Stack frame base $29, size 96
 */
void /*reg $31*/ do_gfx_debug_mode(unsigned long *otstart /*reg $4*/)
{ // line 1, offset 0x5e1b4
    unsigned long *data; // register $4
    unsigned char code; // register $5
    int ntri; // register $6
    int nquad; // register $16
    { // line 35, offset 0x5e268
    } // line 37, offset 0x5e268
    { // line 48, offset 0x5e2a0
    } // line 50, offset 0x5e2a0
    { // line 60, offset 0x5e2d4
        unsigned short x0; // register $8
        unsigned short y0; // register $9
        unsigned short x1; // register $10
        unsigned short y1; // register $11
        unsigned short x2; // register $5
        unsigned short y2; // register $7
        struct LINE_F2 *line2; // register $2
        { // line 66, offset 0x5e2dc
        } // line 68, offset 0x5e2dc
        { // line 108, offset 0x5e370
        } // line 133, offset 0x5e3c4
    } // line 134, offset 0x5e3c4
    { // line 141, offset 0x5e3e8
        char txbuf[64]; // stack offset -72
    } // line 146, offset 0x5e438
} // line 148, offset 0x5e438
/*
 * Offset 0x5E448
 * C:\Projects2\Tomb5\SPEC_PSX\GPU.C (line 940)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ GPU_FlipStory(unsigned long *gfx /*reg $17*/)
{ // line 1, offset 0x5e448
    struct RECT r; // stack offset -24
    struct RECT *fuckmyanalpassage; // register $2
} // line 32, offset 0x5e528
extern unsigned long GnFrameCounter; // offset 0xA1780
extern unsigned long GnLastFrameCount; // offset 0xA1784
extern struct PSXTEXTSTRUCT *psxtextinfo;
extern struct PSXSPRITESTRUCT *psxspriteinfo;
extern int rgbscaleme; // offset 0xA1794
extern int gfx_debugging_mode; // offset 0xA1798
extern struct DB_STRUCT db;
extern struct MMTEXTURE *RoomTextInfo;
extern unsigned long GadwOrderingTables_V2[512];
static int LnFlipFrame; // offset 0xA3BEC
extern unsigned long GadwOrderingTables[5128];
extern unsigned long GadwPolygonBuffers[52260];
/*
 * Offset 0x5E528
 * C:\Projects2\Tomb5\SPEC_PSX\FILE.C (line 57)
 * Stack frame base $29, size 32
 */
int /*reg $31*/ FILE_Load(char *szFileName /*reg $16*/, void *pDest /*reg $17*/)
{ // line 1, offset 0x5e528
    int nHandle; // register $18
    unsigned long dwFileSize; // register $16
    unsigned long dwBytesRead; // register $17
} // line 46, offset 0x5e60c
/*
 * Offset 0x5E60C
 * C:\Projects2\Tomb5\SPEC_PSX\FILE.C (line 143)
 * Stack frame base $29, size 32
 */
unsigned long /*reg $31*/ FILE_Length(char *szFileName /*reg $16*/)
{ // line 1, offset 0x5e60c
    int nHandle; // register $17
    unsigned long dwFileSize; // register $16
} // line 33, offset 0x5e6a8
/*
 * Offset 0x5E6A8
 * C:\Projects2\Tomb5\SPEC_PSX\FILE.C (line 180)
 * Stack frame base $29, size 24
 */
int /*reg $31*/ FILE_Read(void *pDest /*reg $5*/, int nItemSize /*reg $5*/, int nItems /*reg $6*/, int nHandle /*reg $7*/)
{ // line 1, offset 0x5e6a8
    int nAmount; // register $6
} // line 14, offset 0x5e6d4
/*
 * Offset 0x5E6D4
 * C:\Projects2\Tomb5\SPEC_PSX\FILE.C (line 214)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ RelocateModule(unsigned long Module /*reg $4*/, unsigned long *RelocData /*reg $5*/)
{ // line 1, offset 0x5e6d4
    unsigned int *rel; // register $6
} // line 24, offset 0x5e79c
/*
 * Offset 0x5E79C
 * C:\Projects2\Tomb5\SPEC_PSX\MALLOC.C (line 72)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ init_game_malloc()
/*
 * Offset 0x5E7E8
 * C:\Projects2\Tomb5\SPEC_PSX\MALLOC.C (line 85)
 * Stack frame base $29, size 104
 */
char * /*reg $31*/ game_malloc(int size /*reg $6*/)
{ // line 2, offset 0x5e7e8
    char *ptr; // register $4
    { // line 16, offset 0x5e828
        char buf[80]; // stack offset -88
    } // line 16, offset 0x5e828
} // line 26, offset 0x5e85c
/*
 * Offset 0x5E85C
 * C:\Projects2\Tomb5\SPEC_PSX\MALLOC.C (line 113)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ game_free(int size /*reg $4*/)
/*
 * Offset 0x5E894
 * C:\Projects2\Tomb5\SPEC_PSX\MALLOC.C (line 123)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ show_game_malloc_totals()
extern char *malloc_ptr; // offset 0xA450C
extern int malloc_used; // offset 0xA4510
extern int malloc_free; // offset 0xA4518
extern int script_malloc_size; // offset 0xA4514
extern char malloc_buffer[1085440];
/*
 * Offset 0x5F450
 * C:\Projects2\Tomb5\SPEC_PSX\3D_OBJ.C (line 49)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ CreateMonoScreen()
{ // line 2, offset 0x5f450
    int i; // register $16
    struct RECT r; // stack offset -32
    unsigned short *s; // register $18
    unsigned char *d; // register $17
} // line 52, offset 0x5f628
extern struct TSV tsv_buffer[512];
/*
 * Offset 0x5F628
 * C:\Projects2\Tomb5\SPEC_PSX\PSXINPUT.C (line 191)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ S_UpdateInput()
{ // line 2, offset 0x5f628
    int state; // register $17
    unsigned char type; // register $18
    unsigned long in; // register $16
    static unsigned long Pad2; // offset 0x0
    static int pause_db; // offset 0xc
    static int option_db; // offset 0x10
    static char LookCnt; // offset 0x14
    { // line 151, offset 0x5fa3c
        char pos; // register $4
        char walking; // register $5
    } // line 290, offset 0x5fcfc
    { // line 353, offset 0x5fe70
        static int send; // offset 0x18
    } // line 374, offset 0x5fed4
} // line 474, offset 0x600cc
static struct pad_configs pad_cons[5]; // offset 0x93F38
extern unsigned char DualShock; // offset 0xA1885
extern unsigned char PadConnected; // offset 0xA1886
extern short reset_count; // offset 0xA188E
extern char SayNoCount; // offset 0xA1884
static unsigned char align[6]; // offset 0xA1888
extern long input; // offset 0xA457C
extern long dbinput; // offset 0xA4580
extern long dbinput2; // offset 0xA458C
extern long inputBusy; // offset 0xA4528
extern long RawPad; // offset 0xA4578
extern long RawEdge; // offset 0xA4520
extern unsigned char Motors[2];
extern long LaraLookY; // offset 0xA4588
extern long LaraLookX; // offset 0xA4584
extern struct ControllerPacket GPad1;
extern struct ControllerPacket GPad2;
extern unsigned long Edge2; // offset 0xA4574
extern struct GouraudBarColourSet healthBarColourSet;
extern struct GouraudBarColourSet poisonBarColourSet;
extern struct GouraudBarColourSet airBarColourSet;
extern struct GouraudBarColourSet dashBarColourSet;
/*
 * Offset 0x600E4
 * C:\Projects2\Tomb5\SPEC_PSX\ROOMLOAD.C (line 98)
 * Stack frame base $29, size 112
 */
void /*reg $31*/ ReloadAnims(int name /*reg $4*/, long len /*reg $17*/)
{ // line 1, offset 0x600e4
    int file; // register $16
    char buf[80]; // stack offset -96
} // line 18, offset 0x60188
/*
 * Offset 0x60188
 * C:\Projects2\Tomb5\SPEC_PSX\ROOMLOAD.C (line 123)
 * Stack frame base $29, size 120
 */
void /*reg $31*/ S_LoadLevelFile(int Name /*reg $19*/)
{ // line 1, offset 0x60188
    char buf[80]; // stack offset -104
    unsigned long *mod; // register $4
    int len; // register $18
    int file; // register $16
} // line 72, offset 0x602ac
extern long AnimFilePos; // offset 0xA45F0
extern long AnimFileLen; // offset 0xA45EC
extern short *floor_data; // offset 0xA45B8
extern unsigned long *SetupPtr; // offset 0xA4594
extern unsigned short ClutStartY; // offset 0xA4590
extern struct SVECTOR *RoomBBoxes;
extern short *mesh_base; // offset 0xA45B4
extern struct PSXSPRITESTRUCT *GLOBAL_default_sprites_ptr;
extern struct PSXTEXTI *AnimatingWaterfalls[6];
extern int AnimatingWaterfallsV[6];
extern unsigned long envmap_data[6];
extern unsigned long *RelocPtr[128];
/*
 * Offset 0x602AC
 * C:\Projects2\Tomb5\SPEC_PSX\LOAD_LEV.C (line 89)
 * Stack frame base $29, size 40
 */
void /*reg $31*/ LOAD_Start(int file_number /*reg $4*/)
{ // line 3, offset 0x602ac
    { // line 3, offset 0x602ac
        char *gfx; // register $19
        unsigned short *gfx2; // register $17
        unsigned short *cdgfx; // register $18
        int x; // register $4
        int y; // register $3
        unsigned long *tmpptr; // register $3
        { // line 3, offset 0x602ac
            int file; // register $16
        } // line 3, offset 0x602ac
        { // line 60, offset 0x603b4
            unsigned short dat; // register $3
        } // line 66, offset 0x603d4
    } // line 77, offset 0x60434
} // line 88, offset 0x60434
/*
 * Offset 0x60434
 * C:\Projects2\Tomb5\SPEC_PSX\LOAD_LEV.C (line 181)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ LOAD_Stop()
extern unsigned char LtLoadingBarEnabled; // offset 0xA1938
extern unsigned char LoadingBarEnabled; // offset 0xA1939
extern unsigned char _first_time_ever; // offset 0xA193A
extern short DelRotAng; // offset 0xA45F8
extern struct STASHEDOBJ *cur_stashed_object;
extern struct STASHEDDAT *cur_stashed_matrix;
extern int num_objects_stashed; // offset 0xA4850
extern struct STASHEDOBJ stashed_objects_list[128];
extern struct STASHEDDAT stashed_matrix_list[240];
extern unsigned char char_anim; // offset 0xA4C54
extern unsigned char OurSqrt[1024];
extern struct WATERTAB WaterTable[22][64];
extern struct MATRIX3D *Matrix;
extern unsigned short SqrtTable[210];
extern unsigned short ScalarTable[198];
extern struct MATRIX3D iMatrixStack[32];
extern struct SVECTOR CamRot;
extern struct MATRIX3D *iMatrix;
extern unsigned short MatrixSP; // offset 0xA5478
extern struct MATRIX3D MatrixStack[32];
extern long iFrac; // offset 0xA4C64
extern long iRate; // offset 0xA4C68
extern long iAmbientR; // offset 0xA4C6C
extern long iAmbientG; // offset 0xA4C74
extern long iAmbientB; // offset 0xA4C70
extern long atanOctantTab[8];
extern short atanTab[2050];
/*
 * Offset 0x62320
 * C:\Projects2\Tomb5\SPEC_PSX\DRAWSPKS.C (line 551)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ S_DrawDarts(struct ITEM_INFO *item /*reg $16*/)
{ // line 1, offset 0x62320
    struct LINE_G2 *lineg2; // register $5
    long x; // register $7
    long y; // register $2
    long z; // register $4
    long speed; // register $4
    short *scrxy; // register $10
    long *scrz; // register $9
    short *TempMesh; // register $6
} // line 63, offset 0x625fc
extern long TorchWibble[8];
extern struct MATRIX3D CamGTE;
extern struct MATRIX3D LightPos;
/*
 * Offset 0x604A4
 * C:\Projects2\Tomb5\SPEC_PSX\PSOUTPUT.C (line 35)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ SetupPadVibration(short num /*reg $4*/, short acc /*reg $5*/, short lev /*reg $6*/, short sus /*reg $7*/, int dec /*sp 16*/, int len /*sp 20*/)
{ // line 1, offset 0x604a4
    struct VIBRATION *v; // register $4
} // line 12, offset 0x604ec
/*
 * Offset 0x604EC
 * C:\Projects2\Tomb5\SPEC_PSX\PSOUTPUT.C (line 49)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ VibratePad()
{ // line 2, offset 0x604ec
    int i; // register $6
    struct VIBRATION *v; // register $4
} // line 66, offset 0x6068c
static struct VIBRATION vib[2]; // offset 0xA463C
/*
 * Offset 0x6068C
 * C:\Projects2\Tomb5\SPEC_PSX\SPECIFIC.C (line 368)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ S_control_screen_position()
/*
 * Offset 0x607A8
 * C:\Projects2\Tomb5\SPEC_PSX\SPECIFIC.C (line 494)
 * Stack frame base $29, size 24
 */
long /*reg $31*/ S_DumpScreen()
{ // line 2, offset 0x607a8
} // line 16, offset 0x607c8
/*
 * Offset 0x607C8
 * C:\Projects2\Tomb5\SPEC_PSX\SPECIFIC.C (line 514)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ S_ExitSystem(char *exit_message /*reg $16*/)
{ // line 1, offset 0x607c8
} // line 16, offset 0x6080c
/*
 * Offset 0x6080C
 * C:\Projects2\Tomb5\SPEC_PSX\SPECIFIC.C (line 585)
 * Stack frame base $29, size 160
 */
void /*reg $31*/ DisplayConfig(int x /*sp 0*/, int y /*reg $30*/)
{ // line 1, offset 0x6080c
    { // line 4, offset 0x6084c
        unsigned short *wp; // register $17
    } // line 4, offset 0x6084c
    { // line 39, offset 0x60b2c
        char buf[80]; // stack offset -128
        int seconds; // register $16
    } // line 98, offset 0x60f04
} // line 99, offset 0x60f34
/*
 * Offset 0x60F34
 * C:\Projects2\Tomb5\SPEC_PSX\SPECIFIC.C (line 686)
 * Stack frame base $29, size 40
 */
int /*reg $31*/ DoPauseMenu()
{ // line 2, offset 0x60f34
    char *s; // register $16
    long result; // register $6
    int prompt; // register $18
    { // line 82, offset 0x6117c
        unsigned short *vol; // register $6
        short level; // register $4
    } // line 106, offset 0x61224
} // line 223, offset 0x615cc
/*
 * Offset 0x615CC
 * C:\Projects2\Tomb5\SPEC_PSX\SPECIFIC.C (line 911)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ gInit()
/*
 * Offset 0x61658
 * C:\Projects2\Tomb5\SPEC_PSX\SPECIFIC.C (line 1038)
 * Stack frame base $29, size 56
 */
short /*reg $31*/ S_Death()
{ // line 2, offset 0x61658
    short ret; // register $17
    unsigned char flag; // register $18
    unsigned char Cursor; // register $19
} // line 99, offset 0x61928
/*
 * Offset 0x61928
 * C:\Projects2\Tomb5\SPEC_PSX\SPECIFIC.C (line 1149)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ DisplayStatsUCunt()
extern unsigned short AnimComp; // offset 0xA1950
extern short AnimatingTexturesVOffset; // offset 0xA1952
static struct REQUESTER PauseReq; // offset 0xA1954
static struct REQUESTER AdjustReq; // offset 0xA1968
static struct REQUESTER QuitReq; // offset 0xA197C
extern struct REQUESTER SettingsReq;
extern struct REQUESTER ConfigReq;
static struct REQUESTER StatisticsReq; // offset 0xA19B8
static unsigned short PadStrings[5][8]; // offset 0xA19CC
extern unsigned char SoundFXVolume; // offset 0xA4664
extern unsigned short nAnimTextureRanges; // offset 0xA466C
extern unsigned short *AnimTextureRanges; // offset 0xA4670
extern unsigned short nAnimUVRanges; // offset 0xA4660
extern int GtSFXEnabled; // offset 0xA4668
static unsigned char PauseMenuNum; // offset 0xA465C
extern short AnimatingTexturesV[16][8][3];
/*
 * Offset 0x6194C
 * C:\Projects2\Tomb5\SPEC_PSX\PROFILE.C (line 78)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ProfileCallBack()
/*
 * Offset 0x61978
 * C:\Projects2\Tomb5\SPEC_PSX\PROFILE.C (line 85)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ProfileInit(int scale /*reg $4*/)
/*
 * Offset 0x61A0C
 * C:\Projects2\Tomb5\SPEC_PSX\PROFILE.C (line 100)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ProfileStartCount()
/*
 * Offset 0x61A48
 * C:\Projects2\Tomb5\SPEC_PSX\PROFILE.C (line 120)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ ProfileReadCount()
{ // line 2, offset 0x61a48
} // line 7, offset 0x61a90
/*
 * Offset 0x61A90
 * C:\Projects2\Tomb5\SPEC_PSX\PROFILE.C (line 132)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ ProfileAddOT(unsigned long *ot /*reg $11*/)
{ // line 1, offset 0x61a90
    int count; // register $8
    { // line 24, offset 0x61ba8
    } // line 30, offset 0x61bc0
} // line 38, offset 0x61c8c
/*
 * Offset 0x61C94
 * C:\Projects2\Tomb5\SPEC_PSX\PROFILE.C (line 173)
 * Stack frame base $29, size 32
 */
void /*reg $31*/ ProfileRGB(int r /*reg $16*/, int g /*reg $17*/, int b /*reg $18*/)
/*
 * Offset 0x61D1C
 * C:\Projects2\Tomb5\SPEC_PSX\PROFILE.C (line 191)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ ProfileAddDrawOT(unsigned long *ot /*reg $9*/)
{ // line 1, offset 0x61d1c
    char count; // register $6
} // line 38, offset 0x61ee0
static struct SCALE scales[3]; // offset 0x93FD8
extern char ProfileDraw; // offset 0xA1A9C
extern int numprof; // offset 0xA4688
static unsigned long EHbl; // offset 0xA4674
static int grid; // offset 0xA4678
static short divisor; // offset 0xA467C
static short nummarks; // offset 0xA467E
static short finalCount; // offset 0xA4680
static short currentCount; // offset 0xA4682
static short drawCount; // offset 0xA4684
static short profile_xcnt; // offset 0xA4686
extern struct COCKSUCK ProfileInfo[32];
/*
 * Offset 0x61EE8
 * C:\Projects2\Tomb5\SPEC_PSX\MEMCARD.C (line 83)
 * Stack frame base $29, size 48
 */
void /*reg $31*/ mcDir()
{ // line 2, offset 0x61ee8
    int i; // register $19
    int j; // register $20
    int k; // register $17
    struct DIRENTRY *dir; // register $18
} // line 24, offset 0x6204c
/*
 * Offset 0x6204C
 * C:\Projects2\Tomb5\SPEC_PSX\MEMCARD.C (line 128)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ mcOpen(int sync /*reg $16*/)
{ // line 1, offset 0x6204c
    { // line 12, offset 0x62084
        int i; // register $16
    } // line 19, offset 0x6209c
} // line 20, offset 0x620ac
/*
 * Offset 0x620AC
 * C:\Projects2\Tomb5\SPEC_PSX\MEMCARD.C (line 165)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ mcClose()
/*
 * Offset 0x620CC
 * C:\Projects2\Tomb5\SPEC_PSX\MEMCARD.C (line 186)
 * Stack frame base $29, size 32
 */
unsigned char /*reg $31*/ mcGetStatus()
{ // line 2, offset 0x620cc
    long stat; // register $4
    unsigned long cmd; // stack offset -16
    unsigned long res; // stack offset -12
} // line 125, offset 0x622d8
/*
 * Offset 0x622D8
 * C:\Projects2\Tomb5\SPEC_PSX\MEMCARD.C (line 328)
 * Stack frame base $29, size 32
 */
long /*reg $31*/ mcFormat()
{ // line 2, offset 0x622d8
    unsigned long cmd; // stack offset -16
    unsigned long res; // stack offset -12
} // line 13, offset 0x62320
extern unsigned char mcInit; // offset 0xA4844
extern unsigned char mcStatus; // offset 0xA4824
extern unsigned long mcNumFiles; // offset 0xA4794
extern unsigned char mcBlocksFree; // offset 0xA4790
extern char mcFileNames[7][20];
extern int mcFileLengths[7];
static unsigned char mcActualStatus; // offset 0xA478C
/*
 * Offset 0x62610
 * C:\Projects2\Tomb5\SPEC_PSX\SPUSOUND.C (line 197)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ SPU_FreeSamples()
/*
 * Offset 0x62650
 * C:\Projects2\Tomb5\SPEC_PSX\SPUSOUND.C (line 208)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ SPU_Init()
{ // line 2, offset 0x62650
    int nChannel; // register $16
} // line 30, offset 0x626e4
extern short DepthTable[5];
extern short CurrentReverb; // offset 0xA1DF8
extern int LnSamplesLoaded; // offset 0xA54CC
extern long LlVABAddr; // offset 0xA54D0
extern struct SpuVoiceAttr sva;
extern unsigned char LabSampleType[24];
extern unsigned char LabFreeChannel[24];
extern int LnFreeChannels; // offset 0xA5504
static unsigned char LabSPUMallocArea[16]; // offset 0xA547C
extern unsigned long LadwSampleAddr[256];
/*
 * Offset 0x626E4
 * C:\Projects2\Tomb5\SPEC_PSX\LOADSAVE.C (line 229)
 * Stack frame base $29, size 152
 */
int /*reg $31*/ DisplayFiles(int cursor /*sp 0*/, int maxfiles /*reg $5*/)
{ // line 1, offset 0x626e4
    int i; // register $19
    int n; // register $20
    int y; // register $17
    unsigned short flags; // register $22
    { // line 24, offset 0x6279c
        char buf[80]; // stack offset -120
        { // line 28, offset 0x627b4
            struct PACKEDNAME *pn; // register $8
        } // line 28, offset 0x627b4
    } // line 47, offset 0x62870
} // line 61, offset 0x6297c
/*
 * Offset 0x6297C
 * C:\Projects2\Tomb5\SPEC_PSX\LOADSAVE.C (line 314)
 * Stack frame base $29, size 56
 */
int /*reg $31*/ LoadGame()
{ // line 2, offset 0x6297c
    unsigned char stat; // register $16
    int ret; // register $19
    unsigned char cancel; // register $18
    static int cursor; // offset 0x0
    static unsigned char init; // offset 0x144
    static unsigned char func; // offset 0x145
    { // line 33, offset 0x62a40
        long cmd; // stack offset -32
        long result; // stack offset -28
        static unsigned char AutoTime; // offset 0x4
        static unsigned char AutoFunc; // offset 0x5
        static struct REQUESTER *AutoRequester; // offset 0x8
        { // line 83, offset 0x62b10
            int nfiles; // register $5
        } // line 107, offset 0x62bf8
    } // line 182, offset 0x62dc0
} // line 199, offset 0x62e3c
/*
 * Offset 0x62E3C
 * C:\Projects2\Tomb5\SPEC_PSX\LOADSAVE.C (line 532)
 * Stack frame base $29, size 64
 */
int /*reg $31*/ SaveGame()
{ // line 2, offset 0x62e3c
    unsigned char cancel; // register $18
    unsigned char stat; // register $16
    int ret; // register $19
    static int cursor; // offset 0xc
    static unsigned char init; // offset 0x146
    static struct PACKEDNAME pn; // offset 0x10
    static unsigned char func; // offset 0x147
    { // line 14, offset 0x62e68
        int seconds; // register $16
    } // line 41, offset 0x62ff4
    { // line 51, offset 0x63034
        int i; // register $5
        int nfiles; // register $5
        long cmd; // stack offset -32
        long result; // stack offset -28
        static unsigned char AutoTime; // offset 0x24
        static unsigned char AutoFunc; // offset 0x25
        static struct REQUESTER *AutoRequester; // offset 0x28
        { // line 151, offset 0x63268
            char slots[7]; // stack offset -40
            struct PACKEDNAME *p; // register $2
        } // line 175, offset 0x63340
        { // line 354, offset 0x63568
            int i; // register $3
        } // line 358, offset 0x63598
    } // line 393, offset 0x63690
} // line 411, offset 0x63718
static struct REQUESTER InsertReq; // offset 0xA1DFC
static struct REQUESTER CheckingReq; // offset 0xA1E10
static struct REQUESTER FormatReq; // offset 0xA1E24
static struct REQUESTER OverwriteReq; // offset 0xA1E38
static struct REQUESTER LoadingReq; // offset 0xA1E4C
static struct REQUESTER SavingReq; // offset 0xA1E60
static struct REQUESTER FormattingReq; // offset 0xA1E74
static struct REQUESTER LoadOkReq; // offset 0xA1E88
static struct REQUESTER LoadErrorReq; // offset 0xA1E9C
static struct REQUESTER SaveOkReq; // offset 0xA1EB0
static struct REQUESTER SaveErrorReq; // offset 0xA1EC4
static struct REQUESTER FormatErrorReq; // offset 0xA1ED8
static struct REQUESTER NotFormatReq; // offset 0xA1EEC
static struct REQUESTER NoSpaceReq; // offset 0xA1F00
static struct REQUESTER NoGamesReq; // offset 0xA1F14
/*
 * Offset 0x63718
 * C:\Projects2\Tomb5\SPEC_PSX\REQUEST.C (line 178)
 * Stack frame base $29, size 112
 */
long /*reg $31*/ Requester(struct REQUESTER *r /*reg $19*/)
{ // line 1, offset 0x63718
    int x; // register $20
    int y; // register $18
    short top; // stack offset -48
    unsigned short w; // stack offset -56
    unsigned short h; // stack offset -54
    int i; // register $17
    int optiony; // register $22
    unsigned short rx; // register $21
    unsigned short ry; // register $23
    unsigned short rw; // stack offset -52
    unsigned short rh; // stack offset -50
    short OptionTop[5]; // stack offset -88
    short OptionBottom[5]; // stack offset -72
    { // line 66, offset 0x63a90
        int val; // register $16
    } // line 68, offset 0x63ad0
} // line 132, offset 0x63f04
/*
 * Offset 0x63F04
 * C:\Projects2\Tomb5\SPEC_PSX\DRAWPHAS.C (line 100)
 * Stack frame base $29, size 40
 */
long /*reg $31*/ DrawPhaseGame()
{ // line 2, offset 0x63f04
    short scalarx; // register $7
    short scalary; // register $8
    short scalarz; // register $9
} // line 107, offset 0x643fc
/*
 * Offset 0x643FC
 * C:\Projects2\Tomb5\SPEC_PSX\DRAWPHAS.C (line 230)
 * Stack frame base $29, size 56
 */
void /*reg $31*/ DrawRooms(short current_room /*reg $16*/)
{ // line 1, offset 0x643fc
    struct room_info *r; // register $4
    { // line 146, offset 0x649b8
        short old_anim; // register $12
        short old_frame; // register $13
        short old_left_arm[2]; // stack offset -40
        short old_right_arm[2]; // stack offset -32
        short *old_arm_anim[2]; // stack offset -24
    } // line 197, offset 0x64b40
    { // line 230, offset 0x64c24
        struct GAME_VECTOR sp; // stack offset -40
    } // line 264, offset 0x64d70
} // line 295, offset 0x64e78
/*
 * Offset 0x64E78
 * C:\Projects2\Tomb5\SPEC_PSX\DRAWPHAS.C (line 768)
 * Stack frame base $29, size 24
 */
void /*reg $31*/ SortOutWreckingBallDraw()
{ // line 2, offset 0x64e78
    long lp; // register $3
} // line 12, offset 0x64ee8
/*
 * Offset 0x64EF8
 * C:\Projects2\Tomb5\SPEC_PSX\DRAWPHAS.C (line 782)
 * Stack frame base $29, size 0
 */
void /*reg $31*/ MGDrawSprite(int x /*reg $4*/, int y /*reg $5*/, int def /*reg $6*/, int z /*reg $7*/, int xs /*sp 16*/, int ys /*sp 20*/, long rgb /*sp 24*/)
{ // line 1, offset 0x64ef8
    struct POLY_FT4 *polyft4; // register $8
    struct PSXSPRITESTRUCT *pSpriteInfo; // register $4
} // line 32, offset 0x65040
extern long StoreBoxes; // offset 0xA1F4C
extern struct GAME_VECTOR LaraPos;
extern struct PSXTEXTI *MonitorScreenTI;
extern unsigned char MonitorScreenU0; // offset 0xA5538
extern unsigned char MonitorHold; // offset 0xA5544
extern short MonitorOff; // offset 0xA553C
extern short MonitorOff2; // offset 0xA5540
/*
 * Offset 0x6BB00
 * D:\LibSN2\READ.C (line 0)
 * Stack frame base $29, size 48
 */
__UNKNOWN__ /*reg $31*/ PCread()
/*
 * Offset 0x6BBBC
 * D:\LibSN2\WRITE.C (line 0)
 * Stack frame base $29, size 48
 */
__UNKNOWN__ /*reg $31*/ PCwrite()
/*
 * Offset 0x71028
 * D:\LibSN2\SNCTORS.C (line 0)
 * Stack frame base $29, size 32
 */
__UNKNOWN__ /*reg $31*/ __sn_cpp_structors()

// 4 enums
enum mood_type : int {
    BORED_MOOD = 0,
    ATTACK_MOOD = 1,
    ESCAPE_MOOD = 2,
    STALK_MOOD = 3,
};
enum zone_type : int {
    SKELLY_ZONE = 0,
    BASIC_ZONE = 1,
    CROC_ZONE = 2,
    HUMAN_ZONE = 3,
    FLYER_ZONE = 4,
};
enum camera_type : int {
    CHASE_CAMERA = 0,
    FIXED_CAMERA = 1,
    LOOK_CAMERA = 2,
    COMBAT_CAMERA = 3,
    CINEMATIC_CAMERA = 4,
    HEAVY_CAMERA = 5,
};
enum target_type : int {
    NO_TARGET = 0,
    PRIME_TARGET = 1,
    SECONDARY_TARGET = 2,
};

// 33 unions
union .85fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .88fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .21fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .24fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .5fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .8fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .87fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .90fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .97fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .100fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .59fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .62fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .95fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .98fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .76fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .79fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .73fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .76fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .86fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .89fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .76fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .103fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .106fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .89fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .92fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .24fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .27fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .113fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .116fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .81fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .84fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};
union .74fake {
    unsigned short pad; // size=0, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogController Analog; // size=6, offset=0
};
union .77fake {
    unsigned short pad; // size=0, offset=0
    struct MouseData mouse; // size=4, offset=0
    struct NegconData negcon; // size=6, offset=0
    struct AnalogjoyData joystick; // size=6, offset=0
    struct MultiTapData tap; // size=32, offset=0
    struct GunConData guncon; // size=6, offset=0
    struct AnalogController analog; // size=6, offset=0
};

// 136 structs
struct TCB {
    long status; // size=0, offset=0
    long mode; // size=0, offset=4
    unsigned long reg[40]; // size=160, offset=8
    long system[6]; // size=24, offset=168
};
struct EXEC {
    unsigned long pc0; // size=0, offset=0
    unsigned long gp0; // size=0, offset=4
    unsigned long t_addr; // size=0, offset=8
    unsigned long t_size; // size=0, offset=12
    unsigned long d_addr; // size=0, offset=16
    unsigned long d_size; // size=0, offset=20
    unsigned long b_addr; // size=0, offset=24
    unsigned long b_size; // size=0, offset=28
    unsigned long s_addr; // size=0, offset=32
    unsigned long s_size; // size=0, offset=36
    unsigned long sp; // size=0, offset=40
    unsigned long fp; // size=0, offset=44
    unsigned long gp; // size=0, offset=48
    unsigned long ret; // size=0, offset=52
    unsigned long base; // size=0, offset=56
};
struct DIRENTRY {
    char name[20]; // size=20, offset=0
    long attr; // size=0, offset=20
    long size; // size=0, offset=24
    struct DIRENTRY *next; // size=40, offset=28
    long head; // size=0, offset=32
    char system[4]; // size=4, offset=36
};
struct VECTOR {
    long vx; // size=0, offset=0
    long vy; // size=0, offset=4
    long vz; // size=0, offset=8
    long pad; // size=0, offset=12
};
struct SVECTOR {
    short vx; // size=0, offset=0
    short vy; // size=0, offset=2
    short vz; // size=0, offset=4
    short pad; // size=0, offset=6
};
struct CVECTOR {
    unsigned char r; // size=0, offset=0
    unsigned char g; // size=0, offset=1
    unsigned char b; // size=0, offset=2
    unsigned char cd; // size=0, offset=3
};
struct DVECTOR {
    short vx; // size=0, offset=0
    short vy; // size=0, offset=2
};
struct RVECTOR {
    struct SVECTOR v; // size=8, offset=0
    unsigned char uv[2]; // size=2, offset=8
    unsigned short pad; // size=0, offset=10
    struct CVECTOR c; // size=4, offset=12
    struct DVECTOR sxy; // size=4, offset=16
    unsigned long sz; // size=0, offset=20
};
struct CRVECTOR3 {
    struct RVECTOR r01; // size=24, offset=0
    struct RVECTOR r12; // size=24, offset=24
    struct RVECTOR r20; // size=24, offset=48
    struct RVECTOR *r0; // size=24, offset=72
    struct RVECTOR *r1; // size=24, offset=76
    struct RVECTOR *r2; // size=24, offset=80
    unsigned long *rtn; // size=0, offset=84
};
struct CRVECTOR4 {
    struct RVECTOR r01; // size=24, offset=0
    struct RVECTOR r02; // size=24, offset=24
    struct RVECTOR r31; // size=24, offset=48
    struct RVECTOR r32; // size=24, offset=72
    struct RVECTOR rc; // size=24, offset=96
    struct RVECTOR *r0; // size=24, offset=120
    struct RVECTOR *r1; // size=24, offset=124
    struct RVECTOR *r2; // size=24, offset=128
    struct RVECTOR *r3; // size=24, offset=132
    unsigned long *rtn; // size=0, offset=136
};
struct RECT {
    short x; // size=0, offset=0
    short y; // size=0, offset=2
    short w; // size=0, offset=4
    short h; // size=0, offset=6
};
struct DR_ENV {
    unsigned long tag; // size=0, offset=0
    unsigned long code[15]; // size=60, offset=4
};
struct DRAWENV {
    struct RECT clip; // size=8, offset=0
    short ofs[2]; // size=4, offset=8
    struct RECT tw; // size=8, offset=12
    unsigned short tpage; // size=0, offset=20
    unsigned char dtd; // size=0, offset=22
    unsigned char dfe; // size=0, offset=23
    unsigned char isbg; // size=0, offset=24
    unsigned char r0; // size=0, offset=25
    unsigned char g0; // size=0, offset=26
    unsigned char b0; // size=0, offset=27
    struct DR_ENV dr_env; // size=64, offset=28
};
struct DISPENV {
    struct RECT disp; // size=8, offset=0
    struct RECT screen; // size=8, offset=8
    unsigned char isinter; // size=0, offset=16
    unsigned char isrgb24; // size=0, offset=17
    unsigned char pad0; // size=0, offset=18
    unsigned char pad1; // size=0, offset=19
};
struct PHD_VECTOR {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
};
struct PHD_3DPOS {
    long x_pos; // size=0, offset=0
    long y_pos; // size=0, offset=4
    long z_pos; // size=0, offset=8
    short x_rot; // size=0, offset=12
    short y_rot; // size=0, offset=14
    short z_rot; // size=0, offset=16
};
struct TEXTURE {
    unsigned char u0; // size=0, offset=0
    unsigned char v0; // size=0, offset=1
    unsigned short clut; // size=0, offset=2
    unsigned char u1; // size=0, offset=4
    unsigned char v1; // size=0, offset=5
    unsigned short tpage; // size=0, offset=6
    unsigned char u2; // size=0, offset=8
    unsigned char v2; // size=0, offset=9
    unsigned char id[2]; // size=2, offset=10
    unsigned char u3; // size=0, offset=12
    unsigned char v3; // size=0, offset=13
    unsigned short wclut; // size=0, offset=14
};
struct CdlLOC {
    unsigned char minute; // size=0, offset=0
    unsigned char second; // size=0, offset=1
    unsigned char sector; // size=0, offset=2
    unsigned char track; // size=0, offset=3
};
struct ILIGHT {
    short x; // size=0, offset=0
    short y; // size=0, offset=2
    short z; // size=0, offset=4
    short pad1; // size=0, offset=6
    unsigned char r; // size=0, offset=8
    unsigned char g; // size=0, offset=9
    unsigned char b; // size=0, offset=10
    unsigned char pad; // size=0, offset=11
};
struct ITEM_LIGHT {
    struct ILIGHT Light[4]; // size=48, offset=0
};
struct ITEM_INFO {
    long floor; // size=0, offset=0
    unsigned long touch_bits; // size=0, offset=4
    unsigned long mesh_bits; // size=0, offset=8
    short object_number; // size=0, offset=12
    short current_anim_state; // size=0, offset=14
    short goal_anim_state; // size=0, offset=16
    short required_anim_state; // size=0, offset=18
    short anim_number; // size=0, offset=20
    short frame_number; // size=0, offset=22
    short room_number; // size=0, offset=24
    short next_item; // size=0, offset=26
    short next_active; // size=0, offset=28
    short speed; // size=0, offset=30
    short fallspeed; // size=0, offset=32
    short hit_points; // size=0, offset=34
    unsigned short box_number; // size=0, offset=36
    short timer; // size=0, offset=38
    short flags; // size=0, offset=40
    short shade; // size=0, offset=42
    short trigger_flags; // size=0, offset=44
    short carried_item; // size=0, offset=46
    short after_death; // size=0, offset=48
    unsigned short fired_weapon; // size=0, offset=50
    short item_flags[4]; // size=8, offset=52
    void *data; // size=0, offset=60
    struct PHD_3DPOS pos; // size=20, offset=64
    struct ITEM_LIGHT il; // size=48, offset=84
    unsigned long active : 1; // offset=132.0
    unsigned long status : 2; // offset=132.1
    unsigned long gravity_status : 1; // offset=132.3
    unsigned long hit_status : 1; // offset=132.4
    unsigned long collidable : 1; // offset=132.5
    unsigned long looked_at : 1; // offset=132.6
    unsigned long dynamic_light : 1; // offset=132.7
    unsigned long poisoned : 1; // offset=133.0
    unsigned long ai_bits : 5; // offset=133.1
    unsigned long really_active : 1; // offset=133.6
    unsigned long InDrawRoom : 1; // offset=133.7
    unsigned long meshswap_meshbits; // size=0, offset=136
    short draw_room; // size=0, offset=140
    short TOSSPAD; // size=0, offset=142
};
struct MouseData {
    unsigned short buttons; // size=0, offset=0
    char xOffset; // size=0, offset=2
    char yOffset; // size=0, offset=3
};
struct NegconData {
    unsigned short digitalButtons; // size=0, offset=0
    char centralTwist; // size=0, offset=2
    char buttonI; // size=0, offset=3
    char buttonII; // size=0, offset=4
    char topLeft; // size=0, offset=5
};
struct GunConData {
    unsigned short digitalButtons; // size=0, offset=0
    unsigned char GunconX; // size=0, offset=2
    unsigned char GunConScreenDiv; // size=0, offset=3
    unsigned char GunconY; // size=0, offset=4
    unsigned char pad; // size=0, offset=5
};
struct AnalogjoyData {
    unsigned short digitalButtons; // size=0, offset=0
    unsigned char right_x; // size=0, offset=2
    unsigned char right_y; // size=0, offset=3
    unsigned char left_x; // size=0, offset=4
    unsigned char left_y; // size=0, offset=5
};
struct AnalogController {
    unsigned short digitalButtons; // size=0, offset=0
    unsigned char right_x; // size=0, offset=2
    unsigned char right_y; // size=0, offset=3
    unsigned char left_x; // size=0, offset=4
    unsigned char left_y; // size=0, offset=5
};
struct TapCtrllerData {
    unsigned char transStatus; // size=0, offset=0
    unsigned char dataFormat; // size=0, offset=1
    union .85fake data; // size=6, offset=2
};
struct MultiTapData {
    struct TapCtrllerData ctrllers[4]; // size=32, offset=0
};
struct SpuVolume {
    short left; // size=0, offset=0
    short right; // size=0, offset=2
};
struct SpuVoiceAttr {
    unsigned long voice; // size=0, offset=0
    unsigned long mask; // size=0, offset=4
    struct SpuVolume volume; // size=4, offset=8
    struct SpuVolume volmode; // size=4, offset=12
    struct SpuVolume volumex; // size=4, offset=16
    unsigned short pitch; // size=0, offset=20
    unsigned short note; // size=0, offset=22
    unsigned short sample_note; // size=0, offset=24
    short envx; // size=0, offset=26
    unsigned long addr; // size=0, offset=28
    unsigned long loop_addr; // size=0, offset=32
    long a_mode; // size=0, offset=36
    long s_mode; // size=0, offset=40
    long r_mode; // size=0, offset=44
    unsigned short ar; // size=0, offset=48
    unsigned short dr; // size=0, offset=50
    unsigned short sr; // size=0, offset=52
    unsigned short rr; // size=0, offset=54
    unsigned short sl; // size=0, offset=56
    unsigned short adsr1; // size=0, offset=58
    unsigned short adsr2; // size=0, offset=60
};
struct SpuExtAttr {
    struct SpuVolume volume; // size=4, offset=0
    long reverb; // size=0, offset=4
    long mix; // size=0, offset=8
};
struct SpuStVoiceAttr {
    char status; // size=0, offset=0
    char pad1; // size=0, offset=1
    char pad2; // size=0, offset=2
    char pad3; // size=0, offset=3
    long last_size; // size=0, offset=4
    unsigned long buf_addr; // size=0, offset=8
    unsigned long data_addr; // size=0, offset=12
};
struct FLOOR_INFO {
    unsigned short index; // size=0, offset=0
    unsigned short fx : 4; // offset=2.0
    unsigned short box : 11; // offset=2.4
    unsigned short stopper : 1; // offset=3.7
    unsigned char pit_room; // size=0, offset=4
    char floor; // size=0, offset=5
    unsigned char sky_room; // size=0, offset=6
    char ceiling; // size=0, offset=7
};
struct LIGHTINFO {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    unsigned char Type; // size=0, offset=12
    unsigned char r; // size=0, offset=13
    unsigned char g; // size=0, offset=14
    unsigned char b; // size=0, offset=15
    short nx; // size=0, offset=16
    short ny; // size=0, offset=18
    short nz; // size=0, offset=20
    short Intensity; // size=0, offset=22
    unsigned char Inner; // size=0, offset=24
    unsigned char Outer; // size=0, offset=25
    short FalloffScale; // size=0, offset=26
    short Length; // size=0, offset=28
    short Cutoff; // size=0, offset=30
};
struct MESH_INFO {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short y_rot; // size=0, offset=12
    short shade; // size=0, offset=14
    short Flags; // size=0, offset=16
    short static_number; // size=0, offset=18
};
struct FX_INFO {
    struct PHD_3DPOS pos; // size=20, offset=0
    short room_number; // size=0, offset=20
    short object_number; // size=0, offset=22
    short next_fx; // size=0, offset=24
    short next_active; // size=0, offset=26
    short speed; // size=0, offset=28
    short fallspeed; // size=0, offset=30
    short frame_number; // size=0, offset=32
    short counter; // size=0, offset=34
    short shade; // size=0, offset=36
    short flag1; // size=0, offset=38
    short flag2; // size=0, offset=40
};
struct lara_arm {
    short *frame_base; // size=0, offset=0
    short frame_number; // size=0, offset=4
    short anim_number; // size=0, offset=6
    short lock; // size=0, offset=8
    short y_rot; // size=0, offset=10
    short x_rot; // size=0, offset=12
    short z_rot; // size=0, offset=14
    short flash_gun; // size=0, offset=16
};
struct box_node {
    short exit_box; // size=0, offset=0
    unsigned short search_number; // size=0, offset=2
    short next_expansion; // size=0, offset=4
    short box_number; // size=0, offset=6
};
struct lot_info {
    struct box_node *node; // size=8, offset=0
    short head; // size=0, offset=4
    short tail; // size=0, offset=6
    unsigned short search_number; // size=0, offset=8
    unsigned short block_mask; // size=0, offset=10
    short step; // size=0, offset=12
    short drop; // size=0, offset=14
    short zone_count; // size=0, offset=16
    short target_box; // size=0, offset=18
    short required_box; // size=0, offset=20
    short fly; // size=0, offset=22
    unsigned short can_jump : 1; // offset=24.0
    unsigned short can_monkey : 1; // offset=24.1
    unsigned short is_amphibious : 1; // offset=24.2
    unsigned short is_jumping : 1; // offset=24.3
    unsigned short is_monkeying : 1; // offset=24.4
    struct PHD_VECTOR target; // size=12, offset=28
    enum zone_type zone; // size=4, offset=40
};
struct creature_info {
    short joint_rotation[4]; // size=8, offset=0
    short maximum_turn; // size=0, offset=8
    short flags; // size=0, offset=10
    unsigned short alerted : 1; // offset=12.0
    unsigned short head_left : 1; // offset=12.1
    unsigned short head_right : 1; // offset=12.2
    unsigned short reached_goal : 1; // offset=12.3
    unsigned short hurt_by_lara : 1; // offset=12.4
    unsigned short patrol2 : 1; // offset=12.5
    unsigned short jump_ahead : 1; // offset=12.6
    unsigned short monkey_ahead : 1; // offset=12.7
    enum mood_type mood; // size=4, offset=16
    struct ITEM_INFO *enemy; // size=144, offset=20
    struct ITEM_INFO ai_target; // size=144, offset=24
    short pad; // size=0, offset=168
    short item_num; // size=0, offset=170
    struct PHD_VECTOR target; // size=12, offset=172
    struct lot_info LOT; // size=44, offset=184
};
struct ROPE_STRUCT {
    struct PHD_VECTOR Segment[24]; // size=288, offset=0
    struct PHD_VECTOR Velocity[24]; // size=288, offset=288
    struct PHD_VECTOR NormalisedSegment[24]; // size=288, offset=576
    struct PHD_VECTOR MeshSegment[24]; // size=288, offset=864
    struct PHD_VECTOR Position; // size=12, offset=1152
    long SegmentLength; // size=0, offset=1164
    short Active; // size=0, offset=1168
    short Coiled; // size=0, offset=1170
};
struct lara_info {
    short item_number; // size=0, offset=0
    short gun_status; // size=0, offset=2
    short gun_type; // size=0, offset=4
    short request_gun_type; // size=0, offset=6
    short last_gun_type; // size=0, offset=8
    short calc_fallspeed; // size=0, offset=10
    short water_status; // size=0, offset=12
    short climb_status; // size=0, offset=14
    short pose_count; // size=0, offset=16
    short hit_frame; // size=0, offset=18
    short hit_direction; // size=0, offset=20
    short air; // size=0, offset=22
    short dive_count; // size=0, offset=24
    short death_count; // size=0, offset=26
    short current_active; // size=0, offset=28
    short current_xvel; // size=0, offset=30
    short current_yvel; // size=0, offset=32
    short current_zvel; // size=0, offset=34
    short spaz_effect_count; // size=0, offset=36
    short flare_age; // size=0, offset=38
    short BurnCount; // size=0, offset=40
    short weapon_item; // size=0, offset=42
    short back_gun; // size=0, offset=44
    short flare_frame; // size=0, offset=46
    short poisoned; // size=0, offset=48
    short dpoisoned; // size=0, offset=50
    unsigned char Anxiety; // size=0, offset=52
    unsigned char wet[15]; // size=15, offset=53
    unsigned short flare_control_left : 1; // offset=68.0
    unsigned short Unused1 : 1; // offset=68.1
    unsigned short look : 1; // offset=68.2
    unsigned short burn : 1; // offset=68.3
    unsigned short keep_ducked : 1; // offset=68.4
    unsigned short IsMoving : 1; // offset=68.5
    unsigned short CanMonkeySwing : 1; // offset=68.6
    unsigned short BurnBlue : 2; // offset=68.7
    unsigned short Gassed : 1; // offset=69.1
    unsigned short BurnSmoke : 1; // offset=69.2
    unsigned short IsDucked : 1; // offset=69.3
    unsigned short has_fired : 1; // offset=69.4
    unsigned short Busy : 1; // offset=69.5
    unsigned short LitTorch : 1; // offset=69.6
    unsigned short IsClimbing : 1; // offset=69.7
    unsigned short Fired : 1; // offset=70.0
    long water_surface_dist; // size=0, offset=72
    struct PHD_VECTOR last_pos; // size=12, offset=76
    struct FX_INFO *spaz_effect; // size=44, offset=88
    int mesh_effects; // size=0, offset=92
    short *mesh_ptrs[15]; // size=60, offset=96
    struct ITEM_INFO *target; // size=144, offset=156
    short target_angles[2]; // size=4, offset=160
    short turn_rate; // size=0, offset=164
    short move_angle; // size=0, offset=166
    short head_y_rot; // size=0, offset=168
    short head_x_rot; // size=0, offset=170
    short head_z_rot; // size=0, offset=172
    short torso_y_rot; // size=0, offset=174
    short torso_x_rot; // size=0, offset=176
    short torso_z_rot; // size=0, offset=178
    struct lara_arm left_arm; // size=20, offset=180
    struct lara_arm right_arm; // size=20, offset=200
    unsigned short holster; // size=0, offset=220
    struct creature_info *creature; // size=228, offset=224
    long CornerX; // size=0, offset=228
    long CornerZ; // size=0, offset=232
    char RopeSegment; // size=0, offset=236
    char RopeDirection; // size=0, offset=237
    short RopeArcFront; // size=0, offset=238
    short RopeArcBack; // size=0, offset=240
    short RopeLastX; // size=0, offset=242
    short RopeMaxXForward; // size=0, offset=244
    short RopeMaxXBackward; // size=0, offset=246
    long RopeDFrame; // size=0, offset=248
    long RopeFrame; // size=0, offset=252
    unsigned short RopeFrameRate; // size=0, offset=256
    unsigned short RopeY; // size=0, offset=258
    long RopePtr; // size=0, offset=260
    void *GeneralPtr; // size=0, offset=264
    int RopeOffset; // size=0, offset=268
    unsigned long RopeDownVel; // size=0, offset=272
    char RopeFlag; // size=0, offset=276
    char MoveCount; // size=0, offset=277
    int RopeCount; // size=0, offset=280
    char skelebob; // size=0, offset=284
    char pistols_type_carried; // size=0, offset=285
    char uzis_type_carried; // size=0, offset=286
    char shotgun_type_carried; // size=0, offset=287
    char crossbow_type_carried; // size=0, offset=288
    char hk_type_carried; // size=0, offset=289
    char sixshooter_type_carried; // size=0, offset=290
    char lasersight; // size=0, offset=291
    char silencer; // size=0, offset=292
    char binoculars; // size=0, offset=293
    char crowbar; // size=0, offset=294
    char examine1; // size=0, offset=295
    char examine2; // size=0, offset=296
    char examine3; // size=0, offset=297
    char wetcloth; // size=0, offset=298
    char bottle; // size=0, offset=299
    char puzzleitems[12]; // size=12, offset=300
    unsigned short puzzleitemscombo; // size=0, offset=312
    unsigned short keyitems; // size=0, offset=314
    unsigned short keyitemscombo; // size=0, offset=316
    unsigned short pickupitems; // size=0, offset=318
    unsigned short pickupitemscombo; // size=0, offset=320
    short num_small_medipack; // size=0, offset=322
    short num_large_medipack; // size=0, offset=324
    short num_flares; // size=0, offset=326
    short num_pistols_ammo; // size=0, offset=328
    short num_uzi_ammo; // size=0, offset=330
    short num_revolver_ammo; // size=0, offset=332
    short num_shotgun_ammo1; // size=0, offset=334
    short num_shotgun_ammo2; // size=0, offset=336
    short num_hk_ammo1; // size=0, offset=338
    short num_crossbow_ammo1; // size=0, offset=340
    short num_crossbow_ammo2; // size=0, offset=342
    char location; // size=0, offset=344
    char highest_location; // size=0, offset=345
    char locationPad; // size=0, offset=346
    unsigned char TightRopeOnCount; // size=0, offset=347
    unsigned char TightRopeOff; // size=0, offset=348
    unsigned char TightRopeFall; // size=0, offset=349
    unsigned char ChaffTimer; // size=0, offset=350
};
struct STATS {
    unsigned long Timer; // size=0, offset=0
    unsigned long Distance; // size=0, offset=4
    unsigned long AmmoUsed; // size=0, offset=8
    unsigned long AmmoHits; // size=0, offset=12
    unsigned short Kills; // size=0, offset=16
    unsigned char Secrets; // size=0, offset=18
    unsigned char HealthUsed; // size=0, offset=19
};
struct MATRIX3D {
    short m00; // size=0, offset=0
    short m01; // size=0, offset=2
    short m02; // size=0, offset=4
    short m10; // size=0, offset=6
    short m11; // size=0, offset=8
    short m12; // size=0, offset=10
    short m20; // size=0, offset=12
    short m21; // size=0, offset=14
    short m22; // size=0, offset=16
    short pad; // size=0, offset=18
    long tx; // size=0, offset=20
    long ty; // size=0, offset=24
    long tz; // size=0, offset=28
};
struct GAMEFLOW {
    unsigned long CheatEnabled : 1; // offset=0.0
    unsigned long LoadSaveEnabled : 1; // offset=0.1
    unsigned long TitleEnabled : 1; // offset=0.2
    unsigned long PlayAnyLevel : 1; // offset=0.3
    unsigned long Language : 3; // offset=0.4
    unsigned long DemoDisc : 1; // offset=0.7
    unsigned long Unused : 24; // offset=1.0
    unsigned long InputTimeout; // size=0, offset=4
    unsigned char SecurityTag; // size=0, offset=8
    unsigned char nLevels; // size=0, offset=9
    unsigned char nFileNames; // size=0, offset=10
    unsigned char Pad; // size=0, offset=11
    unsigned short FileNameLen; // size=0, offset=12
    unsigned short ScriptLen; // size=0, offset=14
};
struct STRINGHEADER {
    unsigned short nStrings; // size=0, offset=0
    unsigned short nPSXStrings; // size=0, offset=2
    unsigned short nPCStrings; // size=0, offset=4
    unsigned short StringWadLen; // size=0, offset=6
    unsigned short PSXStringWadLen; // size=0, offset=8
    unsigned short PCStringWadLen; // size=0, offset=10
};
struct GAME_VECTOR {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short room_number; // size=0, offset=12
    short box_number; // size=0, offset=14
};
struct OBJECT_VECTOR {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short data; // size=0, offset=12
    short flags; // size=0, offset=14
};
struct SPHERE {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    long r; // size=0, offset=12
};
struct RTDECODE {
    unsigned long length; // size=0, offset=0
    unsigned long off; // size=0, offset=4
    unsigned short counter; // size=0, offset=8
    unsigned short data; // size=0, offset=10
    unsigned char decodetype; // size=0, offset=12
    unsigned char packmethod; // size=0, offset=13
    unsigned short padfuck; // size=0, offset=14
};
struct ACTORME {
    int offset; // size=0, offset=0
    short objslot; // size=0, offset=4
    short nodes; // size=0, offset=6
};
struct room_info {
    short *data; // size=0, offset=0
    short *door; // size=0, offset=4
    struct FLOOR_INFO *floor; // size=8, offset=8
    struct LIGHTINFO *light; // size=32, offset=12
    struct MESH_INFO *mesh; // size=20, offset=16
    long x; // size=0, offset=20
    long y; // size=0, offset=24
    long z; // size=0, offset=28
    long minfloor; // size=0, offset=32
    long maxceiling; // size=0, offset=36
    short x_size; // size=0, offset=40
    short y_size; // size=0, offset=42
    struct CVECTOR ambient; // size=4, offset=44
    short num_lights; // size=0, offset=48
    short num_meshes; // size=0, offset=50
    unsigned char ReverbType; // size=0, offset=52
    unsigned char FlipNumber; // size=0, offset=53
    char MeshEffect; // size=0, offset=54
    char bound_active; // size=0, offset=55
    short left; // size=0, offset=56
    short right; // size=0, offset=58
    short top; // size=0, offset=60
    short bottom; // size=0, offset=62
    short test_left; // size=0, offset=64
    short test_right; // size=0, offset=66
    short test_top; // size=0, offset=68
    short test_bottom; // size=0, offset=70
    short item_number; // size=0, offset=72
    short fx_number; // size=0, offset=74
    short flipped_room; // size=0, offset=76
    unsigned short flags; // size=0, offset=78
};
struct PENDULUM {
    struct PHD_VECTOR Position; // size=12, offset=0
    struct PHD_VECTOR Velocity; // size=12, offset=12
    int node; // size=0, offset=24
    struct ROPE_STRUCT *Rope; // size=1172, offset=28
};
struct object_info {
    short nmeshes; // size=0, offset=0
    short mesh_index; // size=0, offset=2
    long bone_index; // size=0, offset=4
    short *frame_base; // size=0, offset=8
    void *initialise; // size=0, offset=12
    void *control; // size=0, offset=16
    void *floor; // size=0, offset=20
    void *ceiling; // size=0, offset=24
    void *draw_routine; // size=0, offset=28
    void *collision; // size=0, offset=32
    short object_mip; // size=0, offset=36
    short anim_index; // size=0, offset=38
    short hit_points; // size=0, offset=40
    short pivot_length; // size=0, offset=42
    short radius; // size=0, offset=44
    short shadow_size; // size=0, offset=46
    unsigned short bite_offset; // size=0, offset=48
    unsigned short loaded : 1; // offset=50.0
    unsigned short intelligent : 1; // offset=50.1
    unsigned short non_lot : 1; // offset=50.2
    unsigned short save_position : 1; // offset=50.3
    unsigned short save_hitpoints : 1; // offset=50.4
    unsigned short save_flags : 1; // offset=50.5
    unsigned short save_anim : 1; // offset=50.6
    unsigned short semi_transparent : 1; // offset=50.7
    unsigned short water_creature : 1; // offset=51.0
    unsigned short using_drawanimating_item : 1; // offset=51.1
    unsigned short HitEffect : 2; // offset=51.2
    unsigned short undead : 1; // offset=51.4
    unsigned short save_mesh : 1; // offset=51.5
    void *draw_routine_extra; // size=0, offset=52
    unsigned long explodable_meshbits; // size=0, offset=56
    unsigned long padfuck; // size=0, offset=60
};
struct RAT_STRUCT {
    struct PHD_3DPOS pos; // size=20, offset=0
    short room_number; // size=0, offset=20
    short speed; // size=0, offset=22
    short fallspeed; // size=0, offset=24
    unsigned char On; // size=0, offset=26
    unsigned char flags; // size=0, offset=27
};
struct BAT_STRUCT {
    struct PHD_3DPOS pos; // size=20, offset=0
    short room_number; // size=0, offset=20
    short speed; // size=0, offset=22
    short Counter; // size=0, offset=24
    short LaraTarget; // size=0, offset=26
    char XTarget; // size=0, offset=28
    char ZTarget; // size=0, offset=29
    unsigned char On; // size=0, offset=30
    unsigned char flags; // size=0, offset=31
};
struct SPIDER_STRUCT {
    struct PHD_3DPOS pos; // size=20, offset=0
    short room_number; // size=0, offset=20
    short speed; // size=0, offset=22
    short fallspeed; // size=0, offset=24
    unsigned char On; // size=0, offset=26
    unsigned char flags; // size=0, offset=27
};
struct TWOGUN_INFO {
    struct PHD_3DPOS pos; // size=20, offset=0
    short life; // size=0, offset=20
    short coil; // size=0, offset=22
    short spin; // size=0, offset=24
    short spinadd; // size=0, offset=26
    short length; // size=0, offset=28
    short dlength; // size=0, offset=30
    short size; // size=0, offset=32
    char r; // size=0, offset=34
    char g; // size=0, offset=35
    char b; // size=0, offset=36
    char fadein; // size=0, offset=37
};
struct CHARDEF {
    unsigned char u; // size=0, offset=0
    unsigned char v; // size=0, offset=1
    unsigned char w; // size=0, offset=2
    unsigned char h; // size=0, offset=3
    char YOffset; // size=0, offset=4
    unsigned char TopShade; // size=0, offset=5
    unsigned char BottomShade; // size=0, offset=6
};
struct COLL_INFO {
    long mid_floor; // size=0, offset=0
    long mid_ceiling; // size=0, offset=4
    long mid_type; // size=0, offset=8
    long front_floor; // size=0, offset=12
    long front_ceiling; // size=0, offset=16
    long front_type; // size=0, offset=20
    long left_floor; // size=0, offset=24
    long left_ceiling; // size=0, offset=28
    long left_type; // size=0, offset=32
    long right_floor; // size=0, offset=36
    long right_ceiling; // size=0, offset=40
    long right_type; // size=0, offset=44
    long left_floor2; // size=0, offset=48
    long left_ceiling2; // size=0, offset=52
    long left_type2; // size=0, offset=56
    long right_floor2; // size=0, offset=60
    long right_ceiling2; // size=0, offset=64
    long right_type2; // size=0, offset=68
    long radius; // size=0, offset=72
    long bad_pos; // size=0, offset=76
    long bad_neg; // size=0, offset=80
    long bad_ceiling; // size=0, offset=84
    struct PHD_VECTOR shift; // size=12, offset=88
    struct PHD_VECTOR old; // size=12, offset=100
    short old_anim_state; // size=0, offset=112
    short old_anim_number; // size=0, offset=114
    short old_frame_number; // size=0, offset=116
    short facing; // size=0, offset=118
    short quadrant; // size=0, offset=120
    short coll_type; // size=0, offset=122
    short *trigger; // size=0, offset=124
    char tilt_x; // size=0, offset=128
    char tilt_z; // size=0, offset=129
    char hit_by_baddie; // size=0, offset=130
    char hit_static; // size=0, offset=131
    unsigned short slopes_are_walls : 2; // offset=132.0
    unsigned short slopes_are_pits : 1; // offset=132.2
    unsigned short lava_is_pit : 1; // offset=132.3
    unsigned short enable_baddie_push : 1; // offset=132.4
    unsigned short enable_spaz : 1; // offset=132.5
    unsigned short hit_ceiling : 1; // offset=132.6
};
struct ANIM_STRUCT {
    short *frame_ptr; // size=0, offset=0
    short interpolation; // size=0, offset=4
    short current_anim_state; // size=0, offset=6
    long velocity; // size=0, offset=8
    long acceleration; // size=0, offset=12
    long Xvelocity; // size=0, offset=16
    long Xacceleration; // size=0, offset=20
    short frame_base; // size=0, offset=24
    short frame_end; // size=0, offset=26
    short jump_anim_num; // size=0, offset=28
    short jump_frame_num; // size=0, offset=30
    short number_changes; // size=0, offset=32
    short change_index; // size=0, offset=34
    short number_commands; // size=0, offset=36
    short command_index; // size=0, offset=38
};
struct SPARKS {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short Xvel; // size=0, offset=12
    short Yvel; // size=0, offset=14
    short Zvel; // size=0, offset=16
    short Gravity; // size=0, offset=18
    short RotAng; // size=0, offset=20
    short Flags; // size=0, offset=22
    unsigned char sSize; // size=0, offset=24
    unsigned char dSize; // size=0, offset=25
    unsigned char Size; // size=0, offset=26
    unsigned char Friction; // size=0, offset=27
    unsigned char Scalar; // size=0, offset=28
    unsigned char Def; // size=0, offset=29
    char RotAdd; // size=0, offset=30
    char MaxYvel; // size=0, offset=31
    unsigned char On; // size=0, offset=32
    unsigned char sR; // size=0, offset=33
    unsigned char sG; // size=0, offset=34
    unsigned char sB; // size=0, offset=35
    unsigned char dR; // size=0, offset=36
    unsigned char dG; // size=0, offset=37
    unsigned char dB; // size=0, offset=38
    unsigned char R; // size=0, offset=39
    unsigned char G; // size=0, offset=40
    unsigned char B; // size=0, offset=41
    unsigned char ColFadeSpeed; // size=0, offset=42
    unsigned char FadeToBlack; // size=0, offset=43
    unsigned char sLife; // size=0, offset=44
    unsigned char Life; // size=0, offset=45
    unsigned char TransType; // size=0, offset=46
    unsigned char extras; // size=0, offset=47
    char Dynamic; // size=0, offset=48
    unsigned char FxObj; // size=0, offset=49
    unsigned char RoomNumber; // size=0, offset=50
    unsigned char NodeNumber; // size=0, offset=51
};
struct PACKNODE {
    short xrot_run; // size=0, offset=0
    short yrot_run; // size=0, offset=2
    short zrot_run; // size=0, offset=4
    short xkey; // size=0, offset=6
    short ykey; // size=0, offset=8
    short zkey; // size=0, offset=10
    struct RTDECODE decode_x; // size=16, offset=12
    struct RTDECODE decode_y; // size=16, offset=28
    struct RTDECODE decode_z; // size=16, offset=44
    unsigned long xlength; // size=0, offset=60
    unsigned long ylength; // size=0, offset=64
    unsigned long zlength; // size=0, offset=68
    char *xpacked; // size=0, offset=72
    char *ypacked; // size=0, offset=76
    char *zpacked; // size=0, offset=80
};
struct NODELOADHEADER {
    short xkey; // size=0, offset=0
    short ykey; // size=0, offset=2
    short zkey; // size=0, offset=4
    short packmethod; // size=0, offset=6
    short xlength; // size=0, offset=8
    short ylength; // size=0, offset=10
    short zlength; // size=0, offset=12
};
struct RESIDENT_THING {
    char *packed_data; // size=0, offset=0
};
struct NEW_CUTSCENE {
    short numactors; // size=0, offset=0
    short numframes; // size=0, offset=2
    int orgx; // size=0, offset=4
    int orgy; // size=0, offset=8
    int orgz; // size=0, offset=12
    int audio_track; // size=0, offset=16
    int camera_offset; // size=0, offset=20
    struct ACTORME actor_data[10]; // size=80, offset=24
};
struct CUTSEQ_ROUTINES {
    void *init_func; // size=0, offset=0
    void *control_func; // size=0, offset=4
    void *end_func; // size=0, offset=8
};
struct DOORPOS_DATA {
    struct FLOOR_INFO *floor; // size=8, offset=0
    struct FLOOR_INFO data; // size=8, offset=4
    short block; // size=0, offset=12
};
struct DOOR_DATA {
    struct DOORPOS_DATA d1; // size=16, offset=0
    struct DOORPOS_DATA d1flip; // size=16, offset=16
    struct DOORPOS_DATA d2; // size=16, offset=32
    struct DOORPOS_DATA d2flip; // size=16, offset=48
    short Opened; // size=0, offset=64
    short *dptr1; // size=0, offset=68
    short *dptr2; // size=0, offset=72
    short *dptr3; // size=0, offset=76
    short *dptr4; // size=0, offset=80
    char dn1; // size=0, offset=84
    char dn2; // size=0, offset=85
    char dn3; // size=0, offset=86
    char dn4; // size=0, offset=87
    struct ITEM_INFO *item; // size=144, offset=88
};
struct CHANGE_STRUCT {
    short goal_anim_state; // size=0, offset=0
    short number_ranges; // size=0, offset=2
    short range_index; // size=0, offset=4
};
struct RANGE_STRUCT {
    short start_frame; // size=0, offset=0
    short end_frame; // size=0, offset=2
    short link_anim_num; // size=0, offset=4
    short link_frame_num; // size=0, offset=6
};
struct door_vbuf {
    long xv; // size=0, offset=0
    long yv; // size=0, offset=4
    long zv; // size=0, offset=8
};
struct BITE_INFO {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    long mesh_num; // size=0, offset=12
};
struct box_info {
    unsigned char left; // size=0, offset=0
    unsigned char right; // size=0, offset=1
    unsigned char top; // size=0, offset=2
    unsigned char bottom; // size=0, offset=3
    short height; // size=0, offset=4
    short overlap_index; // size=0, offset=6
};
struct AI_info {
    short zone_number; // size=0, offset=0
    short enemy_zone; // size=0, offset=2
    long distance; // size=0, offset=4
    long ahead; // size=0, offset=8
    long bite; // size=0, offset=12
    short angle; // size=0, offset=16
    short x_angle; // size=0, offset=18
    short enemy_facing; // size=0, offset=20
};
struct AIOBJECT {
    short object_number; // size=0, offset=0
    short room_number; // size=0, offset=2
    long x; // size=0, offset=4
    long y; // size=0, offset=8
    long z; // size=0, offset=12
    short trigger_flags; // size=0, offset=16
    short flags; // size=0, offset=18
    short y_rot; // size=0, offset=20
    short box_number; // size=0, offset=22
};
struct CAMERA_INFO {
    struct GAME_VECTOR pos; // size=16, offset=0
    struct GAME_VECTOR target; // size=16, offset=16
    enum camera_type type; // size=4, offset=32
    enum camera_type old_type; // size=4, offset=36
    long shift; // size=0, offset=40
    long flags; // size=0, offset=44
    long fixed_camera; // size=0, offset=48
    long number_frames; // size=0, offset=52
    long bounce; // size=0, offset=56
    long underwater; // size=0, offset=60
    long target_distance; // size=0, offset=64
    short target_angle; // size=0, offset=68
    short target_elevation; // size=0, offset=70
    short actual_elevation; // size=0, offset=72
    short actual_angle; // size=0, offset=74
    short lara_node; // size=0, offset=76
    short box; // size=0, offset=78
    short number; // size=0, offset=80
    short last; // size=0, offset=82
    short timer; // size=0, offset=84
    short speed; // size=0, offset=86
    short targetspeed; // size=0, offset=88
    struct ITEM_INFO *item; // size=144, offset=92
    struct ITEM_INFO *last_item; // size=144, offset=96
    struct OBJECT_VECTOR *fixed; // size=16, offset=100
    int mike_at_lara; // size=0, offset=104
    struct PHD_VECTOR mike_pos; // size=12, offset=108
};
struct SHATTER_ITEM {
    struct SPHERE Sphere; // size=16, offset=0
    struct ITEM_LIGHT *il; // size=48, offset=16
    short *meshp; // size=0, offset=20
    long Bit; // size=0, offset=24
    short YRot; // size=0, offset=28
    short Flags; // size=0, offset=30
};
struct OLD_CAMERA {
    short current_anim_state; // size=0, offset=0
    short goal_anim_state; // size=0, offset=2
    long target_distance; // size=0, offset=4
    short target_angle; // size=0, offset=8
    short target_elevation; // size=0, offset=10
    short actual_elevation; // size=0, offset=12
    struct PHD_3DPOS pos; // size=20, offset=16
    struct PHD_3DPOS pos2; // size=20, offset=36
    struct PHD_VECTOR t; // size=12, offset=56
};
struct static_info {
    short mesh_number; // size=0, offset=0
    short flags; // size=0, offset=2
    short x_minp; // size=0, offset=4
    short x_maxp; // size=0, offset=6
    short y_minp; // size=0, offset=8
    short y_maxp; // size=0, offset=10
    short z_minp; // size=0, offset=12
    short z_maxp; // size=0, offset=14
    short x_minc; // size=0, offset=16
    short x_maxc; // size=0, offset=18
    short y_minc; // size=0, offset=20
    short y_maxc; // size=0, offset=22
    short z_minc; // size=0, offset=24
    short z_maxc; // size=0, offset=26
};
struct PSXTEXTI {
    unsigned char u0; // size=0, offset=0
    unsigned char v0; // size=0, offset=1
    unsigned short clut; // size=0, offset=2
    unsigned char u1; // size=0, offset=4
    unsigned char v1; // size=0, offset=5
    unsigned short tpage; // size=0, offset=6
    unsigned char u2; // size=0, offset=8
    unsigned char v2; // size=0, offset=9
    unsigned char codeGT4; // size=0, offset=10
    unsigned char codeGT3; // size=0, offset=11
    unsigned char u3; // size=0, offset=12
    unsigned char v3; // size=0, offset=13
    unsigned short pad3; // size=0, offset=14
};
struct DEBRIS_STRUCT {
    void *TextInfo; // size=0, offset=0
    long x; // size=0, offset=4
    long y; // size=0, offset=8
    long z; // size=0, offset=12
    short XYZOffsets1[3]; // size=6, offset=16
    short Dir; // size=0, offset=22
    short XYZOffsets2[3]; // size=6, offset=24
    short Speed; // size=0, offset=30
    short XYZOffsets3[3]; // size=6, offset=32
    short Yvel; // size=0, offset=38
    short Gravity; // size=0, offset=40
    short RoomNumber; // size=0, offset=42
    unsigned char On; // size=0, offset=44
    unsigned char XRot; // size=0, offset=45
    unsigned char YRot; // size=0, offset=46
    unsigned char r; // size=0, offset=47
    unsigned char g; // size=0, offset=48
    unsigned char b; // size=0, offset=49
    unsigned char Pad[2]; // size=2, offset=50
};
struct SPOTCAM {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    long tx; // size=0, offset=12
    long ty; // size=0, offset=16
    long tz; // size=0, offset=20
    unsigned char sequence; // size=0, offset=24
    unsigned char camera; // size=0, offset=25
    short fov; // size=0, offset=26
    short roll; // size=0, offset=28
    short timer; // size=0, offset=30
    short speed; // size=0, offset=32
    short flags; // size=0, offset=34
    short room_number; // size=0, offset=36
    short pad; // size=0, offset=38
};
struct QUAKE_CAM {
    struct GAME_VECTOR spos; // size=16, offset=0
    struct GAME_VECTOR epos; // size=16, offset=16
};
struct DYNAMIC {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    unsigned char on; // size=0, offset=12
    unsigned char r; // size=0, offset=13
    unsigned char g; // size=0, offset=14
    unsigned char b; // size=0, offset=15
    unsigned short falloff; // size=0, offset=16
    unsigned char used; // size=0, offset=18
    unsigned char pad1[1]; // size=1, offset=19
    long FalloffScale; // size=0, offset=20
};
struct SP_DYNAMIC {
    unsigned char On; // size=0, offset=0
    unsigned char Falloff; // size=0, offset=1
    unsigned char R; // size=0, offset=2
    unsigned char G; // size=0, offset=3
    unsigned char B; // size=0, offset=4
    unsigned char Flags; // size=0, offset=5
    unsigned char Pad[2]; // size=2, offset=6
};
struct SPLASH_STRUCT {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short InnerRad; // size=0, offset=12
    short InnerSize; // size=0, offset=14
    short InnerRadVel; // size=0, offset=16
    short InnerYVel; // size=0, offset=18
    short InnerY; // size=0, offset=20
    short MiddleRad; // size=0, offset=22
    short MiddleSize; // size=0, offset=24
    short MiddleRadVel; // size=0, offset=26
    short MiddleYVel; // size=0, offset=28
    short MiddleY; // size=0, offset=30
    short OuterRad; // size=0, offset=32
    short OuterSize; // size=0, offset=34
    short OuterRadVel; // size=0, offset=36
    char flags; // size=0, offset=38
    unsigned char life; // size=0, offset=39
};
struct RIPPLE_STRUCT {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    char flags; // size=0, offset=12
    unsigned char life; // size=0, offset=13
    unsigned char size; // size=0, offset=14
    unsigned char init; // size=0, offset=15
};
struct SPLASH_SETUP {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short InnerRad; // size=0, offset=12
    short InnerSize; // size=0, offset=14
    short InnerRadVel; // size=0, offset=16
    short InnerYVel; // size=0, offset=18
    short pad1; // size=0, offset=20
    short MiddleRad; // size=0, offset=22
    short MiddleSize; // size=0, offset=24
    short MiddleRadVel; // size=0, offset=26
    short MiddleYVel; // size=0, offset=28
    short pad2; // size=0, offset=30
    short OuterRad; // size=0, offset=32
    short OuterSize; // size=0, offset=34
    short OuterRadVel; // size=0, offset=36
    short pad3; // size=0, offset=38
};
struct FIRE_LIST {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    char on; // size=0, offset=12
    char size; // size=0, offset=13
    short room_number; // size=0, offset=14
};
struct FIRE_SPARKS {
    short x; // size=0, offset=0
    short y; // size=0, offset=2
    short z; // size=0, offset=4
    short Xvel; // size=0, offset=6
    short Yvel; // size=0, offset=8
    short Zvel; // size=0, offset=10
    short Gravity; // size=0, offset=12
    short RotAng; // size=0, offset=14
    short Flags; // size=0, offset=16
    unsigned char sSize; // size=0, offset=18
    unsigned char dSize; // size=0, offset=19
    unsigned char Size; // size=0, offset=20
    unsigned char Friction; // size=0, offset=21
    unsigned char Scalar; // size=0, offset=22
    unsigned char Def; // size=0, offset=23
    char RotAdd; // size=0, offset=24
    char MaxYvel; // size=0, offset=25
    unsigned char On; // size=0, offset=26
    unsigned char sR; // size=0, offset=27
    unsigned char sG; // size=0, offset=28
    unsigned char sB; // size=0, offset=29
    unsigned char dR; // size=0, offset=30
    unsigned char dG; // size=0, offset=31
    unsigned char dB; // size=0, offset=32
    unsigned char R; // size=0, offset=33
    unsigned char G; // size=0, offset=34
    unsigned char B; // size=0, offset=35
    unsigned char ColFadeSpeed; // size=0, offset=36
    unsigned char FadeToBlack; // size=0, offset=37
    unsigned char sLife; // size=0, offset=38
    unsigned char Life; // size=0, offset=39
};
struct SMOKE_SPARKS {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short Xvel; // size=0, offset=12
    short Yvel; // size=0, offset=14
    short Zvel; // size=0, offset=16
    short Gravity; // size=0, offset=18
    short RotAng; // size=0, offset=20
    short Flags; // size=0, offset=22
    unsigned char sSize; // size=0, offset=24
    unsigned char dSize; // size=0, offset=25
    unsigned char Size; // size=0, offset=26
    unsigned char Friction; // size=0, offset=27
    unsigned char Scalar; // size=0, offset=28
    unsigned char Def; // size=0, offset=29
    char RotAdd; // size=0, offset=30
    char MaxYvel; // size=0, offset=31
    unsigned char On; // size=0, offset=32
    unsigned char sShade; // size=0, offset=33
    unsigned char dShade; // size=0, offset=34
    unsigned char Shade; // size=0, offset=35
    unsigned char ColFadeSpeed; // size=0, offset=36
    unsigned char FadeToBlack; // size=0, offset=37
    char sLife; // size=0, offset=38
    char Life; // size=0, offset=39
    unsigned char TransType; // size=0, offset=40
    unsigned char FxObj; // size=0, offset=41
    unsigned char NodeNumber; // size=0, offset=42
    unsigned char mirror; // size=0, offset=43
};
struct BLOOD_STRUCT {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short Xvel; // size=0, offset=12
    short Yvel; // size=0, offset=14
    short Zvel; // size=0, offset=16
    short Gravity; // size=0, offset=18
    short RotAng; // size=0, offset=20
    unsigned char sSize; // size=0, offset=22
    unsigned char dSize; // size=0, offset=23
    unsigned char Size; // size=0, offset=24
    unsigned char Friction; // size=0, offset=25
    char RotAdd; // size=0, offset=26
    unsigned char On; // size=0, offset=27
    unsigned char sShade; // size=0, offset=28
    unsigned char dShade; // size=0, offset=29
    unsigned char Shade; // size=0, offset=30
    unsigned char ColFadeSpeed; // size=0, offset=31
    unsigned char FadeToBlack; // size=0, offset=32
    char sLife; // size=0, offset=33
    char Life; // size=0, offset=34
    char Pad; // size=0, offset=35
};
struct GUNSHELL_STRUCT {
    struct PHD_3DPOS pos; // size=20, offset=0
    short fallspeed; // size=0, offset=20
    short room_number; // size=0, offset=22
    short speed; // size=0, offset=24
    short counter; // size=0, offset=26
    short DirXrot; // size=0, offset=28
    short object_number; // size=0, offset=30
};
struct BUBBLE_STRUCT {
    struct PHD_VECTOR pos; // size=12, offset=0
    short room_number; // size=0, offset=12
    short speed; // size=0, offset=14
    short size; // size=0, offset=16
    short dsize; // size=0, offset=18
    unsigned char shade; // size=0, offset=20
    unsigned char vel; // size=0, offset=21
    unsigned char y_rot; // size=0, offset=22
    char Flags; // size=0, offset=23
    short Xvel; // size=0, offset=24
    short Yvel; // size=0, offset=26
    short Zvel; // size=0, offset=28
    short Pad; // size=0, offset=30
};
struct GUNFLASH_STRUCT {
    struct MATRIX3D matrix; // size=32, offset=0
    short on; // size=0, offset=32
};
struct DRIP_STRUCT {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    unsigned char On; // size=0, offset=12
    unsigned char R; // size=0, offset=13
    unsigned char G; // size=0, offset=14
    unsigned char B; // size=0, offset=15
    short Yvel; // size=0, offset=16
    unsigned char Gravity; // size=0, offset=18
    unsigned char Life; // size=0, offset=19
    short RoomNumber; // size=0, offset=20
    unsigned char Outside; // size=0, offset=22
    unsigned char Pad; // size=0, offset=23
};
struct NODEOFFSET_INFO {
    short x; // size=0, offset=0
    short y; // size=0, offset=2
    short z; // size=0, offset=4
    char mesh_num; // size=0, offset=6
    unsigned char GotIt; // size=0, offset=7
};
struct SHOCKWAVE_STRUCT {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short InnerRad; // size=0, offset=12
    short OuterRad; // size=0, offset=14
    short XRot; // size=0, offset=16
    short Flags; // size=0, offset=18
    unsigned char r; // size=0, offset=20
    unsigned char g; // size=0, offset=21
    unsigned char b; // size=0, offset=22
    unsigned char life; // size=0, offset=23
    short Speed; // size=0, offset=24
    short Temp; // size=0, offset=26
};
struct HAIR_STRUCT {
    struct PHD_3DPOS pos; // size=20, offset=0
    struct PHD_VECTOR vel; // size=12, offset=20
};
struct DISPLAYPU {
    short life; // size=0, offset=0
    short object_number; // size=0, offset=2
};
struct INVOBJ {
    short object_number; // size=0, offset=0
    short yoff; // size=0, offset=2
    short scale1; // size=0, offset=4
    short yrot; // size=0, offset=6
    short xrot; // size=0, offset=8
    short zrot; // size=0, offset=10
    short flags; // size=0, offset=12
    short objname; // size=0, offset=14
    unsigned long meshbits; // size=0, offset=16
};
struct OBJLIST {
    short invitem; // size=0, offset=0
    unsigned short yrot; // size=0, offset=2
    unsigned short bright; // size=0, offset=4
};
struct RINGME {
    struct OBJLIST current_object_list[100]; // size=600, offset=0
    int ringactive; // size=0, offset=600
    int objlistmovement; // size=0, offset=604
    int curobjinlist; // size=0, offset=608
    int numobjectsinlist; // size=0, offset=612
};
struct AMMOLIST {
    short invitem; // size=0, offset=0
    short amount; // size=0, offset=2
    unsigned short yrot; // size=0, offset=4
};
struct MENUTHANG {
    int type; // size=0, offset=0
    char *text; // size=0, offset=4
};
struct COMBINELIST {
    void *combine_routine; // size=0, offset=0
    short item1; // size=0, offset=4
    short item2; // size=0, offset=6
    short combined_item; // size=0, offset=8
};
struct WEAPON_INFO {
    short lock_angles[4]; // size=8, offset=0
    short left_angles[4]; // size=8, offset=8
    short right_angles[4]; // size=8, offset=16
    short aim_speed; // size=0, offset=24
    short shot_accuracy; // size=0, offset=26
    short gun_height; // size=0, offset=28
    short target_dist; // size=0, offset=30
    char damage; // size=0, offset=32
    char recoil_frame; // size=0, offset=33
    char flash_time; // size=0, offset=34
    char draw_frame; // size=0, offset=35
    short sample_num; // size=0, offset=36
};
struct PISTOL_DEF {
    short ObjectNum; // size=0, offset=0
    char Draw1Anim2; // size=0, offset=2
    char Draw1Anim; // size=0, offset=3
    char Draw2Anim; // size=0, offset=4
    char RecoilAnim; // size=0, offset=5
};
struct SUBSUIT_INFO {
    short XRot; // size=0, offset=0
    short dXRot; // size=0, offset=2
    short XRotVel; // size=0, offset=4
    short Vel[2]; // size=4, offset=6
    short YVel; // size=0, offset=10
};
struct savegame_info {
    short Checksum; // size=0, offset=0
    unsigned short VolumeCD; // size=0, offset=2
    unsigned short VolumeFX; // size=0, offset=4
    short ScreenX; // size=0, offset=6
    short ScreenY; // size=0, offset=8
    unsigned char ControlOption; // size=0, offset=10
    unsigned char VibrateOn; // size=0, offset=11
    unsigned char AutoTarget; // size=0, offset=12
    struct lara_info Lara; // size=352, offset=16
    struct STATS Level; // size=20, offset=368
    struct STATS Game; // size=20, offset=388
    short WeaponObject; // size=0, offset=408
    short WeaponAnim; // size=0, offset=410
    short WeaponFrame; // size=0, offset=412
    short WeaponCurrent; // size=0, offset=414
    short WeaponGoal; // size=0, offset=416
    unsigned long CutSceneTriggered1; // size=0, offset=420
    unsigned long CutSceneTriggered2; // size=0, offset=424
    char GameComplete; // size=0, offset=428
    unsigned char CurrentLevel; // size=0, offset=429
    unsigned char CampaignSecrets[4]; // size=4, offset=430
    unsigned char TLCount; // size=0, offset=434
};
struct SAMPLE_INFO {
    short number; // size=0, offset=0
    unsigned char volume; // size=0, offset=2
    char radius; // size=0, offset=3
    char randomness; // size=0, offset=4
    char pitch; // size=0, offset=5
    short flags; // size=0, offset=6
};
struct SoundSlot {
    int OrigVolume; // size=0, offset=0
    int nVolume; // size=0, offset=4
    int nPan; // size=0, offset=8
    int nPitch; // size=0, offset=12
    int nSampleInfo; // size=0, offset=16
    unsigned long distance; // size=0, offset=20
    struct PHD_VECTOR pos; // size=12, offset=24
};
struct FOOTPRINT {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
    short YRot; // size=0, offset=12
    short Active; // size=0, offset=14
};
struct VECTOR3D {
    long x; // size=0, offset=0
    long y; // size=0, offset=4
    long z; // size=0, offset=8
};
struct CdlFILE {
    struct CdlLOC pos; // size=4, offset=0
    unsigned long size; // size=0, offset=4
    char name[16]; // size=16, offset=8
};
struct SpuCommonAttr {
    unsigned long mask; // size=0, offset=0
    struct SpuVolume mvol; // size=4, offset=4
    struct SpuVolume mvolmode; // size=4, offset=8
    struct SpuVolume mvolx; // size=4, offset=12
    struct SpuExtAttr cd; // size=12, offset=16
    struct SpuExtAttr ext; // size=12, offset=28
};
struct LINE_F2 {
    unsigned long tag; // size=0, offset=0
    unsigned char r0; // size=0, offset=4
    unsigned char g0; // size=0, offset=5
    unsigned char b0; // size=0, offset=6
    unsigned char code; // size=0, offset=7
    short x0; // size=0, offset=8
    short y0; // size=0, offset=10
    short x1; // size=0, offset=12
    short y1; // size=0, offset=14
};
struct DB_STRUCT {
    int current_buffer; // size=0, offset=0
    unsigned long *ot; // size=0, offset=4
    char *polyptr; // size=0, offset=8
    char *curpolybuf; // size=0, offset=12
    char *polybuf_limit; // size=0, offset=16
    int nOTSize; // size=0, offset=20
    int nPBSize; // size=0, offset=24
    unsigned long *order_table[2]; // size=8, offset=28
    unsigned long *poly_buffer[2]; // size=8, offset=36
    unsigned long *pickup_ot; // size=0, offset=44
    unsigned long *pickup_order_table[2]; // size=8, offset=48
    struct DRAWENV draw[2]; // size=184, offset=56
    struct DISPENV disp[2]; // size=40, offset=240
};
struct PSXTEXTSTRUCT {
    unsigned long u0v0clut; // size=0, offset=0
    unsigned long u1v1tpage; // size=0, offset=4
    unsigned long u2v2pad; // size=0, offset=8
    unsigned long u3v3pad; // size=0, offset=12
};
struct PSXSPRITESTRUCT {
    short x1; // size=0, offset=0
    short y1; // size=0, offset=2
    short x2; // size=0, offset=4
    short y2; // size=0, offset=6
    unsigned short clut; // size=0, offset=8
    unsigned short tpage; // size=0, offset=10
    unsigned char u1; // size=0, offset=12
    unsigned char v1; // size=0, offset=13
    unsigned char u2; // size=0, offset=14
    unsigned char v2; // size=0, offset=15
};
struct MMTEXTURE {
    struct TEXTURE t[3]; // size=48, offset=0
};
struct TSV {
    unsigned long xy; // size=0, offset=0
    unsigned long rgz; // size=0, offset=4
};
struct ControllerPacket {
    unsigned char transStatus; // size=0, offset=0
    unsigned char dataFormat; // size=0, offset=1
    union .76fake data; // size=32, offset=2
};
struct pad_configs {
    unsigned long pad_L2; // size=0, offset=0
    unsigned long pad_R2; // size=0, offset=4
    unsigned long pad_L1; // size=0, offset=8
    unsigned long pad_R1; // size=0, offset=12
    unsigned long pad_triangle; // size=0, offset=16
    unsigned long pad_square; // size=0, offset=20
    unsigned long pad_circle; // size=0, offset=24
    unsigned long pad_cross; // size=0, offset=28
};
struct GouraudBarColourSet {
    unsigned char abLeftRed[5]; // size=5, offset=0
    unsigned char abLeftGreen[5]; // size=5, offset=5
    unsigned char abLeftBlue[5]; // size=5, offset=10
    unsigned char abRightRed[5]; // size=5, offset=15
    unsigned char abRightGreen[5]; // size=5, offset=20
    unsigned char abRightBlue[5]; // size=5, offset=25
};
struct STASHEDOBJ {
    short clip; // size=0, offset=0
    short numnodestodraw; // size=0, offset=2
    struct ITEM_INFO *item; // size=144, offset=4
    short *frmptr0; // size=0, offset=8
};
struct STASHEDDAT {
    short *mesh; // size=0, offset=0
    char matrix[32]; // size=32, offset=4
};
struct WATERTAB {
    char shimmer; // size=0, offset=0
    char choppy; // size=0, offset=1
    unsigned char random; // size=0, offset=2
    unsigned char abs; // size=0, offset=3
};
struct LINE_G2 {
    unsigned long tag; // size=0, offset=0
    unsigned char r0; // size=0, offset=4
    unsigned char g0; // size=0, offset=5
    unsigned char b0; // size=0, offset=6
    unsigned char code; // size=0, offset=7
    short x0; // size=0, offset=8
    short y0; // size=0, offset=10
    unsigned char r1; // size=0, offset=12
    unsigned char g1; // size=0, offset=13
    unsigned char b1; // size=0, offset=14
    unsigned char p1; // size=0, offset=15
    short x1; // size=0, offset=16
    short y1; // size=0, offset=18
};
struct VIBRATION {
    short Rate; // size=0, offset=0
    short Len; // size=0, offset=2
    short Lev; // size=0, offset=4
    short Acc; // size=0, offset=6
    short Dec; // size=0, offset=8
    short Sus; // size=0, offset=10
    short Flag; // size=0, offset=12
    short Vib; // size=0, offset=14
};
struct REQUESTER {
    unsigned short TitleTxt; // size=0, offset=0
    unsigned short TitleCol : 5; // offset=2.0
    unsigned short nOptions : 3; // offset=2.5
    unsigned short CursorPos : 3; // offset=3.0
    unsigned short OptionCol : 5; // offset=3.3
    unsigned long JustifyL : 5; // offset=4.0
    unsigned long JustifyR : 5; // offset=4.5
    unsigned long Arrows : 5; // offset=5.2
    unsigned long Ignore : 5; // offset=5.7
    unsigned short OptionTxt[5]; // size=10, offset=8
};
struct SCALE {
    short xgrid; // size=0, offset=0
    char scalefactor; // size=0, offset=2
    char nummarks; // size=0, offset=3
};
struct COCKSUCK {
    unsigned char r; // size=0, offset=0
    unsigned char g; // size=0, offset=1
    unsigned char b; // size=0, offset=2
    unsigned char pad; // size=0, offset=3
    short finalcnt; // size=0, offset=4
    short profile_xcnt; // size=0, offset=6
};
struct PACKEDNAME {
    char Name[12]; // size=12, offset=0
    unsigned char Days; // size=0, offset=12
    unsigned char Hours; // size=0, offset=13
    unsigned char Min; // size=0, offset=14
    unsigned char Sec; // size=0, offset=15
    unsigned short Slot; // size=0, offset=16
    unsigned char Level; // size=0, offset=18
    unsigned char Pad; // size=0, offset=19
};
struct POLY_FT4 {
    unsigned long tag; // size=0, offset=0
    unsigned char r0; // size=0, offset=4
    unsigned char g0; // size=0, offset=5
    unsigned char b0; // size=0, offset=6
    unsigned char code; // size=0, offset=7
    short x0; // size=0, offset=8
    short y0; // size=0, offset=10
    unsigned char u0; // size=0, offset=12
    unsigned char v0; // size=0, offset=13
    unsigned short clut; // size=0, offset=14
    short x1; // size=0, offset=16
    short y1; // size=0, offset=18
    unsigned char u1; // size=0, offset=20
    unsigned char v1; // size=0, offset=21
    unsigned short tpage; // size=0, offset=22
    short x2; // size=0, offset=24
    short y2; // size=0, offset=26
    unsigned char u2; // size=0, offset=28
    unsigned char v2; // size=0, offset=29
    unsigned short pad1; // size=0, offset=30
    short x3; // size=0, offset=32
    short y3; // size=0, offset=34
    unsigned char u3; // size=0, offset=36
    unsigned char v3; // size=0, offset=37
    unsigned short pad2; // size=0, offset=38
};

// 208 typedefs
typedef struct VECTOR VECTOR;
typedef struct SVECTOR SVECTOR;
typedef struct CVECTOR CVECTOR;
typedef struct DVECTOR DVECTOR;
typedef struct RVECTOR RVECTOR;
typedef struct CRVECTOR3 CRVECTOR3;
typedef struct CRVECTOR4 CRVECTOR4;
typedef struct RECT RECT;
typedef struct DR_ENV DR_ENV;
typedef struct DRAWENV DRAWENV;
typedef struct DISPENV DISPENV;
typedef struct PHD_VECTOR PHD_VECTOR;
typedef struct PHD_3DPOS PHD_3DPOS;
typedef struct TEXTURE TEXTURE;
typedef struct CdlLOC CdlLOC;
typedef struct ILIGHT ILIGHT;
typedef struct ITEM_LIGHT ITEM_LIGHT;
typedef struct ITEM_INFO ITEM_INFO;
typedef struct MouseData MouseData;
typedef struct NegconData NegconData;
typedef struct GunConData GunConData;
typedef struct AnalogjoyData AnalogjoyData;
typedef struct AnalogController AnalogController;
typedef struct TapCtrllerData TapCtrllerData;
typedef struct MultiTapData MultiTapData;
typedef struct SpuVolume SpuVolume;
typedef struct SpuVoiceAttr SpuVoiceAttr;
typedef struct SpuExtAttr SpuExtAttr;
typedef struct SpuStVoiceAttr SpuStVoiceAttr;
typedef struct FLOOR_INFO FLOOR_INFO;
typedef struct LIGHTINFO LIGHTINFO;
typedef struct MESH_INFO MESH_INFO;
typedef struct FX_INFO FX_INFO;
typedef struct lara_arm LARA_ARM;
typedef struct box_node BOX_NODE;
typedef enum mood_type MOOD_TYPE;
typedef enum zone_type ZONE_TYPE;
typedef struct lot_info LOT_INFO;
typedef struct creature_info CREATURE_INFO;
typedef struct ROPE_STRUCT ROPE_STRUCT;
typedef struct lara_info LARA_INFO;
typedef struct STATS STATS;
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef unsigned short ushort;
typedef struct _physadr *physadr;
typedef long daddr_t;
typedef char *caddr_t;
typedef long *qaddr_t;
typedef unsigned long ino_t;
typedef long swblk_t;
typedef unsigned int size_t;
typedef long time_t;
typedef short dev_t;
typedef long off_t;
typedef unsigned short uid_t;
typedef unsigned short gid_t;
typedef void *MemCB;
typedef unsigned char uint8;
typedef char sint8;
typedef unsigned short uint16;
typedef short sint16;
typedef unsigned long uint32;
typedef long sint32;
typedef char bool;
typedef void VOIDFUNCVOID;
typedef void VOIDFUNCSINT16;
typedef char BYTE;
typedef unsigned char UBYTE;
typedef short WORD;
typedef unsigned short UWORD;
typedef long LONG;
typedef unsigned long ULONG;
typedef unsigned char uchar;
typedef unsigned long ulong;
typedef short PHD_ANGLE;
typedef void *CdlCB;
typedef unsigned short PadData;
typedef void *SpuIRQCallbackProc;
typedef void *SpuTransferCallbackProc;
typedef void *SpuStCallbackProc;
typedef struct MATRIX3D MATRIX3D;
typedef struct GAMEFLOW GAMEFLOW;
typedef struct STRINGHEADER STRINGHEADER;
typedef struct GAME_VECTOR GAME_VECTOR;
typedef struct OBJECT_VECTOR OBJECT_VECTOR;
typedef enum camera_type CAMERA_TYPE;
typedef struct SPHERE SPHERE;
typedef struct RTDECODE RTDECODE;
typedef struct ACTORME ACTORME;
typedef int INTFUNCVOID;
typedef int INTFUNCINT;
typedef void BLAHVOIDFUNCVOID;
typedef int INTFUNCCHARP;
typedef void VOIDFUNCINT;
typedef struct room_info ROOM_INFO;
typedef struct PENDULUM PENDULUM;
typedef struct object_info OBJECT_INFO;
typedef struct RAT_STRUCT RAT_STRUCT;
typedef struct BAT_STRUCT BAT_STRUCT;
typedef struct SPIDER_STRUCT SPIDER_STRUCT;
typedef struct TWOGUN_INFO TWOGUN_INFO;
typedef void ROPEFUNC1;
typedef void ROPEFUNC2;
typedef void ROPEFUNC3;
typedef void ROPEFUNC4;
typedef void ROPEFUNC5;
typedef void ROPEFUNC6;
typedef void SUBSUITFUNC1;
typedef void SUBSUITFUNC2;
typedef void BLOCKFUNC;
typedef void BLOCKFUNC2;
typedef long RATFUNC1;
typedef long SPIDERFUNC1;
typedef void TWOGUNFUNC2;
typedef void TWOGUNFUNC;
typedef struct LIGHTNING_STRUCT *LIGHTNINGFUNC1;
typedef struct CHARDEF CHARDEF;
typedef struct COLL_INFO COLL_INFO;
typedef struct ANIM_STRUCT ANIM_STRUCT;
typedef struct SPARKS SPARKS;
typedef struct PACKNODE PACKNODE;
typedef struct NODELOADHEADER NODELOADHEADER;
typedef struct RESIDENT_THING RESIDENT_THING;
typedef struct NEW_CUTSCENE NEW_CUTSCENE;
typedef struct CUTSEQ_ROUTINES CUTSEQ_ROUTINES;
typedef struct DOORPOS_DATA DOORPOS_DATA;
typedef struct DOOR_DATA DOOR_DATA;
typedef struct CHANGE_STRUCT CHANGE_STRUCT;
typedef struct RANGE_STRUCT RANGE_STRUCT;
typedef struct BITE_INFO BITE_INFO;
typedef struct box_info BOX_INFO;
typedef enum target_type TARGET_TYPE;
typedef struct AI_info AI_INFO;
typedef struct AIOBJECT AIOBJECT;
typedef struct CAMERA_INFO CAMERA_INFO;
typedef struct SHATTER_ITEM SHATTER_ITEM;
typedef struct OLD_CAMERA OLD_CAMERA;
typedef struct static_info STATIC_INFO;
typedef struct PSXTEXTI PSXTEXTI;
typedef struct DEBRIS_STRUCT DEBRIS_STRUCT;
typedef struct SPOTCAM SPOTCAM;
typedef struct QUAKE_CAM QUAKE_CAM;
typedef struct DYNAMIC DYNAMIC;
typedef struct SP_DYNAMIC SP_DYNAMIC;
typedef struct SPLASH_STRUCT SPLASH_STRUCT;
typedef struct RIPPLE_STRUCT RIPPLE_STRUCT;
typedef struct SPLASH_SETUP SPLASH_SETUP;
typedef void HYDRAFUNC2;
typedef void RGFUNC;
typedef struct FIRE_LIST FIRE_LIST;
typedef struct FIRE_SPARKS FIRE_SPARKS;
typedef struct SMOKE_SPARKS SMOKE_SPARKS;
typedef struct BLOOD_STRUCT BLOOD_STRUCT;
typedef struct GUNSHELL_STRUCT GUNSHELL_STRUCT;
typedef struct BUBBLE_STRUCT BUBBLE_STRUCT;
typedef struct GUNFLASH_STRUCT GUNFLASH_STRUCT;
typedef struct DRIP_STRUCT DRIP_STRUCT;
typedef struct NODEOFFSET_INFO NODEOFFSET_INFO;
typedef struct SHOCKWAVE_STRUCT SHOCKWAVE_STRUCT;
typedef struct HAIR_STRUCT HAIR_STRUCT;
typedef struct DISPLAYPU DISPLAYPU;
typedef struct INVOBJ INVOBJ;
typedef struct OBJLIST OBJLIST;
typedef struct RINGME RINGME;
typedef struct AMMOLIST AMMOLIST;
typedef struct MENUTHANG MENUTHANG;
typedef struct COMBINELIST COMBINELIST;
typedef struct WEAPON_INFO WEAPON_INFO;
typedef struct PISTOL_DEF PISTOL_DEF;
typedef struct SUBSUIT_INFO SUBSUIT_INFO;
typedef void SKELETONFUNC;
typedef void SKELETONFUNC2;
typedef void TOWER2FUNC1;
typedef void TOWER2FUNC2;
typedef void TOWER2FUNC3;
typedef struct savegame_info SAVEGAME_INFO;
typedef struct SAMPLE_INFO SAMPLE_INFO;
typedef struct SoundSlot SoundSlot;
typedef struct FOOTPRINT FOOTPRINT;
typedef struct VECTOR3D VECTOR3D;
typedef struct CdlFILE CdlFILE;
typedef struct SpuCommonAttr SpuCommonAttr;
typedef unsigned short DECDCTTAB[34816];
typedef struct LINE_F2 LINE_F2;
typedef struct DB_STRUCT DB_STRUCT;
typedef struct PSXTEXTSTRUCT PSXTEXTSTRUCT;
typedef struct PSXSPRITESTRUCT PSXSPRITESTRUCT;
typedef struct MMTEXTURE MMTEXTURE;
typedef struct TSV TSV;
typedef struct ControllerPacket ControllerPacket;
typedef struct pad_configs PAD_CONFIG;
typedef struct GouraudBarColourSet GouraudBarColourSet;
typedef struct STASHEDOBJ STASHEDOBJ;
typedef struct STASHEDDAT STASHEDDAT;
typedef struct WATERTAB WATERTAB;
typedef unsigned long wchar_t;
typedef struct LINE_G2 LINE_G2;
typedef struct VIBRATION VIBRATION;
typedef struct REQUESTER REQUESTER;
typedef struct SCALE SCALE;
typedef struct COCKSUCK COCKSUCK;
typedef struct PACKEDNAME PACKEDNAME;
typedef struct POLY_FT4 POLY_FT4;
typedef void JOBY2FUNC1;
typedef void JOBY2FUNC2;
